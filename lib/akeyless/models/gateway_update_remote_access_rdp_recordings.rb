=begin
#Akeyless API

#The purpose of this application is to provide access to Akeyless API.

The version of the OpenAPI document: 2.0
Contact: support@akeyless.io
Generated by: https://openapi-generator.tech
Generator version: 7.9.0-SNAPSHOT

=end

require 'date'
require 'time'

module Akeyless
  # gatewayUpdateRemoteAccessRdpRecordings is a command that update remote access rdp recording config
  class GatewayUpdateRemoteAccessRdpRecordings
    # AWS access key id. For more information refer to https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html
    attr_accessor :aws_storage_access_key_id

    # The AWS bucket name. For more information refer to https://docs.aws.amazon.com/s3/
    attr_accessor :aws_storage_bucket_name

    # The folder name in S3 bucket. For more information refer to https://docs.aws.amazon.com/s3/
    attr_accessor :aws_storage_bucket_prefix

    # The region where the storage is located
    attr_accessor :aws_storage_region

    # AWS secret access key. For more information refer to https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html
    attr_accessor :aws_storage_secret_access_key

    # Azure account name. For more information refer to https://learn.microsoft.com/en-us/azure/storage/common/storage-account-overview
    attr_accessor :azure_storage_account_name

    # Azure client id. For more information refer to https://learn.microsoft.com/en-us/azure/storage/common/storage-account-get-info?tabs=portal
    attr_accessor :azure_storage_client_id

    # Azure client secret. For more information refer to https://learn.microsoft.com/en-us/azure/storage/common/storage-account-get-info?tabs=portal
    attr_accessor :azure_storage_client_secret

    # Azure container name. For more information refer to https://learn.microsoft.com/en-us/rest/api/storageservices/naming-and-referencing-containers--blobs--and-metadata
    attr_accessor :azure_storage_container_name

    # Azure tenant id. For more information refer to https://learn.microsoft.com/en-us/entra/fundamentals/how-to-find-tenant
    attr_accessor :azure_storage_tenant_id

    # Set output format to JSON
    attr_accessor :json

    # Enable recording of rdp session [true/false]
    attr_accessor :rdp_session_recording

    # Rdp session recording storage destination [local/aws/azure]
    attr_accessor :rdp_session_storage

    # Authentication token (see `/auth` and `/configure`)
    attr_accessor :token

    # The universal identity token, Required only for universal_identity authentication
    attr_accessor :uid_token

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'aws_storage_access_key_id' => :'aws-storage-access-key-id',
        :'aws_storage_bucket_name' => :'aws-storage-bucket-name',
        :'aws_storage_bucket_prefix' => :'aws-storage-bucket-prefix',
        :'aws_storage_region' => :'aws-storage-region',
        :'aws_storage_secret_access_key' => :'aws-storage-secret-access-key',
        :'azure_storage_account_name' => :'azure-storage-account-name',
        :'azure_storage_client_id' => :'azure-storage-client-id',
        :'azure_storage_client_secret' => :'azure-storage-client-secret',
        :'azure_storage_container_name' => :'azure-storage-container-name',
        :'azure_storage_tenant_id' => :'azure-storage-tenant-id',
        :'json' => :'json',
        :'rdp_session_recording' => :'rdp-session-recording',
        :'rdp_session_storage' => :'rdp-session-storage',
        :'token' => :'token',
        :'uid_token' => :'uid-token'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'aws_storage_access_key_id' => :'String',
        :'aws_storage_bucket_name' => :'String',
        :'aws_storage_bucket_prefix' => :'String',
        :'aws_storage_region' => :'String',
        :'aws_storage_secret_access_key' => :'String',
        :'azure_storage_account_name' => :'String',
        :'azure_storage_client_id' => :'String',
        :'azure_storage_client_secret' => :'String',
        :'azure_storage_container_name' => :'String',
        :'azure_storage_tenant_id' => :'String',
        :'json' => :'Boolean',
        :'rdp_session_recording' => :'String',
        :'rdp_session_storage' => :'String',
        :'token' => :'String',
        :'uid_token' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Akeyless::GatewayUpdateRemoteAccessRdpRecordings` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Akeyless::GatewayUpdateRemoteAccessRdpRecordings`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'aws_storage_access_key_id')
        self.aws_storage_access_key_id = attributes[:'aws_storage_access_key_id']
      end

      if attributes.key?(:'aws_storage_bucket_name')
        self.aws_storage_bucket_name = attributes[:'aws_storage_bucket_name']
      end

      if attributes.key?(:'aws_storage_bucket_prefix')
        self.aws_storage_bucket_prefix = attributes[:'aws_storage_bucket_prefix']
      end

      if attributes.key?(:'aws_storage_region')
        self.aws_storage_region = attributes[:'aws_storage_region']
      end

      if attributes.key?(:'aws_storage_secret_access_key')
        self.aws_storage_secret_access_key = attributes[:'aws_storage_secret_access_key']
      end

      if attributes.key?(:'azure_storage_account_name')
        self.azure_storage_account_name = attributes[:'azure_storage_account_name']
      end

      if attributes.key?(:'azure_storage_client_id')
        self.azure_storage_client_id = attributes[:'azure_storage_client_id']
      end

      if attributes.key?(:'azure_storage_client_secret')
        self.azure_storage_client_secret = attributes[:'azure_storage_client_secret']
      end

      if attributes.key?(:'azure_storage_container_name')
        self.azure_storage_container_name = attributes[:'azure_storage_container_name']
      end

      if attributes.key?(:'azure_storage_tenant_id')
        self.azure_storage_tenant_id = attributes[:'azure_storage_tenant_id']
      end

      if attributes.key?(:'json')
        self.json = attributes[:'json']
      else
        self.json = false
      end

      if attributes.key?(:'rdp_session_recording')
        self.rdp_session_recording = attributes[:'rdp_session_recording']
      end

      if attributes.key?(:'rdp_session_storage')
        self.rdp_session_storage = attributes[:'rdp_session_storage']
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'uid_token')
        self.uid_token = attributes[:'uid_token']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          aws_storage_access_key_id == o.aws_storage_access_key_id &&
          aws_storage_bucket_name == o.aws_storage_bucket_name &&
          aws_storage_bucket_prefix == o.aws_storage_bucket_prefix &&
          aws_storage_region == o.aws_storage_region &&
          aws_storage_secret_access_key == o.aws_storage_secret_access_key &&
          azure_storage_account_name == o.azure_storage_account_name &&
          azure_storage_client_id == o.azure_storage_client_id &&
          azure_storage_client_secret == o.azure_storage_client_secret &&
          azure_storage_container_name == o.azure_storage_container_name &&
          azure_storage_tenant_id == o.azure_storage_tenant_id &&
          json == o.json &&
          rdp_session_recording == o.rdp_session_recording &&
          rdp_session_storage == o.rdp_session_storage &&
          token == o.token &&
          uid_token == o.uid_token
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [aws_storage_access_key_id, aws_storage_bucket_name, aws_storage_bucket_prefix, aws_storage_region, aws_storage_secret_access_key, azure_storage_account_name, azure_storage_client_id, azure_storage_client_secret, azure_storage_container_name, azure_storage_tenant_id, json, rdp_session_recording, rdp_session_storage, token, uid_token].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Akeyless.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
