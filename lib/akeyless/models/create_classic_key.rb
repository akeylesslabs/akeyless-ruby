=begin
#Akeyless API

#The purpose of this application is to provide access to Akeyless API.

The version of the OpenAPI document: 2.0
Contact: support@akeyless.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.0-SNAPSHOT

=end

require 'date'
require 'time'

module Akeyless
  # CreateClassicKey is a command that creates classic key
  class CreateClassicKey
    # Classic Key type; options: [AES128GCM, AES256GCM, AES128SIV, AES256SIV, RSA1024, RSA2048, RSA3072, RSA4096, EC256, EC384]
    attr_accessor :alg

    # Certificate in a PEM format.
    attr_accessor :cert_file_data

    # Base64-encoded classic key value
    attr_accessor :key_data

    # A list of allowed operations for the key (required for azure targets)
    attr_accessor :key_operations

    # Keyring name of the GCP KMS (required for gcp targets)
    attr_accessor :keyring_name

    # Algorithm of the key in GCP KMS (required for gcp targets)
    attr_accessor :kms_algorithm

    # Location id of the GCP KMS (required for gcp targets)
    attr_accessor :location_id

    # Metadata about the classic key
    attr_accessor :metadata

    # ClassicKey name
    attr_accessor :name

    # Project id of the GCP KMS (required for gcp targets)
    attr_accessor :project_id

    # The name of a key that used to encrypt the secret value (if empty, the account default protectionKey key will be used)
    attr_accessor :protection_key_name

    # Purpose of the key in GCP KMS (required for gcp targets)
    attr_accessor :purpose

    # List of the tags attached to this classic key
    attr_accessor :tags

    # Target name
    attr_accessor :target_name

    # The tenant secret type [Data/SearchIndex/Analytics] (required for salesforce targets)
    attr_accessor :tenant_secret_type

    # Authentication token (see `/auth` and `/configure`)
    attr_accessor :token

    # The universal identity token, Required only for universal_identity authentication
    attr_accessor :uid_token

    # Name of the vault used (required for azure targets)
    attr_accessor :vault_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'alg' => :'alg',
        :'cert_file_data' => :'cert-file-data',
        :'key_data' => :'key-data',
        :'key_operations' => :'key-operations',
        :'keyring_name' => :'keyring-name',
        :'kms_algorithm' => :'kms-algorithm',
        :'location_id' => :'location-id',
        :'metadata' => :'metadata',
        :'name' => :'name',
        :'project_id' => :'project-id',
        :'protection_key_name' => :'protection-key-name',
        :'purpose' => :'purpose',
        :'tags' => :'tags',
        :'target_name' => :'target-name',
        :'tenant_secret_type' => :'tenant-secret-type',
        :'token' => :'token',
        :'uid_token' => :'uid-token',
        :'vault_name' => :'vault-name'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'alg' => :'String',
        :'cert_file_data' => :'String',
        :'key_data' => :'String',
        :'key_operations' => :'Array<String>',
        :'keyring_name' => :'String',
        :'kms_algorithm' => :'String',
        :'location_id' => :'String',
        :'metadata' => :'String',
        :'name' => :'String',
        :'project_id' => :'String',
        :'protection_key_name' => :'String',
        :'purpose' => :'String',
        :'tags' => :'Array<String>',
        :'target_name' => :'String',
        :'tenant_secret_type' => :'String',
        :'token' => :'String',
        :'uid_token' => :'String',
        :'vault_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Akeyless::CreateClassicKey` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Akeyless::CreateClassicKey`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'alg')
        self.alg = attributes[:'alg']
      end

      if attributes.key?(:'cert_file_data')
        self.cert_file_data = attributes[:'cert_file_data']
      end

      if attributes.key?(:'key_data')
        self.key_data = attributes[:'key_data']
      end

      if attributes.key?(:'key_operations')
        if (value = attributes[:'key_operations']).is_a?(Array)
          self.key_operations = value
        end
      end

      if attributes.key?(:'keyring_name')
        self.keyring_name = attributes[:'keyring_name']
      end

      if attributes.key?(:'kms_algorithm')
        self.kms_algorithm = attributes[:'kms_algorithm']
      end

      if attributes.key?(:'location_id')
        self.location_id = attributes[:'location_id']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'project_id')
        self.project_id = attributes[:'project_id']
      end

      if attributes.key?(:'protection_key_name')
        self.protection_key_name = attributes[:'protection_key_name']
      end

      if attributes.key?(:'purpose')
        self.purpose = attributes[:'purpose']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'target_name')
        self.target_name = attributes[:'target_name']
      end

      if attributes.key?(:'tenant_secret_type')
        self.tenant_secret_type = attributes[:'tenant_secret_type']
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'uid_token')
        self.uid_token = attributes[:'uid_token']
      end

      if attributes.key?(:'vault_name')
        self.vault_name = attributes[:'vault_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @alg.nil?
        invalid_properties.push('invalid value for "alg", alg cannot be nil.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @alg.nil?
      return false if @name.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          alg == o.alg &&
          cert_file_data == o.cert_file_data &&
          key_data == o.key_data &&
          key_operations == o.key_operations &&
          keyring_name == o.keyring_name &&
          kms_algorithm == o.kms_algorithm &&
          location_id == o.location_id &&
          metadata == o.metadata &&
          name == o.name &&
          project_id == o.project_id &&
          protection_key_name == o.protection_key_name &&
          purpose == o.purpose &&
          tags == o.tags &&
          target_name == o.target_name &&
          tenant_secret_type == o.tenant_secret_type &&
          token == o.token &&
          uid_token == o.uid_token &&
          vault_name == o.vault_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [alg, cert_file_data, key_data, key_operations, keyring_name, kms_algorithm, location_id, metadata, name, project_id, protection_key_name, purpose, tags, target_name, tenant_secret_type, token, uid_token, vault_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Akeyless.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
