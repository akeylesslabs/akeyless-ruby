=begin
#Akeyless API

#The purpose of this application is to provide access to Akeyless API.

The version of the OpenAPI document: 2.0
Contact: support@akeyless.io
Generated by: https://openapi-generator.tech
Generator version: 7.8.0-SNAPSHOT

=end

require 'date'
require 'time'

module Akeyless
  class DSProducerDetails
    attr_accessor :access_token_manager_id

    attr_accessor :acl_rules

    attr_accessor :active

    attr_accessor :admin_name

    attr_accessor :admin_pwd

    attr_accessor :admin_rotation_interval_days

    attr_accessor :administrative_port

    attr_accessor :artifactory_admin_apikey

    attr_accessor :artifactory_admin_username

    attr_accessor :artifactory_base_url

    attr_accessor :artifactory_token_audience

    attr_accessor :artifactory_token_scope

    attr_accessor :authorization_port

    attr_accessor :aws_access_key_id

    attr_accessor :aws_access_mode

    attr_accessor :aws_region

    attr_accessor :aws_role_arns

    attr_accessor :aws_secret_access_key

    attr_accessor :aws_session_tags

    attr_accessor :aws_session_token

    attr_accessor :aws_transitive_tag_keys

    attr_accessor :aws_user_console_access

    attr_accessor :aws_user_groups

    attr_accessor :aws_user_policies

    attr_accessor :aws_user_programmatic_access

    attr_accessor :azure_app_object_id

    attr_accessor :azure_client_id

    attr_accessor :azure_client_secret

    attr_accessor :azure_fixed_user_name_sub_claim_key

    attr_accessor :azure_fixed_user_only

    attr_accessor :azure_resource_group_name

    attr_accessor :azure_resource_name

    attr_accessor :azure_subscription_id

    attr_accessor :azure_tenant_id

    attr_accessor :azure_user_groups_obj_id

    attr_accessor :azure_user_portal_access

    attr_accessor :azure_user_programmatic_access

    attr_accessor :azure_user_roles_template_id

    attr_accessor :azure_username

    attr_accessor :cassandra_creation_statements

    attr_accessor :chef_organizations

    attr_accessor :chef_server_access_mode

    attr_accessor :chef_server_host_name

    attr_accessor :chef_server_key

    attr_accessor :chef_server_port

    attr_accessor :chef_server_url

    attr_accessor :chef_server_username

    attr_accessor :chef_skip_ssl

    attr_accessor :client_authentication_type

    attr_accessor :cloud_service_provider

    attr_accessor :cluster_mode

    attr_accessor :connection_type

    attr_accessor :create_sync_url

    attr_accessor :db_client_id

    attr_accessor :db_client_secret

    attr_accessor :db_host_name

    attr_accessor :db_isolation_level

    attr_accessor :db_max_idle_conns

    attr_accessor :db_max_open_conns

    attr_accessor :db_name

    attr_accessor :db_port

    # (Optional) Private Key in PEM format
    attr_accessor :db_private_key

    attr_accessor :db_private_key_passphrase

    attr_accessor :db_pwd

    # (Optional) DBServerCertificates defines the set of root certificate authorities that clients use when verifying server certificates. If DBServerCertificates is empty, TLS uses the host's root CA set.
    attr_accessor :db_server_certificates

    # (Optional) ServerName is used to verify the hostname on the returned certificates unless InsecureSkipVerify is given. It is also included in the client's handshake to support virtual hosting unless it is an IP address.
    attr_accessor :db_server_name

    attr_accessor :db_tenant_id

    attr_accessor :db_user_name

    attr_accessor :delete_protection

    attr_accessor :dynamic_secret_id

    attr_accessor :dynamic_secret_key

    attr_accessor :dynamic_secret_name

    attr_accessor :dynamic_secret_type

    attr_accessor :eks_access_key_id

    attr_accessor :eks_assume_role

    attr_accessor :eks_cluster_ca_certificate

    attr_accessor :eks_cluster_endpoint

    attr_accessor :eks_cluster_name

    attr_accessor :eks_region

    attr_accessor :eks_secret_access_key

    attr_accessor :enable_admin_rotation

    # relevant for PRIVATE_KEY_JWT client authentication type
    attr_accessor :enforce_replay_prevention

    attr_accessor :externally_provided_user

    attr_accessor :failure_message

    attr_accessor :fixed_user_only

    attr_accessor :gcp_key_algo

    attr_accessor :gcp_role_bindings

    # GCPServiceAccountEmail overrides the deprecated field from the target
    attr_accessor :gcp_service_account_email

    attr_accessor :gcp_service_account_key

    attr_accessor :gcp_service_account_key_base64

    attr_accessor :gcp_service_account_key_id

    attr_accessor :gcp_service_account_type

    attr_accessor :gcp_tmp_service_account_name

    attr_accessor :gcp_token_lifetime

    attr_accessor :gcp_token_scope

    attr_accessor :gcp_token_type

    attr_accessor :github_app_id

    attr_accessor :github_app_private_key

    attr_accessor :github_base_url

    attr_accessor :github_installation_id

    attr_accessor :github_installation_token_permissions

    attr_accessor :github_installation_token_repositories

    attr_accessor :github_installation_token_repositories_ids

    attr_accessor :github_organization_name

    attr_accessor :github_repository_path

    attr_accessor :gitlab_access_token

    attr_accessor :gitlab_access_type

    attr_accessor :gitlab_certificate

    attr_accessor :gitlab_group_name

    attr_accessor :gitlab_project_name

    attr_accessor :gitlab_role

    attr_accessor :gitlab_token_scope

    attr_accessor :gitlab_url

    attr_accessor :gke_cluster_ca_certificate

    attr_accessor :gke_cluster_endpoint

    attr_accessor :gke_cluster_name

    attr_accessor :gke_service_account_key

    attr_accessor :gke_service_account_name

    attr_accessor :google_workspace_access_mode

    attr_accessor :google_workspace_admin_name

    attr_accessor :google_workspace_group_name

    attr_accessor :google_workspace_group_role

    attr_accessor :google_workspace_role_name

    attr_accessor :google_workspace_role_scope

    attr_accessor :grant_types

    attr_accessor :groups

    attr_accessor :hanadb_creation_statements

    attr_accessor :hanadb_revocation_statements

    attr_accessor :host_name

    attr_accessor :host_port

    attr_accessor :implementation_type

    attr_accessor :is_fixed_user

    # relevant for CLIENT_TLS_CERTIFICATE client authentication type
    attr_accessor :issuer

    attr_accessor :item_targets_assoc

    attr_accessor :jwks

    attr_accessor :jwks_url

    # comma-separated list of allowed namespaces. Can hold just * which signifies that any namespace is allowed
    attr_accessor :k8s_allowed_namespaces

    attr_accessor :k8s_auth_type

    attr_accessor :k8s_bearer_token

    # For K8s Client certificates authentication
    attr_accessor :k8s_client_cert_data

    attr_accessor :k8s_client_key_data

    attr_accessor :k8s_cluster_ca_certificate

    attr_accessor :k8s_cluster_endpoint

    attr_accessor :k8s_cluster_name

    # when native k8s is in dynamic mode, user can define allowed namespaces, K8sServiceAccount doesn't exist from the start and will only be created at time of getting dynamic secret value By default dynamic mode is false and producer behaves like it did before
    attr_accessor :k8s_dynamic_mode

    # Yaml definition for creation of temporary objects. Field that can hold multiple docs from which following will be extracted: ServiceAccount, Role/ClusterRole and RoleBinding/ClusterRoleBinding. If ServiceAccount not specified - it will be generated automatically
    attr_accessor :k8s_multiple_doc_yaml_temp_definition

    attr_accessor :k8s_namespace

    # Name of the pre-existing Role or ClusterRole to bind a generated service account to.
    attr_accessor :k8s_role_name

    attr_accessor :k8s_role_type

    attr_accessor :k8s_service_account

    attr_accessor :last_admin_rotation

    attr_accessor :ldap_audience

    attr_accessor :ldap_bind_dn

    attr_accessor :ldap_bind_password

    attr_accessor :ldap_certificate

    attr_accessor :ldap_group_dn

    attr_accessor :ldap_token_expiration

    attr_accessor :ldap_url

    attr_accessor :ldap_user_attr

    attr_accessor :ldap_user_dn

    attr_accessor :metadata

    attr_accessor :mongodb_atlas_api_private_key

    attr_accessor :mongodb_atlas_api_public_key

    # mongodb atlas fields
    attr_accessor :mongodb_atlas_project_id

    attr_accessor :mongodb_custom_data

    # common fields
    attr_accessor :mongodb_db_name

    attr_accessor :mongodb_default_auth_db

    attr_accessor :mongodb_host_port

    attr_accessor :mongodb_is_atlas

    attr_accessor :mongodb_password

    # common fields
    attr_accessor :mongodb_roles

    # mongodb fields
    attr_accessor :mongodb_uri_connection

    attr_accessor :mongodb_uri_options

    attr_accessor :mongodb_username

    attr_accessor :mssql_creation_statements

    attr_accessor :mssql_revocation_statements

    attr_accessor :mysql_creation_statements

    attr_accessor :mysql_revocation_statements

    attr_accessor :oracle_creation_statements

    attr_accessor :oracle_revocation_statements

    attr_accessor :password

    attr_accessor :password_length

    attr_accessor :password_policy

    attr_accessor :payload

    attr_accessor :ping_url

    attr_accessor :postgres_creation_statements

    attr_accessor :postgres_revocation_statements

    attr_accessor :privileged_user

    attr_accessor :rabbitmq_server_password

    attr_accessor :rabbitmq_server_uri

    attr_accessor :rabbitmq_server_user

    attr_accessor :rabbitmq_user_conf_permission

    attr_accessor :rabbitmq_user_read_permission

    attr_accessor :rabbitmq_user_tags

    attr_accessor :rabbitmq_user_vhost

    attr_accessor :rabbitmq_user_write_permission

    attr_accessor :redirect_uris

    attr_accessor :redshift_creation_statements

    attr_accessor :restricted_scopes

    attr_accessor :revoke_sync_url

    attr_accessor :rotate_sync_url

    attr_accessor :scopes

    attr_accessor :secure_remote_access_details

    attr_accessor :session_extension_warn_interval_min

    attr_accessor :sf_account

    # generated  users info
    attr_accessor :sf_user_role

    attr_accessor :sf_warehouse_name

    # TODO delete this after migration
    attr_accessor :should_stop

    attr_accessor :signing_algorithm

    # (Optional) SSLConnectionCertificate defines the certificate for SSL connection. Must be base64 certificate loaded by UI using file loader field
    attr_accessor :ssl_connection_certificate

    # (Optional) SSLConnectionMode defines if SSL mode will be used to connect to DB
    attr_accessor :ssl_connection_mode

    attr_accessor :subject_dn

    attr_accessor :tags

    attr_accessor :timeout_seconds

    attr_accessor :use_gw_cloud_identity

    attr_accessor :use_gw_service_account

    attr_accessor :user_name

    attr_accessor :user_password

    attr_accessor :user_principal_name

    attr_accessor :user_ttl

    attr_accessor :username_length

    attr_accessor :username_policy

    attr_accessor :venafi_allow_subdomains

    attr_accessor :venafi_allowed_domains

    attr_accessor :venafi_api_key

    attr_accessor :venafi_auto_generated_folder

    attr_accessor :venafi_base_url

    attr_accessor :venafi_root_first_in_chain

    attr_accessor :venafi_sign_using_akeyless_pki

    attr_accessor :venafi_signer_key_name

    attr_accessor :venafi_store_private_key

    attr_accessor :venafi_tpp_access_token

    attr_accessor :venafi_tpp_client_id

    # Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead
    attr_accessor :venafi_tpp_password

    attr_accessor :venafi_tpp_refresh_token

    # Deprecated: VenafiAccessToken and VenafiRefreshToken should be used instead
    attr_accessor :venafi_tpp_username

    attr_accessor :venafi_use_tpp

    attr_accessor :venafi_zone

    attr_accessor :warn_before_user_expiration_min

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'access_token_manager_id' => :'access_token_manager_id',
        :'acl_rules' => :'acl_rules',
        :'active' => :'active',
        :'admin_name' => :'admin_name',
        :'admin_pwd' => :'admin_pwd',
        :'admin_rotation_interval_days' => :'admin_rotation_interval_days',
        :'administrative_port' => :'administrative_port',
        :'artifactory_admin_apikey' => :'artifactory_admin_apikey',
        :'artifactory_admin_username' => :'artifactory_admin_username',
        :'artifactory_base_url' => :'artifactory_base_url',
        :'artifactory_token_audience' => :'artifactory_token_audience',
        :'artifactory_token_scope' => :'artifactory_token_scope',
        :'authorization_port' => :'authorization_port',
        :'aws_access_key_id' => :'aws_access_key_id',
        :'aws_access_mode' => :'aws_access_mode',
        :'aws_region' => :'aws_region',
        :'aws_role_arns' => :'aws_role_arns',
        :'aws_secret_access_key' => :'aws_secret_access_key',
        :'aws_session_tags' => :'aws_session_tags',
        :'aws_session_token' => :'aws_session_token',
        :'aws_transitive_tag_keys' => :'aws_transitive_tag_keys',
        :'aws_user_console_access' => :'aws_user_console_access',
        :'aws_user_groups' => :'aws_user_groups',
        :'aws_user_policies' => :'aws_user_policies',
        :'aws_user_programmatic_access' => :'aws_user_programmatic_access',
        :'azure_app_object_id' => :'azure_app_object_id',
        :'azure_client_id' => :'azure_client_id',
        :'azure_client_secret' => :'azure_client_secret',
        :'azure_fixed_user_name_sub_claim_key' => :'azure_fixed_user_name_sub_claim_key',
        :'azure_fixed_user_only' => :'azure_fixed_user_only',
        :'azure_resource_group_name' => :'azure_resource_group_name',
        :'azure_resource_name' => :'azure_resource_name',
        :'azure_subscription_id' => :'azure_subscription_id',
        :'azure_tenant_id' => :'azure_tenant_id',
        :'azure_user_groups_obj_id' => :'azure_user_groups_obj_id',
        :'azure_user_portal_access' => :'azure_user_portal_access',
        :'azure_user_programmatic_access' => :'azure_user_programmatic_access',
        :'azure_user_roles_template_id' => :'azure_user_roles_template_id',
        :'azure_username' => :'azure_username',
        :'cassandra_creation_statements' => :'cassandra_creation_statements',
        :'chef_organizations' => :'chef_organizations',
        :'chef_server_access_mode' => :'chef_server_access_mode',
        :'chef_server_host_name' => :'chef_server_host_name',
        :'chef_server_key' => :'chef_server_key',
        :'chef_server_port' => :'chef_server_port',
        :'chef_server_url' => :'chef_server_url',
        :'chef_server_username' => :'chef_server_username',
        :'chef_skip_ssl' => :'chef_skip_ssl',
        :'client_authentication_type' => :'client_authentication_type',
        :'cloud_service_provider' => :'cloud_service_provider',
        :'cluster_mode' => :'cluster_mode',
        :'connection_type' => :'connection_type',
        :'create_sync_url' => :'create_sync_url',
        :'db_client_id' => :'db_client_id',
        :'db_client_secret' => :'db_client_secret',
        :'db_host_name' => :'db_host_name',
        :'db_isolation_level' => :'db_isolation_level',
        :'db_max_idle_conns' => :'db_max_idle_conns',
        :'db_max_open_conns' => :'db_max_open_conns',
        :'db_name' => :'db_name',
        :'db_port' => :'db_port',
        :'db_private_key' => :'db_private_key',
        :'db_private_key_passphrase' => :'db_private_key_passphrase',
        :'db_pwd' => :'db_pwd',
        :'db_server_certificates' => :'db_server_certificates',
        :'db_server_name' => :'db_server_name',
        :'db_tenant_id' => :'db_tenant_id',
        :'db_user_name' => :'db_user_name',
        :'delete_protection' => :'delete_protection',
        :'dynamic_secret_id' => :'dynamic_secret_id',
        :'dynamic_secret_key' => :'dynamic_secret_key',
        :'dynamic_secret_name' => :'dynamic_secret_name',
        :'dynamic_secret_type' => :'dynamic_secret_type',
        :'eks_access_key_id' => :'eks_access_key_id',
        :'eks_assume_role' => :'eks_assume_role',
        :'eks_cluster_ca_certificate' => :'eks_cluster_ca_certificate',
        :'eks_cluster_endpoint' => :'eks_cluster_endpoint',
        :'eks_cluster_name' => :'eks_cluster_name',
        :'eks_region' => :'eks_region',
        :'eks_secret_access_key' => :'eks_secret_access_key',
        :'enable_admin_rotation' => :'enable_admin_rotation',
        :'enforce_replay_prevention' => :'enforce_replay_prevention',
        :'externally_provided_user' => :'externally_provided_user',
        :'failure_message' => :'failure_message',
        :'fixed_user_only' => :'fixed_user_only',
        :'gcp_key_algo' => :'gcp_key_algo',
        :'gcp_role_bindings' => :'gcp_role_bindings',
        :'gcp_service_account_email' => :'gcp_service_account_email',
        :'gcp_service_account_key' => :'gcp_service_account_key',
        :'gcp_service_account_key_base64' => :'gcp_service_account_key_base64',
        :'gcp_service_account_key_id' => :'gcp_service_account_key_id',
        :'gcp_service_account_type' => :'gcp_service_account_type',
        :'gcp_tmp_service_account_name' => :'gcp_tmp_service_account_name',
        :'gcp_token_lifetime' => :'gcp_token_lifetime',
        :'gcp_token_scope' => :'gcp_token_scope',
        :'gcp_token_type' => :'gcp_token_type',
        :'github_app_id' => :'github_app_id',
        :'github_app_private_key' => :'github_app_private_key',
        :'github_base_url' => :'github_base_url',
        :'github_installation_id' => :'github_installation_id',
        :'github_installation_token_permissions' => :'github_installation_token_permissions',
        :'github_installation_token_repositories' => :'github_installation_token_repositories',
        :'github_installation_token_repositories_ids' => :'github_installation_token_repositories_ids',
        :'github_organization_name' => :'github_organization_name',
        :'github_repository_path' => :'github_repository_path',
        :'gitlab_access_token' => :'gitlab_access_token',
        :'gitlab_access_type' => :'gitlab_access_type',
        :'gitlab_certificate' => :'gitlab_certificate',
        :'gitlab_group_name' => :'gitlab_group_name',
        :'gitlab_project_name' => :'gitlab_project_name',
        :'gitlab_role' => :'gitlab_role',
        :'gitlab_token_scope' => :'gitlab_token_scope',
        :'gitlab_url' => :'gitlab_url',
        :'gke_cluster_ca_certificate' => :'gke_cluster_ca_certificate',
        :'gke_cluster_endpoint' => :'gke_cluster_endpoint',
        :'gke_cluster_name' => :'gke_cluster_name',
        :'gke_service_account_key' => :'gke_service_account_key',
        :'gke_service_account_name' => :'gke_service_account_name',
        :'google_workspace_access_mode' => :'google_workspace_access_mode',
        :'google_workspace_admin_name' => :'google_workspace_admin_name',
        :'google_workspace_group_name' => :'google_workspace_group_name',
        :'google_workspace_group_role' => :'google_workspace_group_role',
        :'google_workspace_role_name' => :'google_workspace_role_name',
        :'google_workspace_role_scope' => :'google_workspace_role_scope',
        :'grant_types' => :'grant_types',
        :'groups' => :'groups',
        :'hanadb_creation_statements' => :'hanadb_creation_statements',
        :'hanadb_revocation_statements' => :'hanadb_revocation_statements',
        :'host_name' => :'host_name',
        :'host_port' => :'host_port',
        :'implementation_type' => :'implementation_type',
        :'is_fixed_user' => :'is_fixed_user',
        :'issuer' => :'issuer',
        :'item_targets_assoc' => :'item_targets_assoc',
        :'jwks' => :'jwks',
        :'jwks_url' => :'jwks_url',
        :'k8s_allowed_namespaces' => :'k8s_allowed_namespaces',
        :'k8s_auth_type' => :'k8s_auth_type',
        :'k8s_bearer_token' => :'k8s_bearer_token',
        :'k8s_client_cert_data' => :'k8s_client_cert_data',
        :'k8s_client_key_data' => :'k8s_client_key_data',
        :'k8s_cluster_ca_certificate' => :'k8s_cluster_ca_certificate',
        :'k8s_cluster_endpoint' => :'k8s_cluster_endpoint',
        :'k8s_cluster_name' => :'k8s_cluster_name',
        :'k8s_dynamic_mode' => :'k8s_dynamic_mode',
        :'k8s_multiple_doc_yaml_temp_definition' => :'k8s_multiple_doc_yaml_temp_definition',
        :'k8s_namespace' => :'k8s_namespace',
        :'k8s_role_name' => :'k8s_role_name',
        :'k8s_role_type' => :'k8s_role_type',
        :'k8s_service_account' => :'k8s_service_account',
        :'last_admin_rotation' => :'last_admin_rotation',
        :'ldap_audience' => :'ldap_audience',
        :'ldap_bind_dn' => :'ldap_bind_dn',
        :'ldap_bind_password' => :'ldap_bind_password',
        :'ldap_certificate' => :'ldap_certificate',
        :'ldap_group_dn' => :'ldap_group_dn',
        :'ldap_token_expiration' => :'ldap_token_expiration',
        :'ldap_url' => :'ldap_url',
        :'ldap_user_attr' => :'ldap_user_attr',
        :'ldap_user_dn' => :'ldap_user_dn',
        :'metadata' => :'metadata',
        :'mongodb_atlas_api_private_key' => :'mongodb_atlas_api_private_key',
        :'mongodb_atlas_api_public_key' => :'mongodb_atlas_api_public_key',
        :'mongodb_atlas_project_id' => :'mongodb_atlas_project_id',
        :'mongodb_custom_data' => :'mongodb_custom_data',
        :'mongodb_db_name' => :'mongodb_db_name',
        :'mongodb_default_auth_db' => :'mongodb_default_auth_db',
        :'mongodb_host_port' => :'mongodb_host_port',
        :'mongodb_is_atlas' => :'mongodb_is_atlas',
        :'mongodb_password' => :'mongodb_password',
        :'mongodb_roles' => :'mongodb_roles',
        :'mongodb_uri_connection' => :'mongodb_uri_connection',
        :'mongodb_uri_options' => :'mongodb_uri_options',
        :'mongodb_username' => :'mongodb_username',
        :'mssql_creation_statements' => :'mssql_creation_statements',
        :'mssql_revocation_statements' => :'mssql_revocation_statements',
        :'mysql_creation_statements' => :'mysql_creation_statements',
        :'mysql_revocation_statements' => :'mysql_revocation_statements',
        :'oracle_creation_statements' => :'oracle_creation_statements',
        :'oracle_revocation_statements' => :'oracle_revocation_statements',
        :'password' => :'password',
        :'password_length' => :'password_length',
        :'password_policy' => :'password_policy',
        :'payload' => :'payload',
        :'ping_url' => :'ping_url',
        :'postgres_creation_statements' => :'postgres_creation_statements',
        :'postgres_revocation_statements' => :'postgres_revocation_statements',
        :'privileged_user' => :'privileged_user',
        :'rabbitmq_server_password' => :'rabbitmq_server_password',
        :'rabbitmq_server_uri' => :'rabbitmq_server_uri',
        :'rabbitmq_server_user' => :'rabbitmq_server_user',
        :'rabbitmq_user_conf_permission' => :'rabbitmq_user_conf_permission',
        :'rabbitmq_user_read_permission' => :'rabbitmq_user_read_permission',
        :'rabbitmq_user_tags' => :'rabbitmq_user_tags',
        :'rabbitmq_user_vhost' => :'rabbitmq_user_vhost',
        :'rabbitmq_user_write_permission' => :'rabbitmq_user_write_permission',
        :'redirect_uris' => :'redirect_uris',
        :'redshift_creation_statements' => :'redshift_creation_statements',
        :'restricted_scopes' => :'restricted_scopes',
        :'revoke_sync_url' => :'revoke_sync_url',
        :'rotate_sync_url' => :'rotate_sync_url',
        :'scopes' => :'scopes',
        :'secure_remote_access_details' => :'secure_remote_access_details',
        :'session_extension_warn_interval_min' => :'session_extension_warn_interval_min',
        :'sf_account' => :'sf_account',
        :'sf_user_role' => :'sf_user_role',
        :'sf_warehouse_name' => :'sf_warehouse_name',
        :'should_stop' => :'should_stop',
        :'signing_algorithm' => :'signing_algorithm',
        :'ssl_connection_certificate' => :'ssl_connection_certificate',
        :'ssl_connection_mode' => :'ssl_connection_mode',
        :'subject_dn' => :'subject_dn',
        :'tags' => :'tags',
        :'timeout_seconds' => :'timeout_seconds',
        :'use_gw_cloud_identity' => :'use_gw_cloud_identity',
        :'use_gw_service_account' => :'use_gw_service_account',
        :'user_name' => :'user_name',
        :'user_password' => :'user_password',
        :'user_principal_name' => :'user_principal_name',
        :'user_ttl' => :'user_ttl',
        :'username_length' => :'username_length',
        :'username_policy' => :'username_policy',
        :'venafi_allow_subdomains' => :'venafi_allow_subdomains',
        :'venafi_allowed_domains' => :'venafi_allowed_domains',
        :'venafi_api_key' => :'venafi_api_key',
        :'venafi_auto_generated_folder' => :'venafi_auto_generated_folder',
        :'venafi_base_url' => :'venafi_base_url',
        :'venafi_root_first_in_chain' => :'venafi_root_first_in_chain',
        :'venafi_sign_using_akeyless_pki' => :'venafi_sign_using_akeyless_pki',
        :'venafi_signer_key_name' => :'venafi_signer_key_name',
        :'venafi_store_private_key' => :'venafi_store_private_key',
        :'venafi_tpp_access_token' => :'venafi_tpp_access_token',
        :'venafi_tpp_client_id' => :'venafi_tpp_client_id',
        :'venafi_tpp_password' => :'venafi_tpp_password',
        :'venafi_tpp_refresh_token' => :'venafi_tpp_refresh_token',
        :'venafi_tpp_username' => :'venafi_tpp_username',
        :'venafi_use_tpp' => :'venafi_use_tpp',
        :'venafi_zone' => :'venafi_zone',
        :'warn_before_user_expiration_min' => :'warn_before_user_expiration_min'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'access_token_manager_id' => :'String',
        :'acl_rules' => :'Array<String>',
        :'active' => :'Boolean',
        :'admin_name' => :'String',
        :'admin_pwd' => :'String',
        :'admin_rotation_interval_days' => :'Integer',
        :'administrative_port' => :'String',
        :'artifactory_admin_apikey' => :'String',
        :'artifactory_admin_username' => :'String',
        :'artifactory_base_url' => :'String',
        :'artifactory_token_audience' => :'String',
        :'artifactory_token_scope' => :'String',
        :'authorization_port' => :'String',
        :'aws_access_key_id' => :'String',
        :'aws_access_mode' => :'String',
        :'aws_region' => :'String',
        :'aws_role_arns' => :'String',
        :'aws_secret_access_key' => :'String',
        :'aws_session_tags' => :'String',
        :'aws_session_token' => :'String',
        :'aws_transitive_tag_keys' => :'String',
        :'aws_user_console_access' => :'Boolean',
        :'aws_user_groups' => :'String',
        :'aws_user_policies' => :'String',
        :'aws_user_programmatic_access' => :'Boolean',
        :'azure_app_object_id' => :'String',
        :'azure_client_id' => :'String',
        :'azure_client_secret' => :'String',
        :'azure_fixed_user_name_sub_claim_key' => :'String',
        :'azure_fixed_user_only' => :'Boolean',
        :'azure_resource_group_name' => :'String',
        :'azure_resource_name' => :'String',
        :'azure_subscription_id' => :'String',
        :'azure_tenant_id' => :'String',
        :'azure_user_groups_obj_id' => :'String',
        :'azure_user_portal_access' => :'Boolean',
        :'azure_user_programmatic_access' => :'Boolean',
        :'azure_user_roles_template_id' => :'String',
        :'azure_username' => :'String',
        :'cassandra_creation_statements' => :'String',
        :'chef_organizations' => :'String',
        :'chef_server_access_mode' => :'String',
        :'chef_server_host_name' => :'String',
        :'chef_server_key' => :'String',
        :'chef_server_port' => :'String',
        :'chef_server_url' => :'String',
        :'chef_server_username' => :'String',
        :'chef_skip_ssl' => :'Boolean',
        :'client_authentication_type' => :'String',
        :'cloud_service_provider' => :'String',
        :'cluster_mode' => :'Boolean',
        :'connection_type' => :'String',
        :'create_sync_url' => :'String',
        :'db_client_id' => :'String',
        :'db_client_secret' => :'String',
        :'db_host_name' => :'String',
        :'db_isolation_level' => :'String',
        :'db_max_idle_conns' => :'String',
        :'db_max_open_conns' => :'String',
        :'db_name' => :'String',
        :'db_port' => :'String',
        :'db_private_key' => :'String',
        :'db_private_key_passphrase' => :'String',
        :'db_pwd' => :'String',
        :'db_server_certificates' => :'String',
        :'db_server_name' => :'String',
        :'db_tenant_id' => :'String',
        :'db_user_name' => :'String',
        :'delete_protection' => :'Boolean',
        :'dynamic_secret_id' => :'Integer',
        :'dynamic_secret_key' => :'String',
        :'dynamic_secret_name' => :'String',
        :'dynamic_secret_type' => :'String',
        :'eks_access_key_id' => :'String',
        :'eks_assume_role' => :'String',
        :'eks_cluster_ca_certificate' => :'String',
        :'eks_cluster_endpoint' => :'String',
        :'eks_cluster_name' => :'String',
        :'eks_region' => :'String',
        :'eks_secret_access_key' => :'String',
        :'enable_admin_rotation' => :'Boolean',
        :'enforce_replay_prevention' => :'Boolean',
        :'externally_provided_user' => :'String',
        :'failure_message' => :'String',
        :'fixed_user_only' => :'String',
        :'gcp_key_algo' => :'String',
        :'gcp_role_bindings' => :'Hash<String, Array<String>>',
        :'gcp_service_account_email' => :'String',
        :'gcp_service_account_key' => :'String',
        :'gcp_service_account_key_base64' => :'String',
        :'gcp_service_account_key_id' => :'String',
        :'gcp_service_account_type' => :'String',
        :'gcp_tmp_service_account_name' => :'String',
        :'gcp_token_lifetime' => :'String',
        :'gcp_token_scope' => :'String',
        :'gcp_token_type' => :'String',
        :'github_app_id' => :'Integer',
        :'github_app_private_key' => :'String',
        :'github_base_url' => :'String',
        :'github_installation_id' => :'Integer',
        :'github_installation_token_permissions' => :'Hash<String, String>',
        :'github_installation_token_repositories' => :'Array<String>',
        :'github_installation_token_repositories_ids' => :'Array<Integer>',
        :'github_organization_name' => :'String',
        :'github_repository_path' => :'String',
        :'gitlab_access_token' => :'String',
        :'gitlab_access_type' => :'String',
        :'gitlab_certificate' => :'String',
        :'gitlab_group_name' => :'String',
        :'gitlab_project_name' => :'String',
        :'gitlab_role' => :'String',
        :'gitlab_token_scope' => :'Array<String>',
        :'gitlab_url' => :'String',
        :'gke_cluster_ca_certificate' => :'String',
        :'gke_cluster_endpoint' => :'String',
        :'gke_cluster_name' => :'String',
        :'gke_service_account_key' => :'String',
        :'gke_service_account_name' => :'String',
        :'google_workspace_access_mode' => :'String',
        :'google_workspace_admin_name' => :'String',
        :'google_workspace_group_name' => :'String',
        :'google_workspace_group_role' => :'String',
        :'google_workspace_role_name' => :'String',
        :'google_workspace_role_scope' => :'String',
        :'grant_types' => :'Array<String>',
        :'groups' => :'String',
        :'hanadb_creation_statements' => :'String',
        :'hanadb_revocation_statements' => :'String',
        :'host_name' => :'String',
        :'host_port' => :'String',
        :'implementation_type' => :'String',
        :'is_fixed_user' => :'String',
        :'issuer' => :'String',
        :'item_targets_assoc' => :'Array<ItemTargetAssociation>',
        :'jwks' => :'String',
        :'jwks_url' => :'String',
        :'k8s_allowed_namespaces' => :'String',
        :'k8s_auth_type' => :'String',
        :'k8s_bearer_token' => :'String',
        :'k8s_client_cert_data' => :'String',
        :'k8s_client_key_data' => :'String',
        :'k8s_cluster_ca_certificate' => :'String',
        :'k8s_cluster_endpoint' => :'String',
        :'k8s_cluster_name' => :'String',
        :'k8s_dynamic_mode' => :'Boolean',
        :'k8s_multiple_doc_yaml_temp_definition' => :'Array<Integer>',
        :'k8s_namespace' => :'String',
        :'k8s_role_name' => :'String',
        :'k8s_role_type' => :'String',
        :'k8s_service_account' => :'String',
        :'last_admin_rotation' => :'Integer',
        :'ldap_audience' => :'String',
        :'ldap_bind_dn' => :'String',
        :'ldap_bind_password' => :'String',
        :'ldap_certificate' => :'String',
        :'ldap_group_dn' => :'String',
        :'ldap_token_expiration' => :'String',
        :'ldap_url' => :'String',
        :'ldap_user_attr' => :'String',
        :'ldap_user_dn' => :'String',
        :'metadata' => :'String',
        :'mongodb_atlas_api_private_key' => :'String',
        :'mongodb_atlas_api_public_key' => :'String',
        :'mongodb_atlas_project_id' => :'String',
        :'mongodb_custom_data' => :'String',
        :'mongodb_db_name' => :'String',
        :'mongodb_default_auth_db' => :'String',
        :'mongodb_host_port' => :'String',
        :'mongodb_is_atlas' => :'Boolean',
        :'mongodb_password' => :'String',
        :'mongodb_roles' => :'String',
        :'mongodb_uri_connection' => :'String',
        :'mongodb_uri_options' => :'String',
        :'mongodb_username' => :'String',
        :'mssql_creation_statements' => :'String',
        :'mssql_revocation_statements' => :'String',
        :'mysql_creation_statements' => :'String',
        :'mysql_revocation_statements' => :'String',
        :'oracle_creation_statements' => :'String',
        :'oracle_revocation_statements' => :'String',
        :'password' => :'String',
        :'password_length' => :'Integer',
        :'password_policy' => :'String',
        :'payload' => :'String',
        :'ping_url' => :'String',
        :'postgres_creation_statements' => :'String',
        :'postgres_revocation_statements' => :'String',
        :'privileged_user' => :'String',
        :'rabbitmq_server_password' => :'String',
        :'rabbitmq_server_uri' => :'String',
        :'rabbitmq_server_user' => :'String',
        :'rabbitmq_user_conf_permission' => :'String',
        :'rabbitmq_user_read_permission' => :'String',
        :'rabbitmq_user_tags' => :'String',
        :'rabbitmq_user_vhost' => :'String',
        :'rabbitmq_user_write_permission' => :'String',
        :'redirect_uris' => :'Array<String>',
        :'redshift_creation_statements' => :'String',
        :'restricted_scopes' => :'Array<String>',
        :'revoke_sync_url' => :'String',
        :'rotate_sync_url' => :'String',
        :'scopes' => :'Array<String>',
        :'secure_remote_access_details' => :'SecureRemoteAccess',
        :'session_extension_warn_interval_min' => :'Integer',
        :'sf_account' => :'String',
        :'sf_user_role' => :'String',
        :'sf_warehouse_name' => :'String',
        :'should_stop' => :'String',
        :'signing_algorithm' => :'String',
        :'ssl_connection_certificate' => :'String',
        :'ssl_connection_mode' => :'Boolean',
        :'subject_dn' => :'String',
        :'tags' => :'Array<String>',
        :'timeout_seconds' => :'Integer',
        :'use_gw_cloud_identity' => :'Boolean',
        :'use_gw_service_account' => :'Boolean',
        :'user_name' => :'String',
        :'user_password' => :'String',
        :'user_principal_name' => :'String',
        :'user_ttl' => :'String',
        :'username_length' => :'Integer',
        :'username_policy' => :'String',
        :'venafi_allow_subdomains' => :'Boolean',
        :'venafi_allowed_domains' => :'Array<String>',
        :'venafi_api_key' => :'String',
        :'venafi_auto_generated_folder' => :'String',
        :'venafi_base_url' => :'String',
        :'venafi_root_first_in_chain' => :'Boolean',
        :'venafi_sign_using_akeyless_pki' => :'Boolean',
        :'venafi_signer_key_name' => :'String',
        :'venafi_store_private_key' => :'Boolean',
        :'venafi_tpp_access_token' => :'String',
        :'venafi_tpp_client_id' => :'String',
        :'venafi_tpp_password' => :'String',
        :'venafi_tpp_refresh_token' => :'String',
        :'venafi_tpp_username' => :'String',
        :'venafi_use_tpp' => :'Boolean',
        :'venafi_zone' => :'String',
        :'warn_before_user_expiration_min' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Akeyless::DSProducerDetails` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Akeyless::DSProducerDetails`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'access_token_manager_id')
        self.access_token_manager_id = attributes[:'access_token_manager_id']
      end

      if attributes.key?(:'acl_rules')
        if (value = attributes[:'acl_rules']).is_a?(Array)
          self.acl_rules = value
        end
      end

      if attributes.key?(:'active')
        self.active = attributes[:'active']
      end

      if attributes.key?(:'admin_name')
        self.admin_name = attributes[:'admin_name']
      end

      if attributes.key?(:'admin_pwd')
        self.admin_pwd = attributes[:'admin_pwd']
      end

      if attributes.key?(:'admin_rotation_interval_days')
        self.admin_rotation_interval_days = attributes[:'admin_rotation_interval_days']
      end

      if attributes.key?(:'administrative_port')
        self.administrative_port = attributes[:'administrative_port']
      end

      if attributes.key?(:'artifactory_admin_apikey')
        self.artifactory_admin_apikey = attributes[:'artifactory_admin_apikey']
      end

      if attributes.key?(:'artifactory_admin_username')
        self.artifactory_admin_username = attributes[:'artifactory_admin_username']
      end

      if attributes.key?(:'artifactory_base_url')
        self.artifactory_base_url = attributes[:'artifactory_base_url']
      end

      if attributes.key?(:'artifactory_token_audience')
        self.artifactory_token_audience = attributes[:'artifactory_token_audience']
      end

      if attributes.key?(:'artifactory_token_scope')
        self.artifactory_token_scope = attributes[:'artifactory_token_scope']
      end

      if attributes.key?(:'authorization_port')
        self.authorization_port = attributes[:'authorization_port']
      end

      if attributes.key?(:'aws_access_key_id')
        self.aws_access_key_id = attributes[:'aws_access_key_id']
      end

      if attributes.key?(:'aws_access_mode')
        self.aws_access_mode = attributes[:'aws_access_mode']
      end

      if attributes.key?(:'aws_region')
        self.aws_region = attributes[:'aws_region']
      end

      if attributes.key?(:'aws_role_arns')
        self.aws_role_arns = attributes[:'aws_role_arns']
      end

      if attributes.key?(:'aws_secret_access_key')
        self.aws_secret_access_key = attributes[:'aws_secret_access_key']
      end

      if attributes.key?(:'aws_session_tags')
        self.aws_session_tags = attributes[:'aws_session_tags']
      end

      if attributes.key?(:'aws_session_token')
        self.aws_session_token = attributes[:'aws_session_token']
      end

      if attributes.key?(:'aws_transitive_tag_keys')
        self.aws_transitive_tag_keys = attributes[:'aws_transitive_tag_keys']
      end

      if attributes.key?(:'aws_user_console_access')
        self.aws_user_console_access = attributes[:'aws_user_console_access']
      end

      if attributes.key?(:'aws_user_groups')
        self.aws_user_groups = attributes[:'aws_user_groups']
      end

      if attributes.key?(:'aws_user_policies')
        self.aws_user_policies = attributes[:'aws_user_policies']
      end

      if attributes.key?(:'aws_user_programmatic_access')
        self.aws_user_programmatic_access = attributes[:'aws_user_programmatic_access']
      end

      if attributes.key?(:'azure_app_object_id')
        self.azure_app_object_id = attributes[:'azure_app_object_id']
      end

      if attributes.key?(:'azure_client_id')
        self.azure_client_id = attributes[:'azure_client_id']
      end

      if attributes.key?(:'azure_client_secret')
        self.azure_client_secret = attributes[:'azure_client_secret']
      end

      if attributes.key?(:'azure_fixed_user_name_sub_claim_key')
        self.azure_fixed_user_name_sub_claim_key = attributes[:'azure_fixed_user_name_sub_claim_key']
      end

      if attributes.key?(:'azure_fixed_user_only')
        self.azure_fixed_user_only = attributes[:'azure_fixed_user_only']
      end

      if attributes.key?(:'azure_resource_group_name')
        self.azure_resource_group_name = attributes[:'azure_resource_group_name']
      end

      if attributes.key?(:'azure_resource_name')
        self.azure_resource_name = attributes[:'azure_resource_name']
      end

      if attributes.key?(:'azure_subscription_id')
        self.azure_subscription_id = attributes[:'azure_subscription_id']
      end

      if attributes.key?(:'azure_tenant_id')
        self.azure_tenant_id = attributes[:'azure_tenant_id']
      end

      if attributes.key?(:'azure_user_groups_obj_id')
        self.azure_user_groups_obj_id = attributes[:'azure_user_groups_obj_id']
      end

      if attributes.key?(:'azure_user_portal_access')
        self.azure_user_portal_access = attributes[:'azure_user_portal_access']
      end

      if attributes.key?(:'azure_user_programmatic_access')
        self.azure_user_programmatic_access = attributes[:'azure_user_programmatic_access']
      end

      if attributes.key?(:'azure_user_roles_template_id')
        self.azure_user_roles_template_id = attributes[:'azure_user_roles_template_id']
      end

      if attributes.key?(:'azure_username')
        self.azure_username = attributes[:'azure_username']
      end

      if attributes.key?(:'cassandra_creation_statements')
        self.cassandra_creation_statements = attributes[:'cassandra_creation_statements']
      end

      if attributes.key?(:'chef_organizations')
        self.chef_organizations = attributes[:'chef_organizations']
      end

      if attributes.key?(:'chef_server_access_mode')
        self.chef_server_access_mode = attributes[:'chef_server_access_mode']
      end

      if attributes.key?(:'chef_server_host_name')
        self.chef_server_host_name = attributes[:'chef_server_host_name']
      end

      if attributes.key?(:'chef_server_key')
        self.chef_server_key = attributes[:'chef_server_key']
      end

      if attributes.key?(:'chef_server_port')
        self.chef_server_port = attributes[:'chef_server_port']
      end

      if attributes.key?(:'chef_server_url')
        self.chef_server_url = attributes[:'chef_server_url']
      end

      if attributes.key?(:'chef_server_username')
        self.chef_server_username = attributes[:'chef_server_username']
      end

      if attributes.key?(:'chef_skip_ssl')
        self.chef_skip_ssl = attributes[:'chef_skip_ssl']
      end

      if attributes.key?(:'client_authentication_type')
        self.client_authentication_type = attributes[:'client_authentication_type']
      end

      if attributes.key?(:'cloud_service_provider')
        self.cloud_service_provider = attributes[:'cloud_service_provider']
      end

      if attributes.key?(:'cluster_mode')
        self.cluster_mode = attributes[:'cluster_mode']
      end

      if attributes.key?(:'connection_type')
        self.connection_type = attributes[:'connection_type']
      end

      if attributes.key?(:'create_sync_url')
        self.create_sync_url = attributes[:'create_sync_url']
      end

      if attributes.key?(:'db_client_id')
        self.db_client_id = attributes[:'db_client_id']
      end

      if attributes.key?(:'db_client_secret')
        self.db_client_secret = attributes[:'db_client_secret']
      end

      if attributes.key?(:'db_host_name')
        self.db_host_name = attributes[:'db_host_name']
      end

      if attributes.key?(:'db_isolation_level')
        self.db_isolation_level = attributes[:'db_isolation_level']
      end

      if attributes.key?(:'db_max_idle_conns')
        self.db_max_idle_conns = attributes[:'db_max_idle_conns']
      end

      if attributes.key?(:'db_max_open_conns')
        self.db_max_open_conns = attributes[:'db_max_open_conns']
      end

      if attributes.key?(:'db_name')
        self.db_name = attributes[:'db_name']
      end

      if attributes.key?(:'db_port')
        self.db_port = attributes[:'db_port']
      end

      if attributes.key?(:'db_private_key')
        self.db_private_key = attributes[:'db_private_key']
      end

      if attributes.key?(:'db_private_key_passphrase')
        self.db_private_key_passphrase = attributes[:'db_private_key_passphrase']
      end

      if attributes.key?(:'db_pwd')
        self.db_pwd = attributes[:'db_pwd']
      end

      if attributes.key?(:'db_server_certificates')
        self.db_server_certificates = attributes[:'db_server_certificates']
      end

      if attributes.key?(:'db_server_name')
        self.db_server_name = attributes[:'db_server_name']
      end

      if attributes.key?(:'db_tenant_id')
        self.db_tenant_id = attributes[:'db_tenant_id']
      end

      if attributes.key?(:'db_user_name')
        self.db_user_name = attributes[:'db_user_name']
      end

      if attributes.key?(:'delete_protection')
        self.delete_protection = attributes[:'delete_protection']
      end

      if attributes.key?(:'dynamic_secret_id')
        self.dynamic_secret_id = attributes[:'dynamic_secret_id']
      end

      if attributes.key?(:'dynamic_secret_key')
        self.dynamic_secret_key = attributes[:'dynamic_secret_key']
      end

      if attributes.key?(:'dynamic_secret_name')
        self.dynamic_secret_name = attributes[:'dynamic_secret_name']
      end

      if attributes.key?(:'dynamic_secret_type')
        self.dynamic_secret_type = attributes[:'dynamic_secret_type']
      end

      if attributes.key?(:'eks_access_key_id')
        self.eks_access_key_id = attributes[:'eks_access_key_id']
      end

      if attributes.key?(:'eks_assume_role')
        self.eks_assume_role = attributes[:'eks_assume_role']
      end

      if attributes.key?(:'eks_cluster_ca_certificate')
        self.eks_cluster_ca_certificate = attributes[:'eks_cluster_ca_certificate']
      end

      if attributes.key?(:'eks_cluster_endpoint')
        self.eks_cluster_endpoint = attributes[:'eks_cluster_endpoint']
      end

      if attributes.key?(:'eks_cluster_name')
        self.eks_cluster_name = attributes[:'eks_cluster_name']
      end

      if attributes.key?(:'eks_region')
        self.eks_region = attributes[:'eks_region']
      end

      if attributes.key?(:'eks_secret_access_key')
        self.eks_secret_access_key = attributes[:'eks_secret_access_key']
      end

      if attributes.key?(:'enable_admin_rotation')
        self.enable_admin_rotation = attributes[:'enable_admin_rotation']
      end

      if attributes.key?(:'enforce_replay_prevention')
        self.enforce_replay_prevention = attributes[:'enforce_replay_prevention']
      end

      if attributes.key?(:'externally_provided_user')
        self.externally_provided_user = attributes[:'externally_provided_user']
      end

      if attributes.key?(:'failure_message')
        self.failure_message = attributes[:'failure_message']
      end

      if attributes.key?(:'fixed_user_only')
        self.fixed_user_only = attributes[:'fixed_user_only']
      end

      if attributes.key?(:'gcp_key_algo')
        self.gcp_key_algo = attributes[:'gcp_key_algo']
      end

      if attributes.key?(:'gcp_role_bindings')
        if (value = attributes[:'gcp_role_bindings']).is_a?(Hash)
          self.gcp_role_bindings = value
        end
      end

      if attributes.key?(:'gcp_service_account_email')
        self.gcp_service_account_email = attributes[:'gcp_service_account_email']
      end

      if attributes.key?(:'gcp_service_account_key')
        self.gcp_service_account_key = attributes[:'gcp_service_account_key']
      end

      if attributes.key?(:'gcp_service_account_key_base64')
        self.gcp_service_account_key_base64 = attributes[:'gcp_service_account_key_base64']
      end

      if attributes.key?(:'gcp_service_account_key_id')
        self.gcp_service_account_key_id = attributes[:'gcp_service_account_key_id']
      end

      if attributes.key?(:'gcp_service_account_type')
        self.gcp_service_account_type = attributes[:'gcp_service_account_type']
      end

      if attributes.key?(:'gcp_tmp_service_account_name')
        self.gcp_tmp_service_account_name = attributes[:'gcp_tmp_service_account_name']
      end

      if attributes.key?(:'gcp_token_lifetime')
        self.gcp_token_lifetime = attributes[:'gcp_token_lifetime']
      end

      if attributes.key?(:'gcp_token_scope')
        self.gcp_token_scope = attributes[:'gcp_token_scope']
      end

      if attributes.key?(:'gcp_token_type')
        self.gcp_token_type = attributes[:'gcp_token_type']
      end

      if attributes.key?(:'github_app_id')
        self.github_app_id = attributes[:'github_app_id']
      end

      if attributes.key?(:'github_app_private_key')
        self.github_app_private_key = attributes[:'github_app_private_key']
      end

      if attributes.key?(:'github_base_url')
        self.github_base_url = attributes[:'github_base_url']
      end

      if attributes.key?(:'github_installation_id')
        self.github_installation_id = attributes[:'github_installation_id']
      end

      if attributes.key?(:'github_installation_token_permissions')
        if (value = attributes[:'github_installation_token_permissions']).is_a?(Hash)
          self.github_installation_token_permissions = value
        end
      end

      if attributes.key?(:'github_installation_token_repositories')
        if (value = attributes[:'github_installation_token_repositories']).is_a?(Array)
          self.github_installation_token_repositories = value
        end
      end

      if attributes.key?(:'github_installation_token_repositories_ids')
        if (value = attributes[:'github_installation_token_repositories_ids']).is_a?(Array)
          self.github_installation_token_repositories_ids = value
        end
      end

      if attributes.key?(:'github_organization_name')
        self.github_organization_name = attributes[:'github_organization_name']
      end

      if attributes.key?(:'github_repository_path')
        self.github_repository_path = attributes[:'github_repository_path']
      end

      if attributes.key?(:'gitlab_access_token')
        self.gitlab_access_token = attributes[:'gitlab_access_token']
      end

      if attributes.key?(:'gitlab_access_type')
        self.gitlab_access_type = attributes[:'gitlab_access_type']
      end

      if attributes.key?(:'gitlab_certificate')
        self.gitlab_certificate = attributes[:'gitlab_certificate']
      end

      if attributes.key?(:'gitlab_group_name')
        self.gitlab_group_name = attributes[:'gitlab_group_name']
      end

      if attributes.key?(:'gitlab_project_name')
        self.gitlab_project_name = attributes[:'gitlab_project_name']
      end

      if attributes.key?(:'gitlab_role')
        self.gitlab_role = attributes[:'gitlab_role']
      end

      if attributes.key?(:'gitlab_token_scope')
        if (value = attributes[:'gitlab_token_scope']).is_a?(Array)
          self.gitlab_token_scope = value
        end
      end

      if attributes.key?(:'gitlab_url')
        self.gitlab_url = attributes[:'gitlab_url']
      end

      if attributes.key?(:'gke_cluster_ca_certificate')
        self.gke_cluster_ca_certificate = attributes[:'gke_cluster_ca_certificate']
      end

      if attributes.key?(:'gke_cluster_endpoint')
        self.gke_cluster_endpoint = attributes[:'gke_cluster_endpoint']
      end

      if attributes.key?(:'gke_cluster_name')
        self.gke_cluster_name = attributes[:'gke_cluster_name']
      end

      if attributes.key?(:'gke_service_account_key')
        self.gke_service_account_key = attributes[:'gke_service_account_key']
      end

      if attributes.key?(:'gke_service_account_name')
        self.gke_service_account_name = attributes[:'gke_service_account_name']
      end

      if attributes.key?(:'google_workspace_access_mode')
        self.google_workspace_access_mode = attributes[:'google_workspace_access_mode']
      end

      if attributes.key?(:'google_workspace_admin_name')
        self.google_workspace_admin_name = attributes[:'google_workspace_admin_name']
      end

      if attributes.key?(:'google_workspace_group_name')
        self.google_workspace_group_name = attributes[:'google_workspace_group_name']
      end

      if attributes.key?(:'google_workspace_group_role')
        self.google_workspace_group_role = attributes[:'google_workspace_group_role']
      end

      if attributes.key?(:'google_workspace_role_name')
        self.google_workspace_role_name = attributes[:'google_workspace_role_name']
      end

      if attributes.key?(:'google_workspace_role_scope')
        self.google_workspace_role_scope = attributes[:'google_workspace_role_scope']
      end

      if attributes.key?(:'grant_types')
        if (value = attributes[:'grant_types']).is_a?(Array)
          self.grant_types = value
        end
      end

      if attributes.key?(:'groups')
        self.groups = attributes[:'groups']
      end

      if attributes.key?(:'hanadb_creation_statements')
        self.hanadb_creation_statements = attributes[:'hanadb_creation_statements']
      end

      if attributes.key?(:'hanadb_revocation_statements')
        self.hanadb_revocation_statements = attributes[:'hanadb_revocation_statements']
      end

      if attributes.key?(:'host_name')
        self.host_name = attributes[:'host_name']
      end

      if attributes.key?(:'host_port')
        self.host_port = attributes[:'host_port']
      end

      if attributes.key?(:'implementation_type')
        self.implementation_type = attributes[:'implementation_type']
      end

      if attributes.key?(:'is_fixed_user')
        self.is_fixed_user = attributes[:'is_fixed_user']
      end

      if attributes.key?(:'issuer')
        self.issuer = attributes[:'issuer']
      end

      if attributes.key?(:'item_targets_assoc')
        if (value = attributes[:'item_targets_assoc']).is_a?(Array)
          self.item_targets_assoc = value
        end
      end

      if attributes.key?(:'jwks')
        self.jwks = attributes[:'jwks']
      end

      if attributes.key?(:'jwks_url')
        self.jwks_url = attributes[:'jwks_url']
      end

      if attributes.key?(:'k8s_allowed_namespaces')
        self.k8s_allowed_namespaces = attributes[:'k8s_allowed_namespaces']
      end

      if attributes.key?(:'k8s_auth_type')
        self.k8s_auth_type = attributes[:'k8s_auth_type']
      end

      if attributes.key?(:'k8s_bearer_token')
        self.k8s_bearer_token = attributes[:'k8s_bearer_token']
      end

      if attributes.key?(:'k8s_client_cert_data')
        self.k8s_client_cert_data = attributes[:'k8s_client_cert_data']
      end

      if attributes.key?(:'k8s_client_key_data')
        self.k8s_client_key_data = attributes[:'k8s_client_key_data']
      end

      if attributes.key?(:'k8s_cluster_ca_certificate')
        self.k8s_cluster_ca_certificate = attributes[:'k8s_cluster_ca_certificate']
      end

      if attributes.key?(:'k8s_cluster_endpoint')
        self.k8s_cluster_endpoint = attributes[:'k8s_cluster_endpoint']
      end

      if attributes.key?(:'k8s_cluster_name')
        self.k8s_cluster_name = attributes[:'k8s_cluster_name']
      end

      if attributes.key?(:'k8s_dynamic_mode')
        self.k8s_dynamic_mode = attributes[:'k8s_dynamic_mode']
      end

      if attributes.key?(:'k8s_multiple_doc_yaml_temp_definition')
        if (value = attributes[:'k8s_multiple_doc_yaml_temp_definition']).is_a?(Array)
          self.k8s_multiple_doc_yaml_temp_definition = value
        end
      end

      if attributes.key?(:'k8s_namespace')
        self.k8s_namespace = attributes[:'k8s_namespace']
      end

      if attributes.key?(:'k8s_role_name')
        self.k8s_role_name = attributes[:'k8s_role_name']
      end

      if attributes.key?(:'k8s_role_type')
        self.k8s_role_type = attributes[:'k8s_role_type']
      end

      if attributes.key?(:'k8s_service_account')
        self.k8s_service_account = attributes[:'k8s_service_account']
      end

      if attributes.key?(:'last_admin_rotation')
        self.last_admin_rotation = attributes[:'last_admin_rotation']
      end

      if attributes.key?(:'ldap_audience')
        self.ldap_audience = attributes[:'ldap_audience']
      end

      if attributes.key?(:'ldap_bind_dn')
        self.ldap_bind_dn = attributes[:'ldap_bind_dn']
      end

      if attributes.key?(:'ldap_bind_password')
        self.ldap_bind_password = attributes[:'ldap_bind_password']
      end

      if attributes.key?(:'ldap_certificate')
        self.ldap_certificate = attributes[:'ldap_certificate']
      end

      if attributes.key?(:'ldap_group_dn')
        self.ldap_group_dn = attributes[:'ldap_group_dn']
      end

      if attributes.key?(:'ldap_token_expiration')
        self.ldap_token_expiration = attributes[:'ldap_token_expiration']
      end

      if attributes.key?(:'ldap_url')
        self.ldap_url = attributes[:'ldap_url']
      end

      if attributes.key?(:'ldap_user_attr')
        self.ldap_user_attr = attributes[:'ldap_user_attr']
      end

      if attributes.key?(:'ldap_user_dn')
        self.ldap_user_dn = attributes[:'ldap_user_dn']
      end

      if attributes.key?(:'metadata')
        self.metadata = attributes[:'metadata']
      end

      if attributes.key?(:'mongodb_atlas_api_private_key')
        self.mongodb_atlas_api_private_key = attributes[:'mongodb_atlas_api_private_key']
      end

      if attributes.key?(:'mongodb_atlas_api_public_key')
        self.mongodb_atlas_api_public_key = attributes[:'mongodb_atlas_api_public_key']
      end

      if attributes.key?(:'mongodb_atlas_project_id')
        self.mongodb_atlas_project_id = attributes[:'mongodb_atlas_project_id']
      end

      if attributes.key?(:'mongodb_custom_data')
        self.mongodb_custom_data = attributes[:'mongodb_custom_data']
      end

      if attributes.key?(:'mongodb_db_name')
        self.mongodb_db_name = attributes[:'mongodb_db_name']
      end

      if attributes.key?(:'mongodb_default_auth_db')
        self.mongodb_default_auth_db = attributes[:'mongodb_default_auth_db']
      end

      if attributes.key?(:'mongodb_host_port')
        self.mongodb_host_port = attributes[:'mongodb_host_port']
      end

      if attributes.key?(:'mongodb_is_atlas')
        self.mongodb_is_atlas = attributes[:'mongodb_is_atlas']
      end

      if attributes.key?(:'mongodb_password')
        self.mongodb_password = attributes[:'mongodb_password']
      end

      if attributes.key?(:'mongodb_roles')
        self.mongodb_roles = attributes[:'mongodb_roles']
      end

      if attributes.key?(:'mongodb_uri_connection')
        self.mongodb_uri_connection = attributes[:'mongodb_uri_connection']
      end

      if attributes.key?(:'mongodb_uri_options')
        self.mongodb_uri_options = attributes[:'mongodb_uri_options']
      end

      if attributes.key?(:'mongodb_username')
        self.mongodb_username = attributes[:'mongodb_username']
      end

      if attributes.key?(:'mssql_creation_statements')
        self.mssql_creation_statements = attributes[:'mssql_creation_statements']
      end

      if attributes.key?(:'mssql_revocation_statements')
        self.mssql_revocation_statements = attributes[:'mssql_revocation_statements']
      end

      if attributes.key?(:'mysql_creation_statements')
        self.mysql_creation_statements = attributes[:'mysql_creation_statements']
      end

      if attributes.key?(:'mysql_revocation_statements')
        self.mysql_revocation_statements = attributes[:'mysql_revocation_statements']
      end

      if attributes.key?(:'oracle_creation_statements')
        self.oracle_creation_statements = attributes[:'oracle_creation_statements']
      end

      if attributes.key?(:'oracle_revocation_statements')
        self.oracle_revocation_statements = attributes[:'oracle_revocation_statements']
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'password_length')
        self.password_length = attributes[:'password_length']
      end

      if attributes.key?(:'password_policy')
        self.password_policy = attributes[:'password_policy']
      end

      if attributes.key?(:'payload')
        self.payload = attributes[:'payload']
      end

      if attributes.key?(:'ping_url')
        self.ping_url = attributes[:'ping_url']
      end

      if attributes.key?(:'postgres_creation_statements')
        self.postgres_creation_statements = attributes[:'postgres_creation_statements']
      end

      if attributes.key?(:'postgres_revocation_statements')
        self.postgres_revocation_statements = attributes[:'postgres_revocation_statements']
      end

      if attributes.key?(:'privileged_user')
        self.privileged_user = attributes[:'privileged_user']
      end

      if attributes.key?(:'rabbitmq_server_password')
        self.rabbitmq_server_password = attributes[:'rabbitmq_server_password']
      end

      if attributes.key?(:'rabbitmq_server_uri')
        self.rabbitmq_server_uri = attributes[:'rabbitmq_server_uri']
      end

      if attributes.key?(:'rabbitmq_server_user')
        self.rabbitmq_server_user = attributes[:'rabbitmq_server_user']
      end

      if attributes.key?(:'rabbitmq_user_conf_permission')
        self.rabbitmq_user_conf_permission = attributes[:'rabbitmq_user_conf_permission']
      end

      if attributes.key?(:'rabbitmq_user_read_permission')
        self.rabbitmq_user_read_permission = attributes[:'rabbitmq_user_read_permission']
      end

      if attributes.key?(:'rabbitmq_user_tags')
        self.rabbitmq_user_tags = attributes[:'rabbitmq_user_tags']
      end

      if attributes.key?(:'rabbitmq_user_vhost')
        self.rabbitmq_user_vhost = attributes[:'rabbitmq_user_vhost']
      end

      if attributes.key?(:'rabbitmq_user_write_permission')
        self.rabbitmq_user_write_permission = attributes[:'rabbitmq_user_write_permission']
      end

      if attributes.key?(:'redirect_uris')
        if (value = attributes[:'redirect_uris']).is_a?(Array)
          self.redirect_uris = value
        end
      end

      if attributes.key?(:'redshift_creation_statements')
        self.redshift_creation_statements = attributes[:'redshift_creation_statements']
      end

      if attributes.key?(:'restricted_scopes')
        if (value = attributes[:'restricted_scopes']).is_a?(Array)
          self.restricted_scopes = value
        end
      end

      if attributes.key?(:'revoke_sync_url')
        self.revoke_sync_url = attributes[:'revoke_sync_url']
      end

      if attributes.key?(:'rotate_sync_url')
        self.rotate_sync_url = attributes[:'rotate_sync_url']
      end

      if attributes.key?(:'scopes')
        if (value = attributes[:'scopes']).is_a?(Array)
          self.scopes = value
        end
      end

      if attributes.key?(:'secure_remote_access_details')
        self.secure_remote_access_details = attributes[:'secure_remote_access_details']
      end

      if attributes.key?(:'session_extension_warn_interval_min')
        self.session_extension_warn_interval_min = attributes[:'session_extension_warn_interval_min']
      end

      if attributes.key?(:'sf_account')
        self.sf_account = attributes[:'sf_account']
      end

      if attributes.key?(:'sf_user_role')
        self.sf_user_role = attributes[:'sf_user_role']
      end

      if attributes.key?(:'sf_warehouse_name')
        self.sf_warehouse_name = attributes[:'sf_warehouse_name']
      end

      if attributes.key?(:'should_stop')
        self.should_stop = attributes[:'should_stop']
      end

      if attributes.key?(:'signing_algorithm')
        self.signing_algorithm = attributes[:'signing_algorithm']
      end

      if attributes.key?(:'ssl_connection_certificate')
        self.ssl_connection_certificate = attributes[:'ssl_connection_certificate']
      end

      if attributes.key?(:'ssl_connection_mode')
        self.ssl_connection_mode = attributes[:'ssl_connection_mode']
      end

      if attributes.key?(:'subject_dn')
        self.subject_dn = attributes[:'subject_dn']
      end

      if attributes.key?(:'tags')
        if (value = attributes[:'tags']).is_a?(Array)
          self.tags = value
        end
      end

      if attributes.key?(:'timeout_seconds')
        self.timeout_seconds = attributes[:'timeout_seconds']
      end

      if attributes.key?(:'use_gw_cloud_identity')
        self.use_gw_cloud_identity = attributes[:'use_gw_cloud_identity']
      end

      if attributes.key?(:'use_gw_service_account')
        self.use_gw_service_account = attributes[:'use_gw_service_account']
      end

      if attributes.key?(:'user_name')
        self.user_name = attributes[:'user_name']
      end

      if attributes.key?(:'user_password')
        self.user_password = attributes[:'user_password']
      end

      if attributes.key?(:'user_principal_name')
        self.user_principal_name = attributes[:'user_principal_name']
      end

      if attributes.key?(:'user_ttl')
        self.user_ttl = attributes[:'user_ttl']
      end

      if attributes.key?(:'username_length')
        self.username_length = attributes[:'username_length']
      end

      if attributes.key?(:'username_policy')
        self.username_policy = attributes[:'username_policy']
      end

      if attributes.key?(:'venafi_allow_subdomains')
        self.venafi_allow_subdomains = attributes[:'venafi_allow_subdomains']
      end

      if attributes.key?(:'venafi_allowed_domains')
        if (value = attributes[:'venafi_allowed_domains']).is_a?(Array)
          self.venafi_allowed_domains = value
        end
      end

      if attributes.key?(:'venafi_api_key')
        self.venafi_api_key = attributes[:'venafi_api_key']
      end

      if attributes.key?(:'venafi_auto_generated_folder')
        self.venafi_auto_generated_folder = attributes[:'venafi_auto_generated_folder']
      end

      if attributes.key?(:'venafi_base_url')
        self.venafi_base_url = attributes[:'venafi_base_url']
      end

      if attributes.key?(:'venafi_root_first_in_chain')
        self.venafi_root_first_in_chain = attributes[:'venafi_root_first_in_chain']
      end

      if attributes.key?(:'venafi_sign_using_akeyless_pki')
        self.venafi_sign_using_akeyless_pki = attributes[:'venafi_sign_using_akeyless_pki']
      end

      if attributes.key?(:'venafi_signer_key_name')
        self.venafi_signer_key_name = attributes[:'venafi_signer_key_name']
      end

      if attributes.key?(:'venafi_store_private_key')
        self.venafi_store_private_key = attributes[:'venafi_store_private_key']
      end

      if attributes.key?(:'venafi_tpp_access_token')
        self.venafi_tpp_access_token = attributes[:'venafi_tpp_access_token']
      end

      if attributes.key?(:'venafi_tpp_client_id')
        self.venafi_tpp_client_id = attributes[:'venafi_tpp_client_id']
      end

      if attributes.key?(:'venafi_tpp_password')
        self.venafi_tpp_password = attributes[:'venafi_tpp_password']
      end

      if attributes.key?(:'venafi_tpp_refresh_token')
        self.venafi_tpp_refresh_token = attributes[:'venafi_tpp_refresh_token']
      end

      if attributes.key?(:'venafi_tpp_username')
        self.venafi_tpp_username = attributes[:'venafi_tpp_username']
      end

      if attributes.key?(:'venafi_use_tpp')
        self.venafi_use_tpp = attributes[:'venafi_use_tpp']
      end

      if attributes.key?(:'venafi_zone')
        self.venafi_zone = attributes[:'venafi_zone']
      end

      if attributes.key?(:'warn_before_user_expiration_min')
        self.warn_before_user_expiration_min = attributes[:'warn_before_user_expiration_min']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          access_token_manager_id == o.access_token_manager_id &&
          acl_rules == o.acl_rules &&
          active == o.active &&
          admin_name == o.admin_name &&
          admin_pwd == o.admin_pwd &&
          admin_rotation_interval_days == o.admin_rotation_interval_days &&
          administrative_port == o.administrative_port &&
          artifactory_admin_apikey == o.artifactory_admin_apikey &&
          artifactory_admin_username == o.artifactory_admin_username &&
          artifactory_base_url == o.artifactory_base_url &&
          artifactory_token_audience == o.artifactory_token_audience &&
          artifactory_token_scope == o.artifactory_token_scope &&
          authorization_port == o.authorization_port &&
          aws_access_key_id == o.aws_access_key_id &&
          aws_access_mode == o.aws_access_mode &&
          aws_region == o.aws_region &&
          aws_role_arns == o.aws_role_arns &&
          aws_secret_access_key == o.aws_secret_access_key &&
          aws_session_tags == o.aws_session_tags &&
          aws_session_token == o.aws_session_token &&
          aws_transitive_tag_keys == o.aws_transitive_tag_keys &&
          aws_user_console_access == o.aws_user_console_access &&
          aws_user_groups == o.aws_user_groups &&
          aws_user_policies == o.aws_user_policies &&
          aws_user_programmatic_access == o.aws_user_programmatic_access &&
          azure_app_object_id == o.azure_app_object_id &&
          azure_client_id == o.azure_client_id &&
          azure_client_secret == o.azure_client_secret &&
          azure_fixed_user_name_sub_claim_key == o.azure_fixed_user_name_sub_claim_key &&
          azure_fixed_user_only == o.azure_fixed_user_only &&
          azure_resource_group_name == o.azure_resource_group_name &&
          azure_resource_name == o.azure_resource_name &&
          azure_subscription_id == o.azure_subscription_id &&
          azure_tenant_id == o.azure_tenant_id &&
          azure_user_groups_obj_id == o.azure_user_groups_obj_id &&
          azure_user_portal_access == o.azure_user_portal_access &&
          azure_user_programmatic_access == o.azure_user_programmatic_access &&
          azure_user_roles_template_id == o.azure_user_roles_template_id &&
          azure_username == o.azure_username &&
          cassandra_creation_statements == o.cassandra_creation_statements &&
          chef_organizations == o.chef_organizations &&
          chef_server_access_mode == o.chef_server_access_mode &&
          chef_server_host_name == o.chef_server_host_name &&
          chef_server_key == o.chef_server_key &&
          chef_server_port == o.chef_server_port &&
          chef_server_url == o.chef_server_url &&
          chef_server_username == o.chef_server_username &&
          chef_skip_ssl == o.chef_skip_ssl &&
          client_authentication_type == o.client_authentication_type &&
          cloud_service_provider == o.cloud_service_provider &&
          cluster_mode == o.cluster_mode &&
          connection_type == o.connection_type &&
          create_sync_url == o.create_sync_url &&
          db_client_id == o.db_client_id &&
          db_client_secret == o.db_client_secret &&
          db_host_name == o.db_host_name &&
          db_isolation_level == o.db_isolation_level &&
          db_max_idle_conns == o.db_max_idle_conns &&
          db_max_open_conns == o.db_max_open_conns &&
          db_name == o.db_name &&
          db_port == o.db_port &&
          db_private_key == o.db_private_key &&
          db_private_key_passphrase == o.db_private_key_passphrase &&
          db_pwd == o.db_pwd &&
          db_server_certificates == o.db_server_certificates &&
          db_server_name == o.db_server_name &&
          db_tenant_id == o.db_tenant_id &&
          db_user_name == o.db_user_name &&
          delete_protection == o.delete_protection &&
          dynamic_secret_id == o.dynamic_secret_id &&
          dynamic_secret_key == o.dynamic_secret_key &&
          dynamic_secret_name == o.dynamic_secret_name &&
          dynamic_secret_type == o.dynamic_secret_type &&
          eks_access_key_id == o.eks_access_key_id &&
          eks_assume_role == o.eks_assume_role &&
          eks_cluster_ca_certificate == o.eks_cluster_ca_certificate &&
          eks_cluster_endpoint == o.eks_cluster_endpoint &&
          eks_cluster_name == o.eks_cluster_name &&
          eks_region == o.eks_region &&
          eks_secret_access_key == o.eks_secret_access_key &&
          enable_admin_rotation == o.enable_admin_rotation &&
          enforce_replay_prevention == o.enforce_replay_prevention &&
          externally_provided_user == o.externally_provided_user &&
          failure_message == o.failure_message &&
          fixed_user_only == o.fixed_user_only &&
          gcp_key_algo == o.gcp_key_algo &&
          gcp_role_bindings == o.gcp_role_bindings &&
          gcp_service_account_email == o.gcp_service_account_email &&
          gcp_service_account_key == o.gcp_service_account_key &&
          gcp_service_account_key_base64 == o.gcp_service_account_key_base64 &&
          gcp_service_account_key_id == o.gcp_service_account_key_id &&
          gcp_service_account_type == o.gcp_service_account_type &&
          gcp_tmp_service_account_name == o.gcp_tmp_service_account_name &&
          gcp_token_lifetime == o.gcp_token_lifetime &&
          gcp_token_scope == o.gcp_token_scope &&
          gcp_token_type == o.gcp_token_type &&
          github_app_id == o.github_app_id &&
          github_app_private_key == o.github_app_private_key &&
          github_base_url == o.github_base_url &&
          github_installation_id == o.github_installation_id &&
          github_installation_token_permissions == o.github_installation_token_permissions &&
          github_installation_token_repositories == o.github_installation_token_repositories &&
          github_installation_token_repositories_ids == o.github_installation_token_repositories_ids &&
          github_organization_name == o.github_organization_name &&
          github_repository_path == o.github_repository_path &&
          gitlab_access_token == o.gitlab_access_token &&
          gitlab_access_type == o.gitlab_access_type &&
          gitlab_certificate == o.gitlab_certificate &&
          gitlab_group_name == o.gitlab_group_name &&
          gitlab_project_name == o.gitlab_project_name &&
          gitlab_role == o.gitlab_role &&
          gitlab_token_scope == o.gitlab_token_scope &&
          gitlab_url == o.gitlab_url &&
          gke_cluster_ca_certificate == o.gke_cluster_ca_certificate &&
          gke_cluster_endpoint == o.gke_cluster_endpoint &&
          gke_cluster_name == o.gke_cluster_name &&
          gke_service_account_key == o.gke_service_account_key &&
          gke_service_account_name == o.gke_service_account_name &&
          google_workspace_access_mode == o.google_workspace_access_mode &&
          google_workspace_admin_name == o.google_workspace_admin_name &&
          google_workspace_group_name == o.google_workspace_group_name &&
          google_workspace_group_role == o.google_workspace_group_role &&
          google_workspace_role_name == o.google_workspace_role_name &&
          google_workspace_role_scope == o.google_workspace_role_scope &&
          grant_types == o.grant_types &&
          groups == o.groups &&
          hanadb_creation_statements == o.hanadb_creation_statements &&
          hanadb_revocation_statements == o.hanadb_revocation_statements &&
          host_name == o.host_name &&
          host_port == o.host_port &&
          implementation_type == o.implementation_type &&
          is_fixed_user == o.is_fixed_user &&
          issuer == o.issuer &&
          item_targets_assoc == o.item_targets_assoc &&
          jwks == o.jwks &&
          jwks_url == o.jwks_url &&
          k8s_allowed_namespaces == o.k8s_allowed_namespaces &&
          k8s_auth_type == o.k8s_auth_type &&
          k8s_bearer_token == o.k8s_bearer_token &&
          k8s_client_cert_data == o.k8s_client_cert_data &&
          k8s_client_key_data == o.k8s_client_key_data &&
          k8s_cluster_ca_certificate == o.k8s_cluster_ca_certificate &&
          k8s_cluster_endpoint == o.k8s_cluster_endpoint &&
          k8s_cluster_name == o.k8s_cluster_name &&
          k8s_dynamic_mode == o.k8s_dynamic_mode &&
          k8s_multiple_doc_yaml_temp_definition == o.k8s_multiple_doc_yaml_temp_definition &&
          k8s_namespace == o.k8s_namespace &&
          k8s_role_name == o.k8s_role_name &&
          k8s_role_type == o.k8s_role_type &&
          k8s_service_account == o.k8s_service_account &&
          last_admin_rotation == o.last_admin_rotation &&
          ldap_audience == o.ldap_audience &&
          ldap_bind_dn == o.ldap_bind_dn &&
          ldap_bind_password == o.ldap_bind_password &&
          ldap_certificate == o.ldap_certificate &&
          ldap_group_dn == o.ldap_group_dn &&
          ldap_token_expiration == o.ldap_token_expiration &&
          ldap_url == o.ldap_url &&
          ldap_user_attr == o.ldap_user_attr &&
          ldap_user_dn == o.ldap_user_dn &&
          metadata == o.metadata &&
          mongodb_atlas_api_private_key == o.mongodb_atlas_api_private_key &&
          mongodb_atlas_api_public_key == o.mongodb_atlas_api_public_key &&
          mongodb_atlas_project_id == o.mongodb_atlas_project_id &&
          mongodb_custom_data == o.mongodb_custom_data &&
          mongodb_db_name == o.mongodb_db_name &&
          mongodb_default_auth_db == o.mongodb_default_auth_db &&
          mongodb_host_port == o.mongodb_host_port &&
          mongodb_is_atlas == o.mongodb_is_atlas &&
          mongodb_password == o.mongodb_password &&
          mongodb_roles == o.mongodb_roles &&
          mongodb_uri_connection == o.mongodb_uri_connection &&
          mongodb_uri_options == o.mongodb_uri_options &&
          mongodb_username == o.mongodb_username &&
          mssql_creation_statements == o.mssql_creation_statements &&
          mssql_revocation_statements == o.mssql_revocation_statements &&
          mysql_creation_statements == o.mysql_creation_statements &&
          mysql_revocation_statements == o.mysql_revocation_statements &&
          oracle_creation_statements == o.oracle_creation_statements &&
          oracle_revocation_statements == o.oracle_revocation_statements &&
          password == o.password &&
          password_length == o.password_length &&
          password_policy == o.password_policy &&
          payload == o.payload &&
          ping_url == o.ping_url &&
          postgres_creation_statements == o.postgres_creation_statements &&
          postgres_revocation_statements == o.postgres_revocation_statements &&
          privileged_user == o.privileged_user &&
          rabbitmq_server_password == o.rabbitmq_server_password &&
          rabbitmq_server_uri == o.rabbitmq_server_uri &&
          rabbitmq_server_user == o.rabbitmq_server_user &&
          rabbitmq_user_conf_permission == o.rabbitmq_user_conf_permission &&
          rabbitmq_user_read_permission == o.rabbitmq_user_read_permission &&
          rabbitmq_user_tags == o.rabbitmq_user_tags &&
          rabbitmq_user_vhost == o.rabbitmq_user_vhost &&
          rabbitmq_user_write_permission == o.rabbitmq_user_write_permission &&
          redirect_uris == o.redirect_uris &&
          redshift_creation_statements == o.redshift_creation_statements &&
          restricted_scopes == o.restricted_scopes &&
          revoke_sync_url == o.revoke_sync_url &&
          rotate_sync_url == o.rotate_sync_url &&
          scopes == o.scopes &&
          secure_remote_access_details == o.secure_remote_access_details &&
          session_extension_warn_interval_min == o.session_extension_warn_interval_min &&
          sf_account == o.sf_account &&
          sf_user_role == o.sf_user_role &&
          sf_warehouse_name == o.sf_warehouse_name &&
          should_stop == o.should_stop &&
          signing_algorithm == o.signing_algorithm &&
          ssl_connection_certificate == o.ssl_connection_certificate &&
          ssl_connection_mode == o.ssl_connection_mode &&
          subject_dn == o.subject_dn &&
          tags == o.tags &&
          timeout_seconds == o.timeout_seconds &&
          use_gw_cloud_identity == o.use_gw_cloud_identity &&
          use_gw_service_account == o.use_gw_service_account &&
          user_name == o.user_name &&
          user_password == o.user_password &&
          user_principal_name == o.user_principal_name &&
          user_ttl == o.user_ttl &&
          username_length == o.username_length &&
          username_policy == o.username_policy &&
          venafi_allow_subdomains == o.venafi_allow_subdomains &&
          venafi_allowed_domains == o.venafi_allowed_domains &&
          venafi_api_key == o.venafi_api_key &&
          venafi_auto_generated_folder == o.venafi_auto_generated_folder &&
          venafi_base_url == o.venafi_base_url &&
          venafi_root_first_in_chain == o.venafi_root_first_in_chain &&
          venafi_sign_using_akeyless_pki == o.venafi_sign_using_akeyless_pki &&
          venafi_signer_key_name == o.venafi_signer_key_name &&
          venafi_store_private_key == o.venafi_store_private_key &&
          venafi_tpp_access_token == o.venafi_tpp_access_token &&
          venafi_tpp_client_id == o.venafi_tpp_client_id &&
          venafi_tpp_password == o.venafi_tpp_password &&
          venafi_tpp_refresh_token == o.venafi_tpp_refresh_token &&
          venafi_tpp_username == o.venafi_tpp_username &&
          venafi_use_tpp == o.venafi_use_tpp &&
          venafi_zone == o.venafi_zone &&
          warn_before_user_expiration_min == o.warn_before_user_expiration_min
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [access_token_manager_id, acl_rules, active, admin_name, admin_pwd, admin_rotation_interval_days, administrative_port, artifactory_admin_apikey, artifactory_admin_username, artifactory_base_url, artifactory_token_audience, artifactory_token_scope, authorization_port, aws_access_key_id, aws_access_mode, aws_region, aws_role_arns, aws_secret_access_key, aws_session_tags, aws_session_token, aws_transitive_tag_keys, aws_user_console_access, aws_user_groups, aws_user_policies, aws_user_programmatic_access, azure_app_object_id, azure_client_id, azure_client_secret, azure_fixed_user_name_sub_claim_key, azure_fixed_user_only, azure_resource_group_name, azure_resource_name, azure_subscription_id, azure_tenant_id, azure_user_groups_obj_id, azure_user_portal_access, azure_user_programmatic_access, azure_user_roles_template_id, azure_username, cassandra_creation_statements, chef_organizations, chef_server_access_mode, chef_server_host_name, chef_server_key, chef_server_port, chef_server_url, chef_server_username, chef_skip_ssl, client_authentication_type, cloud_service_provider, cluster_mode, connection_type, create_sync_url, db_client_id, db_client_secret, db_host_name, db_isolation_level, db_max_idle_conns, db_max_open_conns, db_name, db_port, db_private_key, db_private_key_passphrase, db_pwd, db_server_certificates, db_server_name, db_tenant_id, db_user_name, delete_protection, dynamic_secret_id, dynamic_secret_key, dynamic_secret_name, dynamic_secret_type, eks_access_key_id, eks_assume_role, eks_cluster_ca_certificate, eks_cluster_endpoint, eks_cluster_name, eks_region, eks_secret_access_key, enable_admin_rotation, enforce_replay_prevention, externally_provided_user, failure_message, fixed_user_only, gcp_key_algo, gcp_role_bindings, gcp_service_account_email, gcp_service_account_key, gcp_service_account_key_base64, gcp_service_account_key_id, gcp_service_account_type, gcp_tmp_service_account_name, gcp_token_lifetime, gcp_token_scope, gcp_token_type, github_app_id, github_app_private_key, github_base_url, github_installation_id, github_installation_token_permissions, github_installation_token_repositories, github_installation_token_repositories_ids, github_organization_name, github_repository_path, gitlab_access_token, gitlab_access_type, gitlab_certificate, gitlab_group_name, gitlab_project_name, gitlab_role, gitlab_token_scope, gitlab_url, gke_cluster_ca_certificate, gke_cluster_endpoint, gke_cluster_name, gke_service_account_key, gke_service_account_name, google_workspace_access_mode, google_workspace_admin_name, google_workspace_group_name, google_workspace_group_role, google_workspace_role_name, google_workspace_role_scope, grant_types, groups, hanadb_creation_statements, hanadb_revocation_statements, host_name, host_port, implementation_type, is_fixed_user, issuer, item_targets_assoc, jwks, jwks_url, k8s_allowed_namespaces, k8s_auth_type, k8s_bearer_token, k8s_client_cert_data, k8s_client_key_data, k8s_cluster_ca_certificate, k8s_cluster_endpoint, k8s_cluster_name, k8s_dynamic_mode, k8s_multiple_doc_yaml_temp_definition, k8s_namespace, k8s_role_name, k8s_role_type, k8s_service_account, last_admin_rotation, ldap_audience, ldap_bind_dn, ldap_bind_password, ldap_certificate, ldap_group_dn, ldap_token_expiration, ldap_url, ldap_user_attr, ldap_user_dn, metadata, mongodb_atlas_api_private_key, mongodb_atlas_api_public_key, mongodb_atlas_project_id, mongodb_custom_data, mongodb_db_name, mongodb_default_auth_db, mongodb_host_port, mongodb_is_atlas, mongodb_password, mongodb_roles, mongodb_uri_connection, mongodb_uri_options, mongodb_username, mssql_creation_statements, mssql_revocation_statements, mysql_creation_statements, mysql_revocation_statements, oracle_creation_statements, oracle_revocation_statements, password, password_length, password_policy, payload, ping_url, postgres_creation_statements, postgres_revocation_statements, privileged_user, rabbitmq_server_password, rabbitmq_server_uri, rabbitmq_server_user, rabbitmq_user_conf_permission, rabbitmq_user_read_permission, rabbitmq_user_tags, rabbitmq_user_vhost, rabbitmq_user_write_permission, redirect_uris, redshift_creation_statements, restricted_scopes, revoke_sync_url, rotate_sync_url, scopes, secure_remote_access_details, session_extension_warn_interval_min, sf_account, sf_user_role, sf_warehouse_name, should_stop, signing_algorithm, ssl_connection_certificate, ssl_connection_mode, subject_dn, tags, timeout_seconds, use_gw_cloud_identity, use_gw_service_account, user_name, user_password, user_principal_name, user_ttl, username_length, username_policy, venafi_allow_subdomains, venafi_allowed_domains, venafi_api_key, venafi_auto_generated_folder, venafi_base_url, venafi_root_first_in_chain, venafi_sign_using_akeyless_pki, venafi_signer_key_name, venafi_store_private_key, venafi_tpp_access_token, venafi_tpp_client_id, venafi_tpp_password, venafi_tpp_refresh_token, venafi_tpp_username, venafi_use_tpp, venafi_zone, warn_before_user_expiration_min].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Akeyless.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
