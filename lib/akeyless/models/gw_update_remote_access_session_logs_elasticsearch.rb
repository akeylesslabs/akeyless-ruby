=begin
#Akeyless API

#The purpose of this application is to provide access to Akeyless API.

The version of the OpenAPI document: 2.0
Contact: support@akeyless.io
Generated by: https://openapi-generator.tech
Generator version: 7.9.0-SNAPSHOT

=end

require 'date'
require 'time'

module Akeyless
  # gwUpdateRemoteAccessSessionLogsElasticsearch is a command that updates session log forwarding config (elasticsearch target)
  class GwUpdateRemoteAccessSessionLogsElasticsearch
    # Elasticsearch api key relevant only for api_key auth-type
    attr_accessor :api_key

    # Elasticsearch auth type [api_key/password]
    attr_accessor :auth_type

    # Elasticsearch cloud id relevant only for cloud server-type
    attr_accessor :cloud_id

    # Enable Log Forwarding [true/false]
    attr_accessor :enable

    # Enable tls
    attr_accessor :enable_tls

    # Elasticsearch index
    attr_accessor :index

    # Set output format to JSON
    attr_accessor :json

    # Elasticsearch nodes relevant only for nodes server-type
    attr_accessor :nodes

    # Logs format [text/json]
    attr_accessor :output_format

    # Elasticsearch password relevant only for password auth-type
    attr_accessor :password

    # Pull interval in seconds
    attr_accessor :pull_interval

    # Elasticsearch server type [cloud/nodes]
    attr_accessor :server_type

    # Elasticsearch tls certificate
    attr_accessor :tls_certificate

    # Authentication token (see `/auth` and `/configure`)
    attr_accessor :token

    # The universal identity token, Required only for universal_identity authentication
    attr_accessor :uid_token

    # Elasticsearch user name relevant only for password auth-type
    attr_accessor :user_name

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'api_key' => :'api-key',
        :'auth_type' => :'auth-type',
        :'cloud_id' => :'cloud-id',
        :'enable' => :'enable',
        :'enable_tls' => :'enable-tls',
        :'index' => :'index',
        :'json' => :'json',
        :'nodes' => :'nodes',
        :'output_format' => :'output-format',
        :'password' => :'password',
        :'pull_interval' => :'pull-interval',
        :'server_type' => :'server-type',
        :'tls_certificate' => :'tls-certificate',
        :'token' => :'token',
        :'uid_token' => :'uid-token',
        :'user_name' => :'user-name'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'api_key' => :'String',
        :'auth_type' => :'String',
        :'cloud_id' => :'String',
        :'enable' => :'String',
        :'enable_tls' => :'Boolean',
        :'index' => :'String',
        :'json' => :'Boolean',
        :'nodes' => :'String',
        :'output_format' => :'String',
        :'password' => :'String',
        :'pull_interval' => :'String',
        :'server_type' => :'String',
        :'tls_certificate' => :'String',
        :'token' => :'String',
        :'uid_token' => :'String',
        :'user_name' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Akeyless::GwUpdateRemoteAccessSessionLogsElasticsearch` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Akeyless::GwUpdateRemoteAccessSessionLogsElasticsearch`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'api_key')
        self.api_key = attributes[:'api_key']
      end

      if attributes.key?(:'auth_type')
        self.auth_type = attributes[:'auth_type']
      end

      if attributes.key?(:'cloud_id')
        self.cloud_id = attributes[:'cloud_id']
      end

      if attributes.key?(:'enable')
        self.enable = attributes[:'enable']
      else
        self.enable = 'true'
      end

      if attributes.key?(:'enable_tls')
        self.enable_tls = attributes[:'enable_tls']
      end

      if attributes.key?(:'index')
        self.index = attributes[:'index']
      end

      if attributes.key?(:'json')
        self.json = attributes[:'json']
      else
        self.json = false
      end

      if attributes.key?(:'nodes')
        self.nodes = attributes[:'nodes']
      end

      if attributes.key?(:'output_format')
        self.output_format = attributes[:'output_format']
      else
        self.output_format = 'text'
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'pull_interval')
        self.pull_interval = attributes[:'pull_interval']
      else
        self.pull_interval = '10'
      end

      if attributes.key?(:'server_type')
        self.server_type = attributes[:'server_type']
      end

      if attributes.key?(:'tls_certificate')
        self.tls_certificate = attributes[:'tls_certificate']
      else
        self.tls_certificate = 'use-existing'
      end

      if attributes.key?(:'token')
        self.token = attributes[:'token']
      end

      if attributes.key?(:'uid_token')
        self.uid_token = attributes[:'uid_token']
      end

      if attributes.key?(:'user_name')
        self.user_name = attributes[:'user_name']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          api_key == o.api_key &&
          auth_type == o.auth_type &&
          cloud_id == o.cloud_id &&
          enable == o.enable &&
          enable_tls == o.enable_tls &&
          index == o.index &&
          json == o.json &&
          nodes == o.nodes &&
          output_format == o.output_format &&
          password == o.password &&
          pull_interval == o.pull_interval &&
          server_type == o.server_type &&
          tls_certificate == o.tls_certificate &&
          token == o.token &&
          uid_token == o.uid_token &&
          user_name == o.user_name
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [api_key, auth_type, cloud_id, enable, enable_tls, index, json, nodes, output_format, password, pull_interval, server_type, tls_certificate, token, uid_token, user_name].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Akeyless.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
