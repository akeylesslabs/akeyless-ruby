=begin
#Akeyless API

#The purpose of this application is to provide access to Akeyless API.

The version of the OpenAPI document: 2.0
Contact: support@akeyless.io
Generated by: https://openapi-generator.tech
Generator version: 7.5.0-SNAPSHOT

=end

require 'date'
require 'time'

module Akeyless
  class ClassicKeyDetailsInfo
    attr_accessor :classic_key_attributes

    attr_accessor :classic_key_id

    attr_accessor :gw_cluster_id

    attr_accessor :has_certificate

    attr_accessor :is_provided_by_user

    attr_accessor :is_unexportable

    # ItemState defines the different states an Item can be in
    attr_accessor :key_state

    attr_accessor :key_type

    attr_accessor :last_error

    attr_accessor :public_key

    attr_accessor :target_alias_helper

    attr_accessor :target_types

    attr_accessor :targets

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'classic_key_attributes' => :'classic_key_attributes',
        :'classic_key_id' => :'classic_key_id',
        :'gw_cluster_id' => :'gw_cluster_id',
        :'has_certificate' => :'has_certificate',
        :'is_provided_by_user' => :'is_provided_by_user',
        :'is_unexportable' => :'is_unexportable',
        :'key_state' => :'key_state',
        :'key_type' => :'key_type',
        :'last_error' => :'last_error',
        :'public_key' => :'public_key',
        :'target_alias_helper' => :'target_alias_helper',
        :'target_types' => :'target_types',
        :'targets' => :'targets'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'classic_key_attributes' => :'Hash<String, Array<String>>',
        :'classic_key_id' => :'String',
        :'gw_cluster_id' => :'Integer',
        :'has_certificate' => :'Boolean',
        :'is_provided_by_user' => :'Boolean',
        :'is_unexportable' => :'Boolean',
        :'key_state' => :'String',
        :'key_type' => :'String',
        :'last_error' => :'String',
        :'public_key' => :'String',
        :'target_alias_helper' => :'String',
        :'target_types' => :'Array<String>',
        :'targets' => :'Array<ClassicKeyTargetInfo>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Akeyless::ClassicKeyDetailsInfo` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Akeyless::ClassicKeyDetailsInfo`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'classic_key_attributes')
        if (value = attributes[:'classic_key_attributes']).is_a?(Hash)
          self.classic_key_attributes = value
        end
      end

      if attributes.key?(:'classic_key_id')
        self.classic_key_id = attributes[:'classic_key_id']
      end

      if attributes.key?(:'gw_cluster_id')
        self.gw_cluster_id = attributes[:'gw_cluster_id']
      end

      if attributes.key?(:'has_certificate')
        self.has_certificate = attributes[:'has_certificate']
      end

      if attributes.key?(:'is_provided_by_user')
        self.is_provided_by_user = attributes[:'is_provided_by_user']
      end

      if attributes.key?(:'is_unexportable')
        self.is_unexportable = attributes[:'is_unexportable']
      end

      if attributes.key?(:'key_state')
        self.key_state = attributes[:'key_state']
      end

      if attributes.key?(:'key_type')
        self.key_type = attributes[:'key_type']
      end

      if attributes.key?(:'last_error')
        self.last_error = attributes[:'last_error']
      end

      if attributes.key?(:'public_key')
        self.public_key = attributes[:'public_key']
      end

      if attributes.key?(:'target_alias_helper')
        self.target_alias_helper = attributes[:'target_alias_helper']
      end

      if attributes.key?(:'target_types')
        if (value = attributes[:'target_types']).is_a?(Array)
          self.target_types = value
        end
      end

      if attributes.key?(:'targets')
        if (value = attributes[:'targets']).is_a?(Array)
          self.targets = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          classic_key_attributes == o.classic_key_attributes &&
          classic_key_id == o.classic_key_id &&
          gw_cluster_id == o.gw_cluster_id &&
          has_certificate == o.has_certificate &&
          is_provided_by_user == o.is_provided_by_user &&
          is_unexportable == o.is_unexportable &&
          key_state == o.key_state &&
          key_type == o.key_type &&
          last_error == o.last_error &&
          public_key == o.public_key &&
          target_alias_helper == o.target_alias_helper &&
          target_types == o.target_types &&
          targets == o.targets
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [classic_key_attributes, classic_key_id, gw_cluster_id, has_certificate, is_provided_by_user, is_unexportable, key_state, key_type, last_error, public_key, target_alias_helper, target_types, targets].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Akeyless.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
