=begin
#Akeyless API

#The purpose of this application is to provide access to Akeyless API.

The version of the OpenAPI document: 2.0
Contact: support@akeyless.io
Generated by: https://openapi-generator.tech
Generator version: 7.8.0-SNAPSHOT

=end

require 'cgi'

module Akeyless
  class V2Api
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param body [AssocRoleAuthMethod] 
    # @param [Hash] opts the optional parameters
    # @return [CreateRoleAuthMethodAssocOutput]
    def assoc_role_auth_method(body, opts = {})
      data, _status_code, _headers = assoc_role_auth_method_with_http_info(body, opts)
      data
    end

    # @param body [AssocRoleAuthMethod] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateRoleAuthMethodAssocOutput, Integer, Hash)>] CreateRoleAuthMethodAssocOutput data, response status code and response headers
    def assoc_role_auth_method_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.assoc_role_auth_method ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.assoc_role_auth_method"
      end
      # resource path
      local_var_path = '/assoc-role-am'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateRoleAuthMethodAssocOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.assoc_role_auth_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#assoc_role_auth_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AssocTargetItem] 
    # @param [Hash] opts the optional parameters
    # @return [CreateTargetItemAssocOutput]
    def assoc_target_item(body, opts = {})
      data, _status_code, _headers = assoc_target_item_with_http_info(body, opts)
      data
    end

    # @param body [AssocTargetItem] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateTargetItemAssocOutput, Integer, Hash)>] CreateTargetItemAssocOutput data, response status code and response headers
    def assoc_target_item_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.assoc_target_item ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.assoc_target_item"
      end
      # resource path
      local_var_path = '/assoc-target-item'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateTargetItemAssocOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.assoc_target_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#assoc_target_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [Auth] 
    # @param [Hash] opts the optional parameters
    # @return [AuthOutput]
    def auth(body, opts = {})
      data, _status_code, _headers = auth_with_http_info(body, opts)
      data
    end

    # @param body [Auth] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthOutput, Integer, Hash)>] AuthOutput data, response status code and response headers
    def auth_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth"
      end
      # resource path
      local_var_path = '/auth'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodCreateApiKey] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodCreateOutput]
    def auth_method_create_api_key(body, opts = {})
      data, _status_code, _headers = auth_method_create_api_key_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodCreateApiKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodCreateOutput, Integer, Hash)>] AuthMethodCreateOutput data, response status code and response headers
    def auth_method_create_api_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_create_api_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_create_api_key"
      end
      # resource path
      local_var_path = '/auth-method-create-api-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_create_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_create_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodCreateAwsIam] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodCreateOutput]
    def auth_method_create_aws_iam(body, opts = {})
      data, _status_code, _headers = auth_method_create_aws_iam_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodCreateAwsIam] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodCreateOutput, Integer, Hash)>] AuthMethodCreateOutput data, response status code and response headers
    def auth_method_create_aws_iam_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_create_aws_iam ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_create_aws_iam"
      end
      # resource path
      local_var_path = '/auth-method-create-aws'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_create_aws_iam",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_create_aws_iam\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodCreateAzureAD] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodCreateOutput]
    def auth_method_create_azure_ad(body, opts = {})
      data, _status_code, _headers = auth_method_create_azure_ad_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodCreateAzureAD] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodCreateOutput, Integer, Hash)>] AuthMethodCreateOutput data, response status code and response headers
    def auth_method_create_azure_ad_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_create_azure_ad ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_create_azure_ad"
      end
      # resource path
      local_var_path = '/auth-method-create-azure-ad'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_create_azure_ad",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_create_azure_ad\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodCreateCert] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodCreateOutput]
    def auth_method_create_cert(body, opts = {})
      data, _status_code, _headers = auth_method_create_cert_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodCreateCert] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodCreateOutput, Integer, Hash)>] AuthMethodCreateOutput data, response status code and response headers
    def auth_method_create_cert_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_create_cert ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_create_cert"
      end
      # resource path
      local_var_path = '/auth-method-create-cert'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_create_cert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_create_cert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodCreateEmail] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodCreateOutput]
    def auth_method_create_email(body, opts = {})
      data, _status_code, _headers = auth_method_create_email_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodCreateEmail] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodCreateOutput, Integer, Hash)>] AuthMethodCreateOutput data, response status code and response headers
    def auth_method_create_email_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_create_email ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_create_email"
      end
      # resource path
      local_var_path = '/auth-method-create-email'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_create_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_create_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodCreateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodCreateOutput]
    def auth_method_create_gcp(body, opts = {})
      data, _status_code, _headers = auth_method_create_gcp_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodCreateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodCreateOutput, Integer, Hash)>] AuthMethodCreateOutput data, response status code and response headers
    def auth_method_create_gcp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_create_gcp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_create_gcp"
      end
      # resource path
      local_var_path = '/auth-method-create-gcp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_create_gcp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_create_gcp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodCreateK8s] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodCreateOutput]
    def auth_method_create_k8s(body, opts = {})
      data, _status_code, _headers = auth_method_create_k8s_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodCreateK8s] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodCreateOutput, Integer, Hash)>] AuthMethodCreateOutput data, response status code and response headers
    def auth_method_create_k8s_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_create_k8s ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_create_k8s"
      end
      # resource path
      local_var_path = '/auth-method-create-k8s'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_create_k8s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_create_k8s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodCreateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodCreateOutput]
    def auth_method_create_ldap(body, opts = {})
      data, _status_code, _headers = auth_method_create_ldap_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodCreateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodCreateOutput, Integer, Hash)>] AuthMethodCreateOutput data, response status code and response headers
    def auth_method_create_ldap_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_create_ldap ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_create_ldap"
      end
      # resource path
      local_var_path = '/auth-method-create-ldap'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_create_ldap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_create_ldap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodCreateOauth2] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodCreateOutput]
    def auth_method_create_oauth2(body, opts = {})
      data, _status_code, _headers = auth_method_create_oauth2_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodCreateOauth2] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodCreateOutput, Integer, Hash)>] AuthMethodCreateOutput data, response status code and response headers
    def auth_method_create_oauth2_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_create_oauth2 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_create_oauth2"
      end
      # resource path
      local_var_path = '/auth-method-create-oauth2'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_create_oauth2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_create_oauth2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodCreateOCI] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodCreateOutput]
    def auth_method_create_oci(body, opts = {})
      data, _status_code, _headers = auth_method_create_oci_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodCreateOCI] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodCreateOutput, Integer, Hash)>] AuthMethodCreateOutput data, response status code and response headers
    def auth_method_create_oci_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_create_oci ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_create_oci"
      end
      # resource path
      local_var_path = '/auth-method-create-oci'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_create_oci",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_create_oci\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodCreateOIDC] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodCreateOutput]
    def auth_method_create_oidc(body, opts = {})
      data, _status_code, _headers = auth_method_create_oidc_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodCreateOIDC] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodCreateOutput, Integer, Hash)>] AuthMethodCreateOutput data, response status code and response headers
    def auth_method_create_oidc_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_create_oidc ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_create_oidc"
      end
      # resource path
      local_var_path = '/auth-method-create-oidc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_create_oidc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_create_oidc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodCreateSAML] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodCreateOutput]
    def auth_method_create_saml(body, opts = {})
      data, _status_code, _headers = auth_method_create_saml_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodCreateSAML] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodCreateOutput, Integer, Hash)>] AuthMethodCreateOutput data, response status code and response headers
    def auth_method_create_saml_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_create_saml ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_create_saml"
      end
      # resource path
      local_var_path = '/auth-method-create-saml'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_create_saml",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_create_saml\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodCreateUniversalIdentity] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodCreateOutput]
    def auth_method_create_universal_identity(body, opts = {})
      data, _status_code, _headers = auth_method_create_universal_identity_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodCreateUniversalIdentity] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodCreateOutput, Integer, Hash)>] AuthMethodCreateOutput data, response status code and response headers
    def auth_method_create_universal_identity_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_create_universal_identity ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_create_universal_identity"
      end
      # resource path
      local_var_path = '/auth-method-create-universal-identity'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_create_universal_identity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_create_universal_identity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodDelete] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodDeleteOutput]
    def auth_method_delete(body, opts = {})
      data, _status_code, _headers = auth_method_delete_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodDelete] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodDeleteOutput, Integer, Hash)>] AuthMethodDeleteOutput data, response status code and response headers
    def auth_method_delete_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_delete ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_delete"
      end
      # resource path
      local_var_path = '/auth-method-delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodDeleteOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodGet] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethod]
    def auth_method_get(body, opts = {})
      data, _status_code, _headers = auth_method_get_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodGet] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethod, Integer, Hash)>] AuthMethod data, response status code and response headers
    def auth_method_get_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_get ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_get"
      end
      # resource path
      local_var_path = '/auth-method-get'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethod'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodList] 
    # @param [Hash] opts the optional parameters
    # @return [ListAuthMethodsOutput]
    def auth_method_list(body, opts = {})
      data, _status_code, _headers = auth_method_list_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodList] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListAuthMethodsOutput, Integer, Hash)>] ListAuthMethodsOutput data, response status code and response headers
    def auth_method_list_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_list ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_list"
      end
      # resource path
      local_var_path = '/auth-method-list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ListAuthMethodsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodUpdateApiKey] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodUpdateOutput]
    def auth_method_update_api_key(body, opts = {})
      data, _status_code, _headers = auth_method_update_api_key_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodUpdateApiKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodUpdateOutput, Integer, Hash)>] AuthMethodUpdateOutput data, response status code and response headers
    def auth_method_update_api_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_update_api_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_update_api_key"
      end
      # resource path
      local_var_path = '/auth-method-update-api-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_update_api_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_update_api_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodUpdateAwsIam] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodUpdateOutput]
    def auth_method_update_aws_iam(body, opts = {})
      data, _status_code, _headers = auth_method_update_aws_iam_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodUpdateAwsIam] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodUpdateOutput, Integer, Hash)>] AuthMethodUpdateOutput data, response status code and response headers
    def auth_method_update_aws_iam_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_update_aws_iam ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_update_aws_iam"
      end
      # resource path
      local_var_path = '/auth-method-update-aws-iam'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_update_aws_iam",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_update_aws_iam\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodUpdateAzureAD] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodUpdateOutput]
    def auth_method_update_azure_ad(body, opts = {})
      data, _status_code, _headers = auth_method_update_azure_ad_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodUpdateAzureAD] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodUpdateOutput, Integer, Hash)>] AuthMethodUpdateOutput data, response status code and response headers
    def auth_method_update_azure_ad_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_update_azure_ad ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_update_azure_ad"
      end
      # resource path
      local_var_path = '/auth-method-update-azure-ad'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_update_azure_ad",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_update_azure_ad\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodUpdateCert] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodUpdateOutput]
    def auth_method_update_cert(body, opts = {})
      data, _status_code, _headers = auth_method_update_cert_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodUpdateCert] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodUpdateOutput, Integer, Hash)>] AuthMethodUpdateOutput data, response status code and response headers
    def auth_method_update_cert_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_update_cert ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_update_cert"
      end
      # resource path
      local_var_path = '/auth-method-update-cert'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_update_cert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_update_cert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodUpdateEmail] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodUpdateOutput]
    def auth_method_update_email(body, opts = {})
      data, _status_code, _headers = auth_method_update_email_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodUpdateEmail] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodUpdateOutput, Integer, Hash)>] AuthMethodUpdateOutput data, response status code and response headers
    def auth_method_update_email_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_update_email ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_update_email"
      end
      # resource path
      local_var_path = '/auth-method-update-email'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_update_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_update_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodUpdateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodUpdateOutput]
    def auth_method_update_gcp(body, opts = {})
      data, _status_code, _headers = auth_method_update_gcp_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodUpdateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodUpdateOutput, Integer, Hash)>] AuthMethodUpdateOutput data, response status code and response headers
    def auth_method_update_gcp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_update_gcp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_update_gcp"
      end
      # resource path
      local_var_path = '/auth-method-update-gcp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_update_gcp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_update_gcp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodUpdateK8s] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodUpdateOutput]
    def auth_method_update_k8s(body, opts = {})
      data, _status_code, _headers = auth_method_update_k8s_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodUpdateK8s] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodUpdateOutput, Integer, Hash)>] AuthMethodUpdateOutput data, response status code and response headers
    def auth_method_update_k8s_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_update_k8s ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_update_k8s"
      end
      # resource path
      local_var_path = '/auth-method-update-k8s'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_update_k8s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_update_k8s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodUpdateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodUpdateOutput]
    def auth_method_update_ldap(body, opts = {})
      data, _status_code, _headers = auth_method_update_ldap_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodUpdateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodUpdateOutput, Integer, Hash)>] AuthMethodUpdateOutput data, response status code and response headers
    def auth_method_update_ldap_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_update_ldap ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_update_ldap"
      end
      # resource path
      local_var_path = '/auth-method-update-ldap'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_update_ldap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_update_ldap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodUpdateOauth2] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodUpdateOutput]
    def auth_method_update_oauth2(body, opts = {})
      data, _status_code, _headers = auth_method_update_oauth2_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodUpdateOauth2] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodUpdateOutput, Integer, Hash)>] AuthMethodUpdateOutput data, response status code and response headers
    def auth_method_update_oauth2_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_update_oauth2 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_update_oauth2"
      end
      # resource path
      local_var_path = '/auth-method-update-oauth2'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_update_oauth2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_update_oauth2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodUpdateOCI] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodUpdateOutput]
    def auth_method_update_oci(body, opts = {})
      data, _status_code, _headers = auth_method_update_oci_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodUpdateOCI] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodUpdateOutput, Integer, Hash)>] AuthMethodUpdateOutput data, response status code and response headers
    def auth_method_update_oci_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_update_oci ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_update_oci"
      end
      # resource path
      local_var_path = '/auth-method-update-oci'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_update_oci",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_update_oci\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodUpdateOIDC] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodUpdateOutput]
    def auth_method_update_oidc(body, opts = {})
      data, _status_code, _headers = auth_method_update_oidc_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodUpdateOIDC] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodUpdateOutput, Integer, Hash)>] AuthMethodUpdateOutput data, response status code and response headers
    def auth_method_update_oidc_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_update_oidc ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_update_oidc"
      end
      # resource path
      local_var_path = '/auth-method-update-oidc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_update_oidc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_update_oidc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodUpdateSAML] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodUpdateOutput]
    def auth_method_update_saml(body, opts = {})
      data, _status_code, _headers = auth_method_update_saml_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodUpdateSAML] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodUpdateOutput, Integer, Hash)>] AuthMethodUpdateOutput data, response status code and response headers
    def auth_method_update_saml_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_update_saml ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_update_saml"
      end
      # resource path
      local_var_path = '/auth-method-update-saml'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_update_saml",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_update_saml\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [AuthMethodUpdateUniversalIdentity] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethodUpdateOutput]
    def auth_method_update_universal_identity(body, opts = {})
      data, _status_code, _headers = auth_method_update_universal_identity_with_http_info(body, opts)
      data
    end

    # @param body [AuthMethodUpdateUniversalIdentity] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethodUpdateOutput, Integer, Hash)>] AuthMethodUpdateOutput data, response status code and response headers
    def auth_method_update_universal_identity_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.auth_method_update_universal_identity ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.auth_method_update_universal_identity"
      end
      # resource path
      local_var_path = '/auth-method-update-universal-identity'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethodUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.auth_method_update_universal_identity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#auth_method_update_universal_identity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [Configure] 
    # @param [Hash] opts the optional parameters
    # @return [ConfigureOutput]
    def configure(body, opts = {})
      data, _status_code, _headers = configure_with_http_info(body, opts)
      data
    end

    # @param body [Configure] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConfigureOutput, Integer, Hash)>] ConfigureOutput data, response status code and response headers
    def configure_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.configure ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.configure"
      end
      # resource path
      local_var_path = '/configure'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ConfigureOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.configure",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#configure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [Connect] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def connect(body, opts = {})
      data, _status_code, _headers = connect_with_http_info(body, opts)
      data
    end

    # @param body [Connect] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def connect_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.connect ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.connect"
      end
      # resource path
      local_var_path = '/connect'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.connect",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#connect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateArtifactoryTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateArtifactoryTargetOutput]
    def create_artifactory_target(body, opts = {})
      data, _status_code, _headers = create_artifactory_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateArtifactoryTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateArtifactoryTargetOutput, Integer, Hash)>] CreateArtifactoryTargetOutput data, response status code and response headers
    def create_artifactory_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_artifactory_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_artifactory_target"
      end
      # resource path
      local_var_path = '/create-artifactory-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateArtifactoryTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_artifactory_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_artifactory_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethod] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodOutput]
    def create_auth_method(body, opts = {})
      data, _status_code, _headers = create_auth_method_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethod] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodOutput, Integer, Hash)>] CreateAuthMethodOutput data, response status code and response headers
    def create_auth_method_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method"
      end
      # resource path
      local_var_path = '/create-auth-method'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethodAWSIAM] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodAWSIAMOutput]
    def create_auth_method_awsiam(body, opts = {})
      data, _status_code, _headers = create_auth_method_awsiam_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethodAWSIAM] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodAWSIAMOutput, Integer, Hash)>] CreateAuthMethodAWSIAMOutput data, response status code and response headers
    def create_auth_method_awsiam_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method_awsiam ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method_awsiam"
      end
      # resource path
      local_var_path = '/create-auth-method-aws-iam'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodAWSIAMOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method_awsiam",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method_awsiam\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethodAzureAD] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodAzureADOutput]
    def create_auth_method_azure_ad(body, opts = {})
      data, _status_code, _headers = create_auth_method_azure_ad_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethodAzureAD] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodAzureADOutput, Integer, Hash)>] CreateAuthMethodAzureADOutput data, response status code and response headers
    def create_auth_method_azure_ad_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method_azure_ad ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method_azure_ad"
      end
      # resource path
      local_var_path = '/create-auth-method-azure-ad'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodAzureADOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method_azure_ad",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method_azure_ad\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethodCert] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodCertOutput]
    def create_auth_method_cert(body, opts = {})
      data, _status_code, _headers = create_auth_method_cert_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethodCert] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodCertOutput, Integer, Hash)>] CreateAuthMethodCertOutput data, response status code and response headers
    def create_auth_method_cert_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method_cert ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method_cert"
      end
      # resource path
      local_var_path = '/create-auth-method-cert'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodCertOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method_cert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method_cert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethodEmail] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodEmailOutput]
    def create_auth_method_email(body, opts = {})
      data, _status_code, _headers = create_auth_method_email_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethodEmail] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodEmailOutput, Integer, Hash)>] CreateAuthMethodEmailOutput data, response status code and response headers
    def create_auth_method_email_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method_email ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method_email"
      end
      # resource path
      local_var_path = '/create-auth-method-email'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodEmailOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethodGCP] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodGCPOutput]
    def create_auth_method_gcp(body, opts = {})
      data, _status_code, _headers = create_auth_method_gcp_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethodGCP] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodGCPOutput, Integer, Hash)>] CreateAuthMethodGCPOutput data, response status code and response headers
    def create_auth_method_gcp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method_gcp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method_gcp"
      end
      # resource path
      local_var_path = '/create-auth-method-gcp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodGCPOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method_gcp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method_gcp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethodHuawei] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodHuaweiOutput]
    def create_auth_method_huawei(body, opts = {})
      data, _status_code, _headers = create_auth_method_huawei_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethodHuawei] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodHuaweiOutput, Integer, Hash)>] CreateAuthMethodHuaweiOutput data, response status code and response headers
    def create_auth_method_huawei_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method_huawei ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method_huawei"
      end
      # resource path
      local_var_path = '/create-auth-method-huawei'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodHuaweiOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method_huawei",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method_huawei\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethodK8S] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodK8SOutput]
    def create_auth_method_k8_s(body, opts = {})
      data, _status_code, _headers = create_auth_method_k8_s_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethodK8S] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodK8SOutput, Integer, Hash)>] CreateAuthMethodK8SOutput data, response status code and response headers
    def create_auth_method_k8_s_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method_k8_s ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method_k8_s"
      end
      # resource path
      local_var_path = '/create-auth-method-k8s'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodK8SOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method_k8_s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method_k8_s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethodLDAP] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodLDAPOutput]
    def create_auth_method_ldap(body, opts = {})
      data, _status_code, _headers = create_auth_method_ldap_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethodLDAP] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodLDAPOutput, Integer, Hash)>] CreateAuthMethodLDAPOutput data, response status code and response headers
    def create_auth_method_ldap_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method_ldap ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method_ldap"
      end
      # resource path
      local_var_path = '/create-auth-method-ldap'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodLDAPOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method_ldap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method_ldap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethodOAuth2] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodOAuth2Output]
    def create_auth_method_o_auth2(body, opts = {})
      data, _status_code, _headers = create_auth_method_o_auth2_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethodOAuth2] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodOAuth2Output, Integer, Hash)>] CreateAuthMethodOAuth2Output data, response status code and response headers
    def create_auth_method_o_auth2_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method_o_auth2 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method_o_auth2"
      end
      # resource path
      local_var_path = '/create-auth-method-oauth2'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodOAuth2Output'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method_o_auth2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method_o_auth2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethodOCI] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodOCIOutput]
    def create_auth_method_oci(body, opts = {})
      data, _status_code, _headers = create_auth_method_oci_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethodOCI] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodOCIOutput, Integer, Hash)>] CreateAuthMethodOCIOutput data, response status code and response headers
    def create_auth_method_oci_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method_oci ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method_oci"
      end
      # resource path
      local_var_path = '/create-auth-method-oci'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodOCIOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method_oci",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method_oci\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethodOIDC] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodOIDCOutput]
    def create_auth_method_oidc(body, opts = {})
      data, _status_code, _headers = create_auth_method_oidc_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethodOIDC] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodOIDCOutput, Integer, Hash)>] CreateAuthMethodOIDCOutput data, response status code and response headers
    def create_auth_method_oidc_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method_oidc ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method_oidc"
      end
      # resource path
      local_var_path = '/create-auth-method-oidc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodOIDCOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method_oidc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method_oidc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethodSAML] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodSAMLOutput]
    def create_auth_method_saml(body, opts = {})
      data, _status_code, _headers = create_auth_method_saml_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethodSAML] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodSAMLOutput, Integer, Hash)>] CreateAuthMethodSAMLOutput data, response status code and response headers
    def create_auth_method_saml_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method_saml ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method_saml"
      end
      # resource path
      local_var_path = '/create-auth-method-saml'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodSAMLOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method_saml",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method_saml\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAuthMethodUniversalIdentity] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAuthMethodUniversalIdentityOutput]
    def create_auth_method_universal_identity(body, opts = {})
      data, _status_code, _headers = create_auth_method_universal_identity_with_http_info(body, opts)
      data
    end

    # @param body [CreateAuthMethodUniversalIdentity] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAuthMethodUniversalIdentityOutput, Integer, Hash)>] CreateAuthMethodUniversalIdentityOutput data, response status code and response headers
    def create_auth_method_universal_identity_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_auth_method_universal_identity ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_auth_method_universal_identity"
      end
      # resource path
      local_var_path = '/create-auth-method-universal-identity'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAuthMethodUniversalIdentityOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_auth_method_universal_identity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_auth_method_universal_identity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAWSTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAWSTargetOutput]
    def create_aws_target(body, opts = {})
      data, _status_code, _headers = create_aws_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateAWSTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAWSTargetOutput, Integer, Hash)>] CreateAWSTargetOutput data, response status code and response headers
    def create_aws_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_aws_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_aws_target"
      end
      # resource path
      local_var_path = '/create-aws-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAWSTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_aws_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_aws_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateAzureTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateAzureTargetOutput]
    def create_azure_target(body, opts = {})
      data, _status_code, _headers = create_azure_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateAzureTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateAzureTargetOutput, Integer, Hash)>] CreateAzureTargetOutput data, response status code and response headers
    def create_azure_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_azure_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_azure_target"
      end
      # resource path
      local_var_path = '/create-azure-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateAzureTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_azure_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_azure_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [CreateCertificateOutput]
    def create_certificate(body, opts = {})
      data, _status_code, _headers = create_certificate_with_http_info(body, opts)
      data
    end

    # @param body [CreateCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateCertificateOutput, Integer, Hash)>] CreateCertificateOutput data, response status code and response headers
    def create_certificate_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_certificate ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_certificate"
      end
      # resource path
      local_var_path = '/create-certificate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateCertificateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [CreateClassicKeyOutput]
    def create_classic_key(body, opts = {})
      data, _status_code, _headers = create_classic_key_with_http_info(body, opts)
      data
    end

    # @param body [CreateClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateClassicKeyOutput, Integer, Hash)>] CreateClassicKeyOutput data, response status code and response headers
    def create_classic_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_classic_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_classic_key"
      end
      # resource path
      local_var_path = '/create-classic-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateClassicKeyOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_classic_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_classic_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateDBTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateDBTargetOutput]
    def create_db_target(body, opts = {})
      data, _status_code, _headers = create_db_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateDBTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateDBTargetOutput, Integer, Hash)>] CreateDBTargetOutput data, response status code and response headers
    def create_db_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_db_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_db_target"
      end
      # resource path
      local_var_path = '/create-db-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateDBTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_db_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_db_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateDFCKey] 
    # @param [Hash] opts the optional parameters
    # @return [CreateDFCKeyOutput]
    def create_dfc_key(body, opts = {})
      data, _status_code, _headers = create_dfc_key_with_http_info(body, opts)
      data
    end

    # @param body [CreateDFCKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateDFCKeyOutput, Integer, Hash)>] CreateDFCKeyOutput data, response status code and response headers
    def create_dfc_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_dfc_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_dfc_key"
      end
      # resource path
      local_var_path = '/create-dfc-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateDFCKeyOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_dfc_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_dfc_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateDockerhubTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateDockerhubTargetOutput]
    def create_dockerhub_target(body, opts = {})
      data, _status_code, _headers = create_dockerhub_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateDockerhubTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateDockerhubTargetOutput, Integer, Hash)>] CreateDockerhubTargetOutput data, response status code and response headers
    def create_dockerhub_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_dockerhub_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_dockerhub_target"
      end
      # resource path
      local_var_path = '/create-dockerhub-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateDockerhubTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_dockerhub_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_dockerhub_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateDynamicSecret] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def create_dynamic_secret(body, opts = {})
      data, _status_code, _headers = create_dynamic_secret_with_http_info(body, opts)
      data
    end

    # @param body [CreateDynamicSecret] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def create_dynamic_secret_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_dynamic_secret ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_dynamic_secret"
      end
      # resource path
      local_var_path = '/create-dynamic-secret'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_dynamic_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_dynamic_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateEKSTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateEKSTargetOutput]
    def create_eks_target(body, opts = {})
      data, _status_code, _headers = create_eks_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateEKSTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateEKSTargetOutput, Integer, Hash)>] CreateEKSTargetOutput data, response status code and response headers
    def create_eks_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_eks_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_eks_target"
      end
      # resource path
      local_var_path = '/create-eks-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateEKSTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_eks_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_eks_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateESM] 
    # @param [Hash] opts the optional parameters
    # @return [CreateESMOutput]
    def create_esm(body, opts = {})
      data, _status_code, _headers = create_esm_with_http_info(body, opts)
      data
    end

    # @param body [CreateESM] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateESMOutput, Integer, Hash)>] CreateESMOutput data, response status code and response headers
    def create_esm_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_esm ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_esm"
      end
      # resource path
      local_var_path = '/create-esm'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateESMOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_esm",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_esm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateEventForwarder] 
    # @param [Hash] opts the optional parameters
    # @return [CreateEventForwarderOutput]
    def create_event_forwarder(body, opts = {})
      data, _status_code, _headers = create_event_forwarder_with_http_info(body, opts)
      data
    end

    # @param body [CreateEventForwarder] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateEventForwarderOutput, Integer, Hash)>] CreateEventForwarderOutput data, response status code and response headers
    def create_event_forwarder_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_event_forwarder ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_event_forwarder"
      end
      # resource path
      local_var_path = '/create-event-forwarder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateEventForwarderOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_event_forwarder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_event_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateGcpTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateGcpTargetOutput]
    def create_gcp_target(body, opts = {})
      data, _status_code, _headers = create_gcp_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateGcpTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateGcpTargetOutput, Integer, Hash)>] CreateGcpTargetOutput data, response status code and response headers
    def create_gcp_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_gcp_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_gcp_target"
      end
      # resource path
      local_var_path = '/create-gcp-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateGcpTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_gcp_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_gcp_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateGithubTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateGithubTargetOutput]
    def create_github_target(body, opts = {})
      data, _status_code, _headers = create_github_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateGithubTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateGithubTargetOutput, Integer, Hash)>] CreateGithubTargetOutput data, response status code and response headers
    def create_github_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_github_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_github_target"
      end
      # resource path
      local_var_path = '/create-github-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateGithubTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_github_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_github_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateGitlabTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateGitlabTargetOutput]
    def create_gitlab_target(body, opts = {})
      data, _status_code, _headers = create_gitlab_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateGitlabTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateGitlabTargetOutput, Integer, Hash)>] CreateGitlabTargetOutput data, response status code and response headers
    def create_gitlab_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_gitlab_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_gitlab_target"
      end
      # resource path
      local_var_path = '/create-gitlab-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateGitlabTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_gitlab_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_gitlab_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateGKETarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateGKETargetOutput]
    def create_gke_target(body, opts = {})
      data, _status_code, _headers = create_gke_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateGKETarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateGKETargetOutput, Integer, Hash)>] CreateGKETargetOutput data, response status code and response headers
    def create_gke_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_gke_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_gke_target"
      end
      # resource path
      local_var_path = '/create-gke-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateGKETargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_gke_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_gke_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateGlobalSignAtlasTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateGlobalSignAtlasTargetOutput]
    def create_global_sign_atlas_target(body, opts = {})
      data, _status_code, _headers = create_global_sign_atlas_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateGlobalSignAtlasTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateGlobalSignAtlasTargetOutput, Integer, Hash)>] CreateGlobalSignAtlasTargetOutput data, response status code and response headers
    def create_global_sign_atlas_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_global_sign_atlas_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_global_sign_atlas_target"
      end
      # resource path
      local_var_path = '/create-globalsign-atlas-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateGlobalSignAtlasTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_global_sign_atlas_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_global_sign_atlas_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateGlobalSignTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateGlobalSignTargetOutput]
    def create_global_sign_target(body, opts = {})
      data, _status_code, _headers = create_global_sign_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateGlobalSignTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateGlobalSignTargetOutput, Integer, Hash)>] CreateGlobalSignTargetOutput data, response status code and response headers
    def create_global_sign_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_global_sign_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_global_sign_target"
      end
      # resource path
      local_var_path = '/create-globalsign-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateGlobalSignTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_global_sign_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_global_sign_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateGodaddyTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateGodaddyTargetOutput]
    def create_godaddy_target(body, opts = {})
      data, _status_code, _headers = create_godaddy_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateGodaddyTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateGodaddyTargetOutput, Integer, Hash)>] CreateGodaddyTargetOutput data, response status code and response headers
    def create_godaddy_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_godaddy_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_godaddy_target"
      end
      # resource path
      local_var_path = '/create-godaddy-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateGodaddyTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_godaddy_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_godaddy_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateGroup] 
    # @param [Hash] opts the optional parameters
    # @return [CreateGroupOutput]
    def create_group(body, opts = {})
      data, _status_code, _headers = create_group_with_http_info(body, opts)
      data
    end

    # @param body [CreateGroup] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateGroupOutput, Integer, Hash)>] CreateGroupOutput data, response status code and response headers
    def create_group_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_group ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_group"
      end
      # resource path
      local_var_path = '/create-group'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateGroupOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateHashiVaultTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateHashiVaultTargetOutput]
    def create_hashi_vault_target(body, opts = {})
      data, _status_code, _headers = create_hashi_vault_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateHashiVaultTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateHashiVaultTargetOutput, Integer, Hash)>] CreateHashiVaultTargetOutput data, response status code and response headers
    def create_hashi_vault_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_hashi_vault_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_hashi_vault_target"
      end
      # resource path
      local_var_path = '/create-hashi-vault-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateHashiVaultTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_hashi_vault_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_hashi_vault_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateKey] 
    # @param [Hash] opts the optional parameters
    # @return [CreateKeyOutput]
    def create_key(body, opts = {})
      data, _status_code, _headers = create_key_with_http_info(body, opts)
      data
    end

    # @param body [CreateKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateKeyOutput, Integer, Hash)>] CreateKeyOutput data, response status code and response headers
    def create_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_key"
      end
      # resource path
      local_var_path = '/create-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateKeyOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateLinkedTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateLinkedTargetOutput]
    def create_linked_target(body, opts = {})
      data, _status_code, _headers = create_linked_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateLinkedTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateLinkedTargetOutput, Integer, Hash)>] CreateLinkedTargetOutput data, response status code and response headers
    def create_linked_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_linked_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_linked_target"
      end
      # resource path
      local_var_path = '/create-linked-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateLinkedTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_linked_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_linked_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateNativeK8STarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateNativeK8STargetOutput]
    def create_native_k8_s_target(body, opts = {})
      data, _status_code, _headers = create_native_k8_s_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateNativeK8STarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateNativeK8STargetOutput, Integer, Hash)>] CreateNativeK8STargetOutput data, response status code and response headers
    def create_native_k8_s_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_native_k8_s_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_native_k8_s_target"
      end
      # resource path
      local_var_path = '/create-k8s-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateNativeK8STargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_native_k8_s_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_native_k8_s_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateOidcApp] 
    # @param [Hash] opts the optional parameters
    # @return [CreateOidcAppOutput]
    def create_oidc_app(body, opts = {})
      data, _status_code, _headers = create_oidc_app_with_http_info(body, opts)
      data
    end

    # @param body [CreateOidcApp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateOidcAppOutput, Integer, Hash)>] CreateOidcAppOutput data, response status code and response headers
    def create_oidc_app_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_oidc_app ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_oidc_app"
      end
      # resource path
      local_var_path = '/create-oidc-app'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateOidcAppOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_oidc_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_oidc_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreatePingTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreatePingTargetOutput]
    def create_ping_target(body, opts = {})
      data, _status_code, _headers = create_ping_target_with_http_info(body, opts)
      data
    end

    # @param body [CreatePingTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePingTargetOutput, Integer, Hash)>] CreatePingTargetOutput data, response status code and response headers
    def create_ping_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_ping_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_ping_target"
      end
      # resource path
      local_var_path = '/create-ping-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreatePingTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_ping_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_ping_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreatePKICertIssuer] 
    # @param [Hash] opts the optional parameters
    # @return [CreatePKICertIssuerOutput]
    def create_pki_cert_issuer(body, opts = {})
      data, _status_code, _headers = create_pki_cert_issuer_with_http_info(body, opts)
      data
    end

    # @param body [CreatePKICertIssuer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreatePKICertIssuerOutput, Integer, Hash)>] CreatePKICertIssuerOutput data, response status code and response headers
    def create_pki_cert_issuer_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_pki_cert_issuer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_pki_cert_issuer"
      end
      # resource path
      local_var_path = '/create-pki-cert-issuer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreatePKICertIssuerOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_pki_cert_issuer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_pki_cert_issuer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateRabbitMQTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateRabbitMQTargetOutput]
    def create_rabbit_mq_target(body, opts = {})
      data, _status_code, _headers = create_rabbit_mq_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateRabbitMQTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateRabbitMQTargetOutput, Integer, Hash)>] CreateRabbitMQTargetOutput data, response status code and response headers
    def create_rabbit_mq_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_rabbit_mq_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_rabbit_mq_target"
      end
      # resource path
      local_var_path = '/create-rabbitmq-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateRabbitMQTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_rabbit_mq_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_rabbit_mq_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateRole] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def create_role(body, opts = {})
      data, _status_code, _headers = create_role_with_http_info(body, opts)
      data
    end

    # @param body [CreateRole] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def create_role_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_role ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_role"
      end
      # resource path
      local_var_path = '/create-role'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateRotatedSecret] 
    # @param [Hash] opts the optional parameters
    # @return [CreateRotatedSecretOutput]
    def create_rotated_secret(body, opts = {})
      data, _status_code, _headers = create_rotated_secret_with_http_info(body, opts)
      data
    end

    # @param body [CreateRotatedSecret] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateRotatedSecretOutput, Integer, Hash)>] CreateRotatedSecretOutput data, response status code and response headers
    def create_rotated_secret_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_rotated_secret ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_rotated_secret"
      end
      # resource path
      local_var_path = '/create-rotated-secret'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateRotatedSecretOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_rotated_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_rotated_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateSalesforceTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateSalesforceTargetOutput]
    def create_salesforce_target(body, opts = {})
      data, _status_code, _headers = create_salesforce_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateSalesforceTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSalesforceTargetOutput, Integer, Hash)>] CreateSalesforceTargetOutput data, response status code and response headers
    def create_salesforce_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_salesforce_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_salesforce_target"
      end
      # resource path
      local_var_path = '/create-salesforce-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateSalesforceTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_salesforce_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_salesforce_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateSecret] 
    # @param [Hash] opts the optional parameters
    # @return [CreateSecretOutput]
    def create_secret(body, opts = {})
      data, _status_code, _headers = create_secret_with_http_info(body, opts)
      data
    end

    # @param body [CreateSecret] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSecretOutput, Integer, Hash)>] CreateSecretOutput data, response status code and response headers
    def create_secret_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_secret ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_secret"
      end
      # resource path
      local_var_path = '/create-secret'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateSecretOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateSSHCertIssuer] 
    # @param [Hash] opts the optional parameters
    # @return [CreateSSHCertIssuerOutput]
    def create_ssh_cert_issuer(body, opts = {})
      data, _status_code, _headers = create_ssh_cert_issuer_with_http_info(body, opts)
      data
    end

    # @param body [CreateSSHCertIssuer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSSHCertIssuerOutput, Integer, Hash)>] CreateSSHCertIssuerOutput data, response status code and response headers
    def create_ssh_cert_issuer_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_ssh_cert_issuer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_ssh_cert_issuer"
      end
      # resource path
      local_var_path = '/create-ssh-cert-issuer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateSSHCertIssuerOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_ssh_cert_issuer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_ssh_cert_issuer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateSSHTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateSSHTargetOutput]
    def create_ssh_target(body, opts = {})
      data, _status_code, _headers = create_ssh_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateSSHTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateSSHTargetOutput, Integer, Hash)>] CreateSSHTargetOutput data, response status code and response headers
    def create_ssh_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_ssh_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_ssh_target"
      end
      # resource path
      local_var_path = '/create-ssh-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateSSHTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_ssh_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_ssh_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateTokenizer] 
    # @param [Hash] opts the optional parameters
    # @return [CreateTokenizerOutput]
    def create_tokenizer(body, opts = {})
      data, _status_code, _headers = create_tokenizer_with_http_info(body, opts)
      data
    end

    # @param body [CreateTokenizer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateTokenizerOutput, Integer, Hash)>] CreateTokenizerOutput data, response status code and response headers
    def create_tokenizer_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_tokenizer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_tokenizer"
      end
      # resource path
      local_var_path = '/create-tokenizer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateTokenizerOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_tokenizer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_tokenizer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateUSC] 
    # @param [Hash] opts the optional parameters
    # @return [CreateUSCOutput]
    def create_usc(body, opts = {})
      data, _status_code, _headers = create_usc_with_http_info(body, opts)
      data
    end

    # @param body [CreateUSC] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateUSCOutput, Integer, Hash)>] CreateUSCOutput data, response status code and response headers
    def create_usc_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_usc ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_usc"
      end
      # resource path
      local_var_path = '/create-usc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUSCOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_usc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_usc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateUserEvent] 
    # @param [Hash] opts the optional parameters
    # @return [CreateUserEventOutput]
    def create_user_event(body, opts = {})
      data, _status_code, _headers = create_user_event_with_http_info(body, opts)
      data
    end

    # @param body [CreateUserEvent] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateUserEventOutput, Integer, Hash)>] CreateUserEventOutput data, response status code and response headers
    def create_user_event_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_user_event ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_user_event"
      end
      # resource path
      local_var_path = '/create-user-event'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateUserEventOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_user_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_user_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateWebTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateWebTargetOutput]
    def create_web_target(body, opts = {})
      data, _status_code, _headers = create_web_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateWebTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateWebTargetOutput, Integer, Hash)>] CreateWebTargetOutput data, response status code and response headers
    def create_web_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_web_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_web_target"
      end
      # resource path
      local_var_path = '/create-web-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateWebTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_web_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_web_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateWindowsTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateWindowsTargetOutput]
    def create_windows_target(body, opts = {})
      data, _status_code, _headers = create_windows_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateWindowsTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateWindowsTargetOutput, Integer, Hash)>] CreateWindowsTargetOutput data, response status code and response headers
    def create_windows_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_windows_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_windows_target"
      end
      # resource path
      local_var_path = '/create-windows-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateWindowsTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_windows_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_windows_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateZeroSSLTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateZeroSSLTargetOutput]
    def create_zero_ssl_target(body, opts = {})
      data, _status_code, _headers = create_zero_ssl_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateZeroSSLTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateZeroSSLTargetOutput, Integer, Hash)>] CreateZeroSSLTargetOutput data, response status code and response headers
    def create_zero_ssl_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.create_zero_ssl_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.create_zero_ssl_target"
      end
      # resource path
      local_var_path = '/create-zerossl-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateZeroSSLTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.create_zero_ssl_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#create_zero_ssl_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [CreateLdapTarget] 
    # @param [Hash] opts the optional parameters
    # @return [CreateLdapTargetOutput]
    def createldap_target(body, opts = {})
      data, _status_code, _headers = createldap_target_with_http_info(body, opts)
      data
    end

    # @param body [CreateLdapTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CreateLdapTargetOutput, Integer, Hash)>] CreateLdapTargetOutput data, response status code and response headers
    def createldap_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.createldap_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.createldap_target"
      end
      # resource path
      local_var_path = '/create-ldap-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CreateLdapTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.createldap_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#createldap_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [Decrypt] 
    # @param [Hash] opts the optional parameters
    # @return [DecryptOutput]
    def decrypt(body, opts = {})
      data, _status_code, _headers = decrypt_with_http_info(body, opts)
      data
    end

    # @param body [Decrypt] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DecryptOutput, Integer, Hash)>] DecryptOutput data, response status code and response headers
    def decrypt_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.decrypt ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.decrypt"
      end
      # resource path
      local_var_path = '/decrypt'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DecryptOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.decrypt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#decrypt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [Array<BatchEncryptionRequestLine>] 
    # @param [Hash] opts the optional parameters
    # @return [DecryptOutput]
    def decrypt_batch(body, opts = {})
      data, _status_code, _headers = decrypt_batch_with_http_info(body, opts)
      data
    end

    # @param body [Array<BatchEncryptionRequestLine>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DecryptOutput, Integer, Hash)>] DecryptOutput data, response status code and response headers
    def decrypt_batch_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.decrypt_batch ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.decrypt_batch"
      end
      # resource path
      local_var_path = '/decrypt-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DecryptOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.decrypt_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#decrypt_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DecryptGPG] 
    # @param [Hash] opts the optional parameters
    # @return [DecryptGPGOutput]
    def decrypt_gpg(body, opts = {})
      data, _status_code, _headers = decrypt_gpg_with_http_info(body, opts)
      data
    end

    # @param body [DecryptGPG] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DecryptGPGOutput, Integer, Hash)>] DecryptGPGOutput data, response status code and response headers
    def decrypt_gpg_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.decrypt_gpg ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.decrypt_gpg"
      end
      # resource path
      local_var_path = '/decrypt-gpg'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DecryptGPGOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.decrypt_gpg",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#decrypt_gpg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DecryptPKCS1] 
    # @param [Hash] opts the optional parameters
    # @return [DecryptPKCS1Output]
    def decrypt_pkcs1(body, opts = {})
      data, _status_code, _headers = decrypt_pkcs1_with_http_info(body, opts)
      data
    end

    # @param body [DecryptPKCS1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DecryptPKCS1Output, Integer, Hash)>] DecryptPKCS1Output data, response status code and response headers
    def decrypt_pkcs1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.decrypt_pkcs1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.decrypt_pkcs1"
      end
      # resource path
      local_var_path = '/decrypt-pkcs1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DecryptPKCS1Output'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.decrypt_pkcs1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#decrypt_pkcs1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DecryptWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [DecryptWithClassicKeyOutput]
    def decrypt_with_classic_key(body, opts = {})
      data, _status_code, _headers = decrypt_with_classic_key_with_http_info(body, opts)
      data
    end

    # @param body [DecryptWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DecryptWithClassicKeyOutput, Integer, Hash)>] DecryptWithClassicKeyOutput data, response status code and response headers
    def decrypt_with_classic_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.decrypt_with_classic_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.decrypt_with_classic_key"
      end
      # resource path
      local_var_path = '/decrypt-with-classic-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DecryptWithClassicKeyOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.decrypt_with_classic_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#decrypt_with_classic_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteAuthMethod] 
    # @param [Hash] opts the optional parameters
    # @return [DeleteAuthMethodOutput]
    def delete_auth_method(body, opts = {})
      data, _status_code, _headers = delete_auth_method_with_http_info(body, opts)
      data
    end

    # @param body [DeleteAuthMethod] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteAuthMethodOutput, Integer, Hash)>] DeleteAuthMethodOutput data, response status code and response headers
    def delete_auth_method_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_auth_method ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_auth_method"
      end
      # resource path
      local_var_path = '/delete-auth-method'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteAuthMethodOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_auth_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_auth_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteAuthMethods] 
    # @param [Hash] opts the optional parameters
    # @return [DeleteAuthMethodsOutput]
    def delete_auth_methods(body, opts = {})
      data, _status_code, _headers = delete_auth_methods_with_http_info(body, opts)
      data
    end

    # @param body [DeleteAuthMethods] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteAuthMethodsOutput, Integer, Hash)>] DeleteAuthMethodsOutput data, response status code and response headers
    def delete_auth_methods_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_auth_methods ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_auth_methods"
      end
      # resource path
      local_var_path = '/delete-auth-methods'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteAuthMethodsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_auth_methods",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_auth_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteEventForwarder] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_event_forwarder(body, opts = {})
      data, _status_code, _headers = delete_event_forwarder_with_http_info(body, opts)
      data
    end

    # @param body [DeleteEventForwarder] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_event_forwarder_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_event_forwarder ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_event_forwarder"
      end
      # resource path
      local_var_path = '/delete-event-forwarder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_event_forwarder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_event_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteGatewayAllowedAccessId] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_gateway_allowed_access_id(body, opts = {})
      data, _status_code, _headers = delete_gateway_allowed_access_id_with_http_info(body, opts)
      data
    end

    # @param body [DeleteGatewayAllowedAccessId] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_gateway_allowed_access_id_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_gateway_allowed_access_id ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_gateway_allowed_access_id"
      end
      # resource path
      local_var_path = '/gateway-delete-allowed-management-access'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_gateway_allowed_access_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_gateway_allowed_access_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteGroup] 
    # @param [Hash] opts the optional parameters
    # @return [DeleteGroupOutput]
    def delete_group(body, opts = {})
      data, _status_code, _headers = delete_group_with_http_info(body, opts)
      data
    end

    # @param body [DeleteGroup] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteGroupOutput, Integer, Hash)>] DeleteGroupOutput data, response status code and response headers
    def delete_group_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_group ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_group"
      end
      # resource path
      local_var_path = '/delete-group'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteGroupOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteGwCluster] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_gw_cluster(body, opts = {})
      data, _status_code, _headers = delete_gw_cluster_with_http_info(body, opts)
      data
    end

    # @param body [DeleteGwCluster] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_gw_cluster_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_gw_cluster ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_gw_cluster"
      end
      # resource path
      local_var_path = '/delete-gateway-cluster'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_gw_cluster",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_gw_cluster\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteItem] 
    # @param [Hash] opts the optional parameters
    # @return [DeleteItemOutput]
    def delete_item(body, opts = {})
      data, _status_code, _headers = delete_item_with_http_info(body, opts)
      data
    end

    # @param body [DeleteItem] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteItemOutput, Integer, Hash)>] DeleteItemOutput data, response status code and response headers
    def delete_item_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_item ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_item"
      end
      # resource path
      local_var_path = '/delete-item'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteItemOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteItems] 
    # @param [Hash] opts the optional parameters
    # @return [DeleteItemsOutput]
    def delete_items(body, opts = {})
      data, _status_code, _headers = delete_items_with_http_info(body, opts)
      data
    end

    # @param body [DeleteItems] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteItemsOutput, Integer, Hash)>] DeleteItemsOutput data, response status code and response headers
    def delete_items_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_items ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_items"
      end
      # resource path
      local_var_path = '/delete-items'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteItemsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteRole] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_role(body, opts = {})
      data, _status_code, _headers = delete_role_with_http_info(body, opts)
      data
    end

    # @param body [DeleteRole] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_role_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_role ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_role"
      end
      # resource path
      local_var_path = '/delete-role'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteRoleAssociation] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_role_association(body, opts = {})
      data, _status_code, _headers = delete_role_association_with_http_info(body, opts)
      data
    end

    # @param body [DeleteRoleAssociation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_role_association_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_role_association ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_role_association"
      end
      # resource path
      local_var_path = '/delete-assoc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_role_association",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_role_association\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteRoleRule] 
    # @param [Hash] opts the optional parameters
    # @return [DeleteRoleRuleOutput]
    def delete_role_rule(body, opts = {})
      data, _status_code, _headers = delete_role_rule_with_http_info(body, opts)
      data
    end

    # @param body [DeleteRoleRule] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeleteRoleRuleOutput, Integer, Hash)>] DeleteRoleRuleOutput data, response status code and response headers
    def delete_role_rule_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_role_rule ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_role_rule"
      end
      # resource path
      local_var_path = '/delete-role-rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeleteRoleRuleOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_role_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_role_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteRoles] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_roles(body, opts = {})
      data, _status_code, _headers = delete_roles_with_http_info(body, opts)
      data
    end

    # @param body [DeleteRoles] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_roles_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_roles ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_roles"
      end
      # resource path
      local_var_path = '/delete-roles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_roles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_target(body, opts = {})
      data, _status_code, _headers = delete_target_with_http_info(body, opts)
      data
    end

    # @param body [DeleteTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_target"
      end
      # resource path
      local_var_path = '/delete-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteTargetAssociation] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_target_association(body, opts = {})
      data, _status_code, _headers = delete_target_association_with_http_info(body, opts)
      data
    end

    # @param body [DeleteTargetAssociation] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_target_association_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_target_association ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_target_association"
      end
      # resource path
      local_var_path = '/delete-assoc-target-item'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_target_association",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_target_association\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeleteTargets] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_targets(body, opts = {})
      data, _status_code, _headers = delete_targets_with_http_info(body, opts)
      data
    end

    # @param body [DeleteTargets] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_targets_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.delete_targets ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.delete_targets"
      end
      # resource path
      local_var_path = '/delete-targets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.delete_targets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#delete_targets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DeriveKey] 
    # @param [Hash] opts the optional parameters
    # @return [DeriveKeyOutput]
    def derive_key(body, opts = {})
      data, _status_code, _headers = derive_key_with_http_info(body, opts)
      data
    end

    # @param body [DeriveKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DeriveKeyOutput, Integer, Hash)>] DeriveKeyOutput data, response status code and response headers
    def derive_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.derive_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.derive_key"
      end
      # resource path
      local_var_path = '/derive-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DeriveKeyOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.derive_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#derive_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DescribeAssoc] 
    # @param [Hash] opts the optional parameters
    # @return [RoleAssociationDetails]
    def describe_assoc(body, opts = {})
      data, _status_code, _headers = describe_assoc_with_http_info(body, opts)
      data
    end

    # @param body [DescribeAssoc] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RoleAssociationDetails, Integer, Hash)>] RoleAssociationDetails data, response status code and response headers
    def describe_assoc_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.describe_assoc ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.describe_assoc"
      end
      # resource path
      local_var_path = '/describe-role-am-assoc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RoleAssociationDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.describe_assoc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#describe_assoc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DescribeItem] 
    # @param [Hash] opts the optional parameters
    # @return [Item]
    def describe_item(body, opts = {})
      data, _status_code, _headers = describe_item_with_http_info(body, opts)
      data
    end

    # @param body [DescribeItem] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Item, Integer, Hash)>] Item data, response status code and response headers
    def describe_item_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.describe_item ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.describe_item"
      end
      # resource path
      local_var_path = '/describe-item'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Item'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.describe_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#describe_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DescribePermissions] 
    # @param [Hash] opts the optional parameters
    # @return [DescribePermissionsOutput]
    def describe_permissions(body, opts = {})
      data, _status_code, _headers = describe_permissions_with_http_info(body, opts)
      data
    end

    # @param body [DescribePermissions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DescribePermissionsOutput, Integer, Hash)>] DescribePermissionsOutput data, response status code and response headers
    def describe_permissions_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.describe_permissions ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.describe_permissions"
      end
      # resource path
      local_var_path = '/describe-permissions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DescribePermissionsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.describe_permissions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#describe_permissions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DescribeSubClaims] 
    # @param [Hash] opts the optional parameters
    # @return [DescribeSubClaimsOutput]
    def describe_sub_claims(body, opts = {})
      data, _status_code, _headers = describe_sub_claims_with_http_info(body, opts)
      data
    end

    # @param body [DescribeSubClaims] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DescribeSubClaimsOutput, Integer, Hash)>] DescribeSubClaimsOutput data, response status code and response headers
    def describe_sub_claims_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.describe_sub_claims ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.describe_sub_claims"
      end
      # resource path
      local_var_path = '/describe-sub-claims'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DescribeSubClaimsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.describe_sub_claims",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#describe_sub_claims\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [Detokenize] 
    # @param [Hash] opts the optional parameters
    # @return [DetokenizeOutput]
    def detokenize(body, opts = {})
      data, _status_code, _headers = detokenize_with_http_info(body, opts)
      data
    end

    # @param body [Detokenize] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DetokenizeOutput, Integer, Hash)>] DetokenizeOutput data, response status code and response headers
    def detokenize_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.detokenize ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.detokenize"
      end
      # resource path
      local_var_path = '/detokenize'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DetokenizeOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.detokenize",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#detokenize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateArtifactory] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_artifactory(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_artifactory_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateArtifactory] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_artifactory_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_artifactory ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_artifactory"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-artifactory'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_artifactory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_artifactory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateAws] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_aws(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_aws_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateAws] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_aws_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_aws ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_aws"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-aws'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_aws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_aws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateAzure] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_azure(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_azure_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateAzure] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_azure_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_azure ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_azure"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-azure'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_azure",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_azure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateCassandra] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_cassandra(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_cassandra_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateCassandra] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_cassandra_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_cassandra ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_cassandra"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-cassandra'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_cassandra",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_cassandra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DynamicSecretCreateCustom] :body 
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_custom(opts = {})
      data, _status_code, _headers = dynamic_secret_create_custom_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DynamicSecretCreateCustom] :body 
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_custom_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_custom ...'
      end
      # resource path
      local_var_path = '/dynamic-secret-create-custom'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_custom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_custom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_dockerhub(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_dockerhub_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_dockerhub_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_dockerhub ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_dockerhub"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-dockerhub'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_dockerhub",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_dockerhub\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateEks] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_eks(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_eks_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateEks] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_eks_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_eks ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_eks"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-eks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_eks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_eks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_gcp(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_gcp_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_gcp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_gcp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_gcp"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-gcp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_gcp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_gcp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateGithub] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_github(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_github_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateGithub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_github_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_github ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_github"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-github'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_github",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_github\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateGitlab] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_gitlab(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_gitlab_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateGitlab] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_gitlab_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_gitlab ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_gitlab"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-gitlab'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_gitlab",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_gitlab\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateGke] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_gke(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_gke_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateGke] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_gke_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_gke ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_gke"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-gke'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_gke",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_gke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateGoogleWorkspace] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_google_workspace(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_google_workspace_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateGoogleWorkspace] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_google_workspace_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_google_workspace ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_google_workspace"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-google-workspace'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_google_workspace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_google_workspace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateHanaDb] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_hana_db(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_hana_db_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateHanaDb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_hana_db_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_hana_db ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_hana_db"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-hanadb'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_hana_db",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_hana_db\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateK8s] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_k8s(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_k8s_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateK8s] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_k8s_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_k8s ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_k8s"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-k8s'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_k8s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_k8s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_ldap(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_ldap_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_ldap_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_ldap ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_ldap"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-ldap'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_ldap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_ldap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateMongoDb] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_mongo_db(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_mongo_db_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateMongoDb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_mongo_db_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_mongo_db ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_mongo_db"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-mongo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_mongo_db",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_mongo_db\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateMsSql] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_ms_sql(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_ms_sql_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateMsSql] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_ms_sql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_ms_sql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_ms_sql"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-mssql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_ms_sql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_ms_sql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateMySql] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_my_sql(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_my_sql_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateMySql] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_my_sql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_my_sql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_my_sql"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-mysql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_my_sql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_my_sql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateOracleDb] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_oracle_db(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_oracle_db_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateOracleDb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_oracle_db_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_oracle_db ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_oracle_db"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-oracle'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_oracle_db",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_oracle_db\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreatePing] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_ping(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_ping_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreatePing] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_ping_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_ping ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_ping"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-ping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_ping",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_ping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreatePostgreSql] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_postgre_sql(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_postgre_sql_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreatePostgreSql] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_postgre_sql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_postgre_sql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_postgre_sql"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-postgresql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_postgre_sql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_postgre_sql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateRabbitMq] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_rabbit_mq(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_rabbit_mq_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateRabbitMq] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_rabbit_mq_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_rabbit_mq ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_rabbit_mq"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-rabbitmq'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_rabbit_mq",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_rabbit_mq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateRdp] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_rdp(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_rdp_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateRdp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_rdp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_rdp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_rdp"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-rdp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_rdp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_rdp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateRedis] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_redis(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_redis_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateRedis] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_redis_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_redis ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_redis"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-redis'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_redis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_redis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateRedshift] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_redshift(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_redshift_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateRedshift] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_redshift_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_redshift ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_redshift"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-redshift'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_redshift",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_redshift\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateSnowflake] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_snowflake(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_snowflake_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateSnowflake] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_snowflake_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_snowflake ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_snowflake"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-snowflake'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_snowflake",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_snowflake\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretCreateVenafi] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretCreateOutput]
    def dynamic_secret_create_venafi(body, opts = {})
      data, _status_code, _headers = dynamic_secret_create_venafi_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretCreateVenafi] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretCreateOutput, Integer, Hash)>] DynamicSecretCreateOutput data, response status code and response headers
    def dynamic_secret_create_venafi_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_create_venafi ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_create_venafi"
      end
      # resource path
      local_var_path = '/dynamic-secret-create-venafi'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_create_venafi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_create_venafi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretDelete] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretDeleteOutput]
    def dynamic_secret_delete(body, opts = {})
      data, _status_code, _headers = dynamic_secret_delete_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretDelete] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretDeleteOutput, Integer, Hash)>] DynamicSecretDeleteOutput data, response status code and response headers
    def dynamic_secret_delete_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_delete ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_delete"
      end
      # resource path
      local_var_path = '/dynamic-secret-delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretDeleteOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretGet] 
    # @param [Hash] opts the optional parameters
    # @return [DSProducerDetails]
    def dynamic_secret_get(body, opts = {})
      data, _status_code, _headers = dynamic_secret_get_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretGet] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DSProducerDetails, Integer, Hash)>] DSProducerDetails data, response status code and response headers
    def dynamic_secret_get_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_get ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_get"
      end
      # resource path
      local_var_path = '/dynamic-secret-get'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DSProducerDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretGetValue] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, String>]
    def dynamic_secret_get_value(body, opts = {})
      data, _status_code, _headers = dynamic_secret_get_value_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretGetValue] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, String>, Integer, Hash)>] Hash<String, String> data, response status code and response headers
    def dynamic_secret_get_value_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_get_value ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_get_value"
      end
      # resource path
      local_var_path = '/dynamic-secret-get-value'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_get_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_get_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretList] 
    # @param [Hash] opts the optional parameters
    # @return [GetProducersListReplyObj]
    def dynamic_secret_list(body, opts = {})
      data, _status_code, _headers = dynamic_secret_list_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretList] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetProducersListReplyObj, Integer, Hash)>] GetProducersListReplyObj data, response status code and response headers
    def dynamic_secret_list_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_list ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_list"
      end
      # resource path
      local_var_path = '/dynamic-secret-list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetProducersListReplyObj'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretTmpCredsDelete] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dynamic_secret_tmp_creds_delete(body, opts = {})
      dynamic_secret_tmp_creds_delete_with_http_info(body, opts)
      nil
    end

    # @param body [DynamicSecretTmpCredsDelete] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def dynamic_secret_tmp_creds_delete_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_tmp_creds_delete ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_tmp_creds_delete"
      end
      # resource path
      local_var_path = '/dynamic-secret-tmp-creds-delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_tmp_creds_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_tmp_creds_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretTmpCredsGet] 
    # @param [Hash] opts the optional parameters
    # @return [Array<TmpUserData>]
    def dynamic_secret_tmp_creds_get(body, opts = {})
      data, _status_code, _headers = dynamic_secret_tmp_creds_get_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretTmpCredsGet] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TmpUserData>, Integer, Hash)>] Array<TmpUserData> data, response status code and response headers
    def dynamic_secret_tmp_creds_get_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_tmp_creds_get ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_tmp_creds_get"
      end
      # resource path
      local_var_path = '/dynamic-secret-tmp-creds-Get'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TmpUserData>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_tmp_creds_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_tmp_creds_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretTmpCredsUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def dynamic_secret_tmp_creds_update(body, opts = {})
      dynamic_secret_tmp_creds_update_with_http_info(body, opts)
      nil
    end

    # @param body [DynamicSecretTmpCredsUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def dynamic_secret_tmp_creds_update_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_tmp_creds_update ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_tmp_creds_update"
      end
      # resource path
      local_var_path = '/dynamic-secret-tmp-creds-update'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_tmp_creds_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_tmp_creds_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateArtifactory] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_artifactory(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_artifactory_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateArtifactory] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_artifactory_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_artifactory ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_artifactory"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-artifactory'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_artifactory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_artifactory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateAws] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_aws(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_aws_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateAws] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_aws_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_aws ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_aws"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-aws'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_aws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_aws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateAzure] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_azure(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_azure_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateAzure] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_azure_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_azure ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_azure"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-azure'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_azure",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_azure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateCassandra] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_cassandra(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_cassandra_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateCassandra] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_cassandra_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_cassandra ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_cassandra"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-cassandra'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_cassandra",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_cassandra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DynamicSecretUpdateCustom] :body 
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_custom(opts = {})
      data, _status_code, _headers = dynamic_secret_update_custom_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [DynamicSecretUpdateCustom] :body 
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_custom_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_custom ...'
      end
      # resource path
      local_var_path = '/dynamic-secret-update-custom'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_custom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_custom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_dockerhub(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_dockerhub_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_dockerhub_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_dockerhub ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_dockerhub"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-dockerhub'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_dockerhub",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_dockerhub\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateEks] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_eks(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_eks_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateEks] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_eks_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_eks ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_eks"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-eks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_eks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_eks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_gcp(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_gcp_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_gcp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_gcp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_gcp"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-gcp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_gcp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_gcp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateGithub] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_github(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_github_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateGithub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_github_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_github ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_github"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-github'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_github",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_github\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateGitlab] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_gitlab(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_gitlab_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateGitlab] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_gitlab_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_gitlab ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_gitlab"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-gitlab'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_gitlab",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_gitlab\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateGke] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_gke(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_gke_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateGke] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_gke_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_gke ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_gke"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-gke'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_gke",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_gke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateGoogleWorkspace] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_google_workspace(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_google_workspace_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateGoogleWorkspace] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_google_workspace_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_google_workspace ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_google_workspace"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-google-workspace'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_google_workspace",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_google_workspace\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateHanaDb] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_hana_db(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_hana_db_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateHanaDb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_hana_db_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_hana_db ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_hana_db"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-hana'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_hana_db",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_hana_db\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateK8s] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_k8s(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_k8s_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateK8s] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_k8s_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_k8s ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_k8s"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-k8s'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_k8s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_k8s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_ldap(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_ldap_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_ldap_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_ldap ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_ldap"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-ldap'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_ldap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_ldap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateMongoDb] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_mongo_db(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_mongo_db_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateMongoDb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_mongo_db_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_mongo_db ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_mongo_db"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-mongo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_mongo_db",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_mongo_db\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateMsSql] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_ms_sql(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_ms_sql_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateMsSql] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_ms_sql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_ms_sql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_ms_sql"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-mssql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_ms_sql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_ms_sql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateMySql] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_my_sql(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_my_sql_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateMySql] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_my_sql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_my_sql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_my_sql"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-mysql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_my_sql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_my_sql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateOracleDb] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_oracle_db(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_oracle_db_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateOracleDb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_oracle_db_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_oracle_db ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_oracle_db"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-oracle'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_oracle_db",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_oracle_db\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdatePing] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_ping(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_ping_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdatePing] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_ping_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_ping ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_ping"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-ping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_ping",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_ping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdatePostgreSql] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_postgre_sql(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_postgre_sql_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdatePostgreSql] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_postgre_sql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_postgre_sql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_postgre_sql"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-postgresql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_postgre_sql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_postgre_sql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateRabbitMq] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_rabbit_mq(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_rabbit_mq_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateRabbitMq] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_rabbit_mq_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_rabbit_mq ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_rabbit_mq"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-rabbitmq'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_rabbit_mq",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_rabbit_mq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateRdp] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_rdp(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_rdp_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateRdp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_rdp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_rdp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_rdp"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-rdp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_rdp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_rdp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateRedis] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_redis(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_redis_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateRedis] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_redis_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_redis ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_redis"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-redis'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_redis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_redis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateRedshift] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_redshift(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_redshift_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateRedshift] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_redshift_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_redshift ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_redshift"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-redshift'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_redshift",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_redshift\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateSnowflake] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_snowflake(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_snowflake_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateSnowflake] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_snowflake_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_snowflake ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_snowflake"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-snowflake'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_snowflake",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_snowflake\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [DynamicSecretUpdateVenafi] 
    # @param [Hash] opts the optional parameters
    # @return [DynamicSecretUpdateOutput]
    def dynamic_secret_update_venafi(body, opts = {})
      data, _status_code, _headers = dynamic_secret_update_venafi_with_http_info(body, opts)
      data
    end

    # @param body [DynamicSecretUpdateVenafi] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DynamicSecretUpdateOutput, Integer, Hash)>] DynamicSecretUpdateOutput data, response status code and response headers
    def dynamic_secret_update_venafi_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.dynamic_secret_update_venafi ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.dynamic_secret_update_venafi"
      end
      # resource path
      local_var_path = '/dynamic-secret-update-venafi'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DynamicSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.dynamic_secret_update_venafi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#dynamic_secret_update_venafi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [Encrypt] 
    # @param [Hash] opts the optional parameters
    # @return [EncryptOutput]
    def encrypt(body, opts = {})
      data, _status_code, _headers = encrypt_with_http_info(body, opts)
      data
    end

    # @param body [Encrypt] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EncryptOutput, Integer, Hash)>] EncryptOutput data, response status code and response headers
    def encrypt_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.encrypt ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.encrypt"
      end
      # resource path
      local_var_path = '/encrypt'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EncryptOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.encrypt",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#encrypt\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [Array<BatchEncryptionRequestLine>] 
    # @param [Hash] opts the optional parameters
    # @return [EncryptOutput]
    def encrypt_batch(body, opts = {})
      data, _status_code, _headers = encrypt_batch_with_http_info(body, opts)
      data
    end

    # @param body [Array<BatchEncryptionRequestLine>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EncryptOutput, Integer, Hash)>] EncryptOutput data, response status code and response headers
    def encrypt_batch_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.encrypt_batch ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.encrypt_batch"
      end
      # resource path
      local_var_path = '/encrypt-batch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EncryptOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.encrypt_batch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#encrypt_batch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EncryptGPG] 
    # @param [Hash] opts the optional parameters
    # @return [EncryptGPGOutput]
    def encrypt_gpg(body, opts = {})
      data, _status_code, _headers = encrypt_gpg_with_http_info(body, opts)
      data
    end

    # @param body [EncryptGPG] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EncryptGPGOutput, Integer, Hash)>] EncryptGPGOutput data, response status code and response headers
    def encrypt_gpg_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.encrypt_gpg ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.encrypt_gpg"
      end
      # resource path
      local_var_path = '/encrypt-gpg'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EncryptGPGOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.encrypt_gpg",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#encrypt_gpg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EncryptWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [EncryptOutput]
    def encrypt_with_classic_key(body, opts = {})
      data, _status_code, _headers = encrypt_with_classic_key_with_http_info(body, opts)
      data
    end

    # @param body [EncryptWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EncryptOutput, Integer, Hash)>] EncryptOutput data, response status code and response headers
    def encrypt_with_classic_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.encrypt_with_classic_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.encrypt_with_classic_key"
      end
      # resource path
      local_var_path = '/encrypt-with-classic-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EncryptOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.encrypt_with_classic_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#encrypt_with_classic_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EsmCreate] 
    # @param [Hash] opts the optional parameters
    # @return [EsmCreateSecretOutput]
    def esm_create(body, opts = {})
      data, _status_code, _headers = esm_create_with_http_info(body, opts)
      data
    end

    # @param body [EsmCreate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EsmCreateSecretOutput, Integer, Hash)>] EsmCreateSecretOutput data, response status code and response headers
    def esm_create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.esm_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.esm_create"
      end
      # resource path
      local_var_path = '/esm-create'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EsmCreateSecretOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.esm_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#esm_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EsmDelete] 
    # @param [Hash] opts the optional parameters
    # @return [EsmDeleteSecretOutput]
    def esm_delete(body, opts = {})
      data, _status_code, _headers = esm_delete_with_http_info(body, opts)
      data
    end

    # @param body [EsmDelete] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EsmDeleteSecretOutput, Integer, Hash)>] EsmDeleteSecretOutput data, response status code and response headers
    def esm_delete_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.esm_delete ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.esm_delete"
      end
      # resource path
      local_var_path = '/esm-delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EsmDeleteSecretOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.esm_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#esm_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EsmGet] 
    # @param [Hash] opts the optional parameters
    # @return [EsmGetSecretOutput]
    def esm_get(body, opts = {})
      data, _status_code, _headers = esm_get_with_http_info(body, opts)
      data
    end

    # @param body [EsmGet] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EsmGetSecretOutput, Integer, Hash)>] EsmGetSecretOutput data, response status code and response headers
    def esm_get_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.esm_get ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.esm_get"
      end
      # resource path
      local_var_path = '/esm-get'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EsmGetSecretOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.esm_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#esm_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EsmList] 
    # @param [Hash] opts the optional parameters
    # @return [EsmListSecretsOutput]
    def esm_list(body, opts = {})
      data, _status_code, _headers = esm_list_with_http_info(body, opts)
      data
    end

    # @param body [EsmList] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EsmListSecretsOutput, Integer, Hash)>] EsmListSecretsOutput data, response status code and response headers
    def esm_list_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.esm_list ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.esm_list"
      end
      # resource path
      local_var_path = '/esm-list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EsmListSecretsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.esm_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#esm_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EsmUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [EsmUpdateSecretOutput]
    def esm_update(body, opts = {})
      data, _status_code, _headers = esm_update_with_http_info(body, opts)
      data
    end

    # @param body [EsmUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EsmUpdateSecretOutput, Integer, Hash)>] EsmUpdateSecretOutput data, response status code and response headers
    def esm_update_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.esm_update ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.esm_update"
      end
      # resource path
      local_var_path = '/esm-update'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EsmUpdateSecretOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.esm_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#esm_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EventAction] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def event_action(body, opts = {})
      data, _status_code, _headers = event_action_with_http_info(body, opts)
      data
    end

    # @param body [EventAction] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def event_action_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.event_action ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.event_action"
      end
      # resource path
      local_var_path = '/event-action'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.event_action",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#event_action\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EventForwarderCreateEmail] 
    # @param [Hash] opts the optional parameters
    # @return [EventForwarderCreateUpdateOutput]
    def event_forwarder_create_email(body, opts = {})
      data, _status_code, _headers = event_forwarder_create_email_with_http_info(body, opts)
      data
    end

    # @param body [EventForwarderCreateEmail] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventForwarderCreateUpdateOutput, Integer, Hash)>] EventForwarderCreateUpdateOutput data, response status code and response headers
    def event_forwarder_create_email_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.event_forwarder_create_email ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.event_forwarder_create_email"
      end
      # resource path
      local_var_path = '/event-forwarder-create-email'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EventForwarderCreateUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.event_forwarder_create_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#event_forwarder_create_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EventForwarderCreateServiceNow] 
    # @param [Hash] opts the optional parameters
    # @return [EventForwarderCreateUpdateOutput]
    def event_forwarder_create_service_now(body, opts = {})
      data, _status_code, _headers = event_forwarder_create_service_now_with_http_info(body, opts)
      data
    end

    # @param body [EventForwarderCreateServiceNow] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventForwarderCreateUpdateOutput, Integer, Hash)>] EventForwarderCreateUpdateOutput data, response status code and response headers
    def event_forwarder_create_service_now_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.event_forwarder_create_service_now ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.event_forwarder_create_service_now"
      end
      # resource path
      local_var_path = '/event-forwarder-create-servicenow'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EventForwarderCreateUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.event_forwarder_create_service_now",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#event_forwarder_create_service_now\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EventForwarderCreateSlack] 
    # @param [Hash] opts the optional parameters
    # @return [EventForwarderCreateUpdateOutput]
    def event_forwarder_create_slack(body, opts = {})
      data, _status_code, _headers = event_forwarder_create_slack_with_http_info(body, opts)
      data
    end

    # @param body [EventForwarderCreateSlack] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventForwarderCreateUpdateOutput, Integer, Hash)>] EventForwarderCreateUpdateOutput data, response status code and response headers
    def event_forwarder_create_slack_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.event_forwarder_create_slack ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.event_forwarder_create_slack"
      end
      # resource path
      local_var_path = '/event-forwarder-create-slack'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EventForwarderCreateUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.event_forwarder_create_slack",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#event_forwarder_create_slack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EventForwarderCreateWebhook] 
    # @param [Hash] opts the optional parameters
    # @return [EventForwarderCreateUpdateOutput]
    def event_forwarder_create_webhook(body, opts = {})
      data, _status_code, _headers = event_forwarder_create_webhook_with_http_info(body, opts)
      data
    end

    # @param body [EventForwarderCreateWebhook] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventForwarderCreateUpdateOutput, Integer, Hash)>] EventForwarderCreateUpdateOutput data, response status code and response headers
    def event_forwarder_create_webhook_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.event_forwarder_create_webhook ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.event_forwarder_create_webhook"
      end
      # resource path
      local_var_path = '/event-forwarder-create-webhook'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EventForwarderCreateUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.event_forwarder_create_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#event_forwarder_create_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EventForwarderDelete] 
    # @param [Hash] opts the optional parameters
    # @return [EventForwarderDeleteOutput]
    def event_forwarder_delete(body, opts = {})
      data, _status_code, _headers = event_forwarder_delete_with_http_info(body, opts)
      data
    end

    # @param body [EventForwarderDelete] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventForwarderDeleteOutput, Integer, Hash)>] EventForwarderDeleteOutput data, response status code and response headers
    def event_forwarder_delete_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.event_forwarder_delete ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.event_forwarder_delete"
      end
      # resource path
      local_var_path = '/event-forwarder-delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EventForwarderDeleteOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.event_forwarder_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#event_forwarder_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EventForwarderGet] 
    # @param [Hash] opts the optional parameters
    # @return [EventForwarderGetOutput]
    def event_forwarder_get(body, opts = {})
      data, _status_code, _headers = event_forwarder_get_with_http_info(body, opts)
      data
    end

    # @param body [EventForwarderGet] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventForwarderGetOutput, Integer, Hash)>] EventForwarderGetOutput data, response status code and response headers
    def event_forwarder_get_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.event_forwarder_get ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.event_forwarder_get"
      end
      # resource path
      local_var_path = '/event-forwarder-get'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EventForwarderGetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.event_forwarder_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#event_forwarder_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EventForwarderUpdateEmail] 
    # @param [Hash] opts the optional parameters
    # @return [EventForwarderCreateUpdateOutput]
    def event_forwarder_update_email(body, opts = {})
      data, _status_code, _headers = event_forwarder_update_email_with_http_info(body, opts)
      data
    end

    # @param body [EventForwarderUpdateEmail] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventForwarderCreateUpdateOutput, Integer, Hash)>] EventForwarderCreateUpdateOutput data, response status code and response headers
    def event_forwarder_update_email_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.event_forwarder_update_email ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.event_forwarder_update_email"
      end
      # resource path
      local_var_path = '/event-forwarder-update-email'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EventForwarderCreateUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.event_forwarder_update_email",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#event_forwarder_update_email\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EventForwarderUpdateServiceNow] 
    # @param [Hash] opts the optional parameters
    # @return [EventForwarderCreateUpdateOutput]
    def event_forwarder_update_service_now(body, opts = {})
      data, _status_code, _headers = event_forwarder_update_service_now_with_http_info(body, opts)
      data
    end

    # @param body [EventForwarderUpdateServiceNow] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventForwarderCreateUpdateOutput, Integer, Hash)>] EventForwarderCreateUpdateOutput data, response status code and response headers
    def event_forwarder_update_service_now_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.event_forwarder_update_service_now ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.event_forwarder_update_service_now"
      end
      # resource path
      local_var_path = '/event-forwarder-update-servicenow'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EventForwarderCreateUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.event_forwarder_update_service_now",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#event_forwarder_update_service_now\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EventForwarderUpdateSlack] 
    # @param [Hash] opts the optional parameters
    # @return [EventForwarderCreateUpdateOutput]
    def event_forwarder_update_slack(body, opts = {})
      data, _status_code, _headers = event_forwarder_update_slack_with_http_info(body, opts)
      data
    end

    # @param body [EventForwarderUpdateSlack] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventForwarderCreateUpdateOutput, Integer, Hash)>] EventForwarderCreateUpdateOutput data, response status code and response headers
    def event_forwarder_update_slack_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.event_forwarder_update_slack ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.event_forwarder_update_slack"
      end
      # resource path
      local_var_path = '/event-forwarder-update-slack'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EventForwarderCreateUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.event_forwarder_update_slack",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#event_forwarder_update_slack\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [EventForwarderUpdateWebhook] 
    # @param [Hash] opts the optional parameters
    # @return [EventForwarderCreateUpdateOutput]
    def event_forwarder_update_webhook(body, opts = {})
      data, _status_code, _headers = event_forwarder_update_webhook_with_http_info(body, opts)
      data
    end

    # @param body [EventForwarderUpdateWebhook] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(EventForwarderCreateUpdateOutput, Integer, Hash)>] EventForwarderCreateUpdateOutput data, response status code and response headers
    def event_forwarder_update_webhook_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.event_forwarder_update_webhook ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.event_forwarder_update_webhook"
      end
      # resource path
      local_var_path = '/event-forwarder-update-webhook'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'EventForwarderCreateUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.event_forwarder_update_webhook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#event_forwarder_update_webhook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ExportClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [ExportClassicKeyOutput]
    def export_classic_key(body, opts = {})
      data, _status_code, _headers = export_classic_key_with_http_info(body, opts)
      data
    end

    # @param body [ExportClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ExportClassicKeyOutput, Integer, Hash)>] ExportClassicKeyOutput data, response status code and response headers
    def export_classic_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.export_classic_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.export_classic_key"
      end
      # resource path
      local_var_path = '/export-classic-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ExportClassicKeyOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.export_classic_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#export_classic_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateAllowedAccess] 
    # @param [Hash] opts the optional parameters
    # @return [AllowedAccess]
    def gateway_create_allowed_access(body, opts = {})
      data, _status_code, _headers = gateway_create_allowed_access_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateAllowedAccess] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AllowedAccess, Integer, Hash)>] AllowedAccess data, response status code and response headers
    def gateway_create_allowed_access_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_allowed_access ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_allowed_access"
      end
      # resource path
      local_var_path = '/gateway-create-allowed-access'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AllowedAccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_allowed_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_allowed_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateK8SAuthConfig] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateK8SAuthConfigOutput]
    def gateway_create_k8_s_auth_config(body, opts = {})
      data, _status_code, _headers = gateway_create_k8_s_auth_config_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateK8SAuthConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateK8SAuthConfigOutput, Integer, Hash)>] GatewayCreateK8SAuthConfigOutput data, response status code and response headers
    def gateway_create_k8_s_auth_config_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_k8_s_auth_config ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_k8_s_auth_config"
      end
      # resource path
      local_var_path = '/gateway-create-k8s-auth-config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateK8SAuthConfigOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_k8_s_auth_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_k8_s_auth_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateMigration] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayMigrationCreateOutput]
    def gateway_create_migration(body, opts = {})
      data, _status_code, _headers = gateway_create_migration_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateMigration] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayMigrationCreateOutput, Integer, Hash)>] GatewayMigrationCreateOutput data, response status code and response headers
    def gateway_create_migration_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_migration ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_migration"
      end
      # resource path
      local_var_path = '/gateway-create-migration'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayMigrationCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_migration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_migration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerArtifactory] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerArtifactoryOutput]
    def gateway_create_producer_artifactory(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_artifactory_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerArtifactory] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerArtifactoryOutput, Integer, Hash)>] GatewayCreateProducerArtifactoryOutput data, response status code and response headers
    def gateway_create_producer_artifactory_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_artifactory ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_artifactory"
      end
      # resource path
      local_var_path = '/gateway-create-producer-artifactory'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerArtifactoryOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_artifactory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_artifactory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerAws] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerAwsOutput]
    def gateway_create_producer_aws(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_aws_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerAws] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerAwsOutput, Integer, Hash)>] GatewayCreateProducerAwsOutput data, response status code and response headers
    def gateway_create_producer_aws_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_aws ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_aws"
      end
      # resource path
      local_var_path = '/gateway-create-producer-aws'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerAwsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_aws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_aws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerAzure] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerAzureOutput]
    def gateway_create_producer_azure(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_azure_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerAzure] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerAzureOutput, Integer, Hash)>] GatewayCreateProducerAzureOutput data, response status code and response headers
    def gateway_create_producer_azure_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_azure ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_azure"
      end
      # resource path
      local_var_path = '/gateway-create-producer-azure'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerAzureOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_azure",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_azure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerCassandra] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerCassandraOutput]
    def gateway_create_producer_cassandra(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_cassandra_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerCassandra] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerCassandraOutput, Integer, Hash)>] GatewayCreateProducerCassandraOutput data, response status code and response headers
    def gateway_create_producer_cassandra_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_cassandra ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_cassandra"
      end
      # resource path
      local_var_path = '/gateway-create-producer-cassandra'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerCassandraOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_cassandra",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_cassandra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerChef] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerChefOutput]
    def gateway_create_producer_chef(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_chef_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerChef] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerChefOutput, Integer, Hash)>] GatewayCreateProducerChefOutput data, response status code and response headers
    def gateway_create_producer_chef_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_chef ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_chef"
      end
      # resource path
      local_var_path = '/gateway-create-producer-chef'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerChefOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_chef",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_chef\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [GatewayCreateProducerCustom] :body 
    # @return [GatewayCreateProducerCustomOutput]
    def gateway_create_producer_custom(opts = {})
      data, _status_code, _headers = gateway_create_producer_custom_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [GatewayCreateProducerCustom] :body 
    # @return [Array<(GatewayCreateProducerCustomOutput, Integer, Hash)>] GatewayCreateProducerCustomOutput data, response status code and response headers
    def gateway_create_producer_custom_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_custom ...'
      end
      # resource path
      local_var_path = '/gateway-create-producer-custom'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerCustomOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_custom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_custom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerDockerhubOutput]
    def gateway_create_producer_dockerhub(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_dockerhub_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerDockerhubOutput, Integer, Hash)>] GatewayCreateProducerDockerhubOutput data, response status code and response headers
    def gateway_create_producer_dockerhub_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_dockerhub ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_dockerhub"
      end
      # resource path
      local_var_path = '/gateway-create-producer-dockerhub'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerDockerhubOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_dockerhub",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_dockerhub\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerEks] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerEksOutput]
    def gateway_create_producer_eks(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_eks_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerEks] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerEksOutput, Integer, Hash)>] GatewayCreateProducerEksOutput data, response status code and response headers
    def gateway_create_producer_eks_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_eks ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_eks"
      end
      # resource path
      local_var_path = '/gateway-create-producer-eks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerEksOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_eks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_eks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerGcp] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerGcpOutput]
    def gateway_create_producer_gcp(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_gcp_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerGcp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerGcpOutput, Integer, Hash)>] GatewayCreateProducerGcpOutput data, response status code and response headers
    def gateway_create_producer_gcp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_gcp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_gcp"
      end
      # resource path
      local_var_path = '/gateway-create-producer-gcp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerGcpOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_gcp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_gcp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerGithub] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerGithubOutput]
    def gateway_create_producer_github(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_github_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerGithub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerGithubOutput, Integer, Hash)>] GatewayCreateProducerGithubOutput data, response status code and response headers
    def gateway_create_producer_github_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_github ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_github"
      end
      # resource path
      local_var_path = '/gateway-create-producer-github'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerGithubOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_github",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_github\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerGke] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerGkeOutput]
    def gateway_create_producer_gke(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_gke_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerGke] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerGkeOutput, Integer, Hash)>] GatewayCreateProducerGkeOutput data, response status code and response headers
    def gateway_create_producer_gke_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_gke ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_gke"
      end
      # resource path
      local_var_path = '/gateway-create-producer-gke'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerGkeOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_gke",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_gke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerHanaDb] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerHanaDbOutput]
    def gateway_create_producer_hana_db(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_hana_db_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerHanaDb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerHanaDbOutput, Integer, Hash)>] GatewayCreateProducerHanaDbOutput data, response status code and response headers
    def gateway_create_producer_hana_db_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_hana_db ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_hana_db"
      end
      # resource path
      local_var_path = '/gateway-create-producer-hanadb'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerHanaDbOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_hana_db",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_hana_db\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerLdap] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerLdapOutput]
    def gateway_create_producer_ldap(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_ldap_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerLdap] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerLdapOutput, Integer, Hash)>] GatewayCreateProducerLdapOutput data, response status code and response headers
    def gateway_create_producer_ldap_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_ldap ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_ldap"
      end
      # resource path
      local_var_path = '/gateway-create-producer-ldap'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerLdapOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_ldap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_ldap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerMongo] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerMongoOutput]
    def gateway_create_producer_mongo(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_mongo_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerMongo] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerMongoOutput, Integer, Hash)>] GatewayCreateProducerMongoOutput data, response status code and response headers
    def gateway_create_producer_mongo_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_mongo ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_mongo"
      end
      # resource path
      local_var_path = '/gateway-create-producer-mongo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerMongoOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_mongo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_mongo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerMSSQL] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerMSSQLOutput]
    def gateway_create_producer_mssql(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_mssql_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerMSSQL] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerMSSQLOutput, Integer, Hash)>] GatewayCreateProducerMSSQLOutput data, response status code and response headers
    def gateway_create_producer_mssql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_mssql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_mssql"
      end
      # resource path
      local_var_path = '/gateway-create-producer-mssql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerMSSQLOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_mssql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_mssql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerMySQL] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerMySQLOutput]
    def gateway_create_producer_my_sql(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_my_sql_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerMySQL] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerMySQLOutput, Integer, Hash)>] GatewayCreateProducerMySQLOutput data, response status code and response headers
    def gateway_create_producer_my_sql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_my_sql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_my_sql"
      end
      # resource path
      local_var_path = '/gateway-create-producer-mysql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerMySQLOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_my_sql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_my_sql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerNativeK8S] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerNativeK8SOutput]
    def gateway_create_producer_native_k8_s(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_native_k8_s_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerNativeK8S] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerNativeK8SOutput, Integer, Hash)>] GatewayCreateProducerNativeK8SOutput data, response status code and response headers
    def gateway_create_producer_native_k8_s_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_native_k8_s ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_native_k8_s"
      end
      # resource path
      local_var_path = '/gateway-create-producer-k8s'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerNativeK8SOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_native_k8_s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_native_k8_s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerOracleDb] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerOracleDbOutput]
    def gateway_create_producer_oracle_db(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_oracle_db_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerOracleDb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerOracleDbOutput, Integer, Hash)>] GatewayCreateProducerOracleDbOutput data, response status code and response headers
    def gateway_create_producer_oracle_db_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_oracle_db ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_oracle_db"
      end
      # resource path
      local_var_path = '/gateway-create-producer-oracle'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerOracleDbOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_oracle_db",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_oracle_db\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerPing] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerPingOutput]
    def gateway_create_producer_ping(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_ping_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerPing] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerPingOutput, Integer, Hash)>] GatewayCreateProducerPingOutput data, response status code and response headers
    def gateway_create_producer_ping_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_ping ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_ping"
      end
      # resource path
      local_var_path = '/gateway-create-producer-ping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerPingOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_ping",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_ping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerPostgreSQL] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerPostgreSQLOutput]
    def gateway_create_producer_postgre_sql(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_postgre_sql_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerPostgreSQL] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerPostgreSQLOutput, Integer, Hash)>] GatewayCreateProducerPostgreSQLOutput data, response status code and response headers
    def gateway_create_producer_postgre_sql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_postgre_sql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_postgre_sql"
      end
      # resource path
      local_var_path = '/gateway-create-producer-postgresql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerPostgreSQLOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_postgre_sql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_postgre_sql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerRabbitMQ] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerRabbitMQOutput]
    def gateway_create_producer_rabbit_mq(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_rabbit_mq_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerRabbitMQ] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerRabbitMQOutput, Integer, Hash)>] GatewayCreateProducerRabbitMQOutput data, response status code and response headers
    def gateway_create_producer_rabbit_mq_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_rabbit_mq ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_rabbit_mq"
      end
      # resource path
      local_var_path = '/gateway-create-producer-rabbitmq'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerRabbitMQOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_rabbit_mq",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_rabbit_mq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerRdp] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerRdpOutput]
    def gateway_create_producer_rdp(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_rdp_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerRdp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerRdpOutput, Integer, Hash)>] GatewayCreateProducerRdpOutput data, response status code and response headers
    def gateway_create_producer_rdp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_rdp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_rdp"
      end
      # resource path
      local_var_path = '/gateway-create-producer-rdp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerRdpOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_rdp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_rdp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerRedis] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerRedisOutput]
    def gateway_create_producer_redis(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_redis_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerRedis] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerRedisOutput, Integer, Hash)>] GatewayCreateProducerRedisOutput data, response status code and response headers
    def gateway_create_producer_redis_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_redis ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_redis"
      end
      # resource path
      local_var_path = '/gateway-create-producer-Redis'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerRedisOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_redis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_redis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerRedshift] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerRedshiftOutput]
    def gateway_create_producer_redshift(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_redshift_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerRedshift] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerRedshiftOutput, Integer, Hash)>] GatewayCreateProducerRedshiftOutput data, response status code and response headers
    def gateway_create_producer_redshift_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_redshift ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_redshift"
      end
      # resource path
      local_var_path = '/gateway-create-producer-redshift'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerRedshiftOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_redshift",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_redshift\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerSnowflake] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerSnowflakeOutput]
    def gateway_create_producer_snowflake(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_snowflake_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerSnowflake] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerSnowflakeOutput, Integer, Hash)>] GatewayCreateProducerSnowflakeOutput data, response status code and response headers
    def gateway_create_producer_snowflake_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_snowflake ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_snowflake"
      end
      # resource path
      local_var_path = '/gateway-create-producer-snowflake'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerSnowflakeOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_snowflake",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_snowflake\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayCreateProducerVenafi] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayCreateProducerVenafiOutput]
    def gateway_create_producer_venafi(body, opts = {})
      data, _status_code, _headers = gateway_create_producer_venafi_with_http_info(body, opts)
      data
    end

    # @param body [GatewayCreateProducerVenafi] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayCreateProducerVenafiOutput, Integer, Hash)>] GatewayCreateProducerVenafiOutput data, response status code and response headers
    def gateway_create_producer_venafi_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_create_producer_venafi ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_create_producer_venafi"
      end
      # resource path
      local_var_path = '/gateway-create-producer-certificate-automation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayCreateProducerVenafiOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_create_producer_venafi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_create_producer_venafi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayDeleteAllowedAccess] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayDeleteAllowedAccessOutput]
    def gateway_delete_allowed_access(body, opts = {})
      data, _status_code, _headers = gateway_delete_allowed_access_with_http_info(body, opts)
      data
    end

    # @param body [GatewayDeleteAllowedAccess] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayDeleteAllowedAccessOutput, Integer, Hash)>] GatewayDeleteAllowedAccessOutput data, response status code and response headers
    def gateway_delete_allowed_access_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_delete_allowed_access ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_delete_allowed_access"
      end
      # resource path
      local_var_path = '/gateway-delete-allowed-access'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayDeleteAllowedAccessOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_delete_allowed_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_delete_allowed_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayDeleteK8SAuthConfig] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayDeleteK8SAuthConfigOutput]
    def gateway_delete_k8_s_auth_config(body, opts = {})
      data, _status_code, _headers = gateway_delete_k8_s_auth_config_with_http_info(body, opts)
      data
    end

    # @param body [GatewayDeleteK8SAuthConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayDeleteK8SAuthConfigOutput, Integer, Hash)>] GatewayDeleteK8SAuthConfigOutput data, response status code and response headers
    def gateway_delete_k8_s_auth_config_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_delete_k8_s_auth_config ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_delete_k8_s_auth_config"
      end
      # resource path
      local_var_path = '/gateway-delete-k8s-auth-config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayDeleteK8SAuthConfigOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_delete_k8_s_auth_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_delete_k8_s_auth_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayDeleteMigration] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayMigrationDeleteOutput]
    def gateway_delete_migration(body, opts = {})
      data, _status_code, _headers = gateway_delete_migration_with_http_info(body, opts)
      data
    end

    # @param body [GatewayDeleteMigration] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayMigrationDeleteOutput, Integer, Hash)>] GatewayMigrationDeleteOutput data, response status code and response headers
    def gateway_delete_migration_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_delete_migration ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_delete_migration"
      end
      # resource path
      local_var_path = '/gateway-delete-migration'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayMigrationDeleteOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_delete_migration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_delete_migration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayDeleteProducer] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayDeleteProducerOutput]
    def gateway_delete_producer(body, opts = {})
      data, _status_code, _headers = gateway_delete_producer_with_http_info(body, opts)
      data
    end

    # @param body [GatewayDeleteProducer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayDeleteProducerOutput, Integer, Hash)>] GatewayDeleteProducerOutput data, response status code and response headers
    def gateway_delete_producer_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_delete_producer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_delete_producer"
      end
      # resource path
      local_var_path = '/gateway-delete-producer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayDeleteProducerOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_delete_producer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_delete_producer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayDownloadCustomerFragments] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayDownloadCustomerFragmentsOutput]
    def gateway_download_customer_fragments(body, opts = {})
      data, _status_code, _headers = gateway_download_customer_fragments_with_http_info(body, opts)
      data
    end

    # @param body [GatewayDownloadCustomerFragments] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayDownloadCustomerFragmentsOutput, Integer, Hash)>] GatewayDownloadCustomerFragmentsOutput data, response status code and response headers
    def gateway_download_customer_fragments_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_download_customer_fragments ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_download_customer_fragments"
      end
      # resource path
      local_var_path = '/gateway-download-customer-fragments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayDownloadCustomerFragmentsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_download_customer_fragments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_download_customer_fragments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayGetAllowedAccess] 
    # @param [Hash] opts the optional parameters
    # @return [AllowedAccess]
    def gateway_get_allowed_access(body, opts = {})
      data, _status_code, _headers = gateway_get_allowed_access_with_http_info(body, opts)
      data
    end

    # @param body [GatewayGetAllowedAccess] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AllowedAccess, Integer, Hash)>] AllowedAccess data, response status code and response headers
    def gateway_get_allowed_access_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_get_allowed_access ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_get_allowed_access"
      end
      # resource path
      local_var_path = '/gateway-get-allowed-access'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AllowedAccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_get_allowed_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_get_allowed_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayGetCache] 
    # @param [Hash] opts the optional parameters
    # @return [CacheConfigPart]
    def gateway_get_cache(body, opts = {})
      data, _status_code, _headers = gateway_get_cache_with_http_info(body, opts)
      data
    end

    # @param body [GatewayGetCache] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(CacheConfigPart, Integer, Hash)>] CacheConfigPart data, response status code and response headers
    def gateway_get_cache_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_get_cache ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_get_cache"
      end
      # resource path
      local_var_path = '/gateway-get-cache'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'CacheConfigPart'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_get_cache",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_get_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayGetConfig] 
    # @param [Hash] opts the optional parameters
    # @return [AkeylessGatewayConfig]
    def gateway_get_config(body, opts = {})
      data, _status_code, _headers = gateway_get_config_with_http_info(body, opts)
      data
    end

    # @param body [GatewayGetConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AkeylessGatewayConfig, Integer, Hash)>] AkeylessGatewayConfig data, response status code and response headers
    def gateway_get_config_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_get_config ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_get_config"
      end
      # resource path
      local_var_path = '/gateway-get-config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AkeylessGatewayConfig'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_get_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_get_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayGetDefaults] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayGetDefaultsOutput]
    def gateway_get_defaults(body, opts = {})
      data, _status_code, _headers = gateway_get_defaults_with_http_info(body, opts)
      data
    end

    # @param body [GatewayGetDefaults] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayGetDefaultsOutput, Integer, Hash)>] GatewayGetDefaultsOutput data, response status code and response headers
    def gateway_get_defaults_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_get_defaults ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_get_defaults"
      end
      # resource path
      local_var_path = '/gateway-get-defaults'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayGetDefaultsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_get_defaults",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_get_defaults\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayGetK8SAuthConfig] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayGetK8SAuthConfigOutput]
    def gateway_get_k8_s_auth_config(body, opts = {})
      data, _status_code, _headers = gateway_get_k8_s_auth_config_with_http_info(body, opts)
      data
    end

    # @param body [GatewayGetK8SAuthConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayGetK8SAuthConfigOutput, Integer, Hash)>] GatewayGetK8SAuthConfigOutput data, response status code and response headers
    def gateway_get_k8_s_auth_config_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_get_k8_s_auth_config ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_get_k8_s_auth_config"
      end
      # resource path
      local_var_path = '/gateway-get-k8s-auth-config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayGetK8SAuthConfigOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_get_k8_s_auth_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_get_k8_s_auth_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayGetLdapAuthConfig] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayGetLdapAuthConfigOutput]
    def gateway_get_ldap_auth_config(body, opts = {})
      data, _status_code, _headers = gateway_get_ldap_auth_config_with_http_info(body, opts)
      data
    end

    # @param body [GatewayGetLdapAuthConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayGetLdapAuthConfigOutput, Integer, Hash)>] GatewayGetLdapAuthConfigOutput data, response status code and response headers
    def gateway_get_ldap_auth_config_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_get_ldap_auth_config ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_get_ldap_auth_config"
      end
      # resource path
      local_var_path = '/gateway-get-ldap-auth-config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayGetLdapAuthConfigOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_get_ldap_auth_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_get_ldap_auth_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayGetLogForwarding] 
    # @param [Hash] opts the optional parameters
    # @return [LogForwardingConfigPart]
    def gateway_get_log_forwarding(body, opts = {})
      data, _status_code, _headers = gateway_get_log_forwarding_with_http_info(body, opts)
      data
    end

    # @param body [GatewayGetLogForwarding] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LogForwardingConfigPart, Integer, Hash)>] LogForwardingConfigPart data, response status code and response headers
    def gateway_get_log_forwarding_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_get_log_forwarding ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_get_log_forwarding"
      end
      # resource path
      local_var_path = '/gateway-get-log-forwarding'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'LogForwardingConfigPart'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_get_log_forwarding",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_get_log_forwarding\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayGetMigration] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayMigrationGetOutput]
    def gateway_get_migration(body, opts = {})
      data, _status_code, _headers = gateway_get_migration_with_http_info(body, opts)
      data
    end

    # @param body [GatewayGetMigration] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayMigrationGetOutput, Integer, Hash)>] GatewayMigrationGetOutput data, response status code and response headers
    def gateway_get_migration_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_get_migration ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_get_migration"
      end
      # resource path
      local_var_path = '/gateway-get-migration'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayMigrationGetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_get_migration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_get_migration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayGetProducer] 
    # @param [Hash] opts the optional parameters
    # @return [DSProducerDetails]
    def gateway_get_producer(body, opts = {})
      data, _status_code, _headers = gateway_get_producer_with_http_info(body, opts)
      data
    end

    # @param body [GatewayGetProducer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DSProducerDetails, Integer, Hash)>] DSProducerDetails data, response status code and response headers
    def gateway_get_producer_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_get_producer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_get_producer"
      end
      # resource path
      local_var_path = '/gateway-get-producer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'DSProducerDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_get_producer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_get_producer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayGetTmpUsers] 
    # @param [Hash] opts the optional parameters
    # @return [Array<TmpUserData>]
    def gateway_get_tmp_users(body, opts = {})
      data, _status_code, _headers = gateway_get_tmp_users_with_http_info(body, opts)
      data
    end

    # @param body [GatewayGetTmpUsers] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<TmpUserData>, Integer, Hash)>] Array<TmpUserData> data, response status code and response headers
    def gateway_get_tmp_users_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_get_tmp_users ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_get_tmp_users"
      end
      # resource path
      local_var_path = '/gateway-get-producer-tmp-creds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<TmpUserData>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_get_tmp_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_get_tmp_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayListCustomerFragments] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def gateway_list_customer_fragments(body, opts = {})
      data, _status_code, _headers = gateway_list_customer_fragments_with_http_info(body, opts)
      data
    end

    # @param body [GatewayListCustomerFragments] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def gateway_list_customer_fragments_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_list_customer_fragments ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_list_customer_fragments"
      end
      # resource path
      local_var_path = '/gateway-list-customer-fragments'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_list_customer_fragments",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_list_customer_fragments\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayListMigration] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayMigrationListOutput]
    def gateway_list_migration(body, opts = {})
      data, _status_code, _headers = gateway_list_migration_with_http_info(body, opts)
      data
    end

    # @param body [GatewayListMigration] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayMigrationListOutput, Integer, Hash)>] GatewayMigrationListOutput data, response status code and response headers
    def gateway_list_migration_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_list_migration ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_list_migration"
      end
      # resource path
      local_var_path = '/gateway-list-migration'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayMigrationListOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_list_migration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_list_migration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayListProducers] 
    # @param [Hash] opts the optional parameters
    # @return [GetProducersListReplyObj]
    def gateway_list_producers(body, opts = {})
      data, _status_code, _headers = gateway_list_producers_with_http_info(body, opts)
      data
    end

    # @param body [GatewayListProducers] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetProducersListReplyObj, Integer, Hash)>] GetProducersListReplyObj data, response status code and response headers
    def gateway_list_producers_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_list_producers ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_list_producers"
      end
      # resource path
      local_var_path = '/gateway-list-producers'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetProducersListReplyObj'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_list_producers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_list_producers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayListRotatedSecrets] 
    # @param [Hash] opts the optional parameters
    # @return [ListItemsOutput]
    def gateway_list_rotated_secrets(body, opts = {})
      data, _status_code, _headers = gateway_list_rotated_secrets_with_http_info(body, opts)
      data
    end

    # @param body [GatewayListRotatedSecrets] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListItemsOutput, Integer, Hash)>] ListItemsOutput data, response status code and response headers
    def gateway_list_rotated_secrets_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_list_rotated_secrets ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_list_rotated_secrets"
      end
      # resource path
      local_var_path = '/gateway-list-rotated-secrets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ListItemsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_list_rotated_secrets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_list_rotated_secrets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [GatewayMigratePersonalItems] :body 
    # @return [GatewayMigratePersonalItemsOutput]
    def gateway_migrate_personal_items(opts = {})
      data, _status_code, _headers = gateway_migrate_personal_items_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [GatewayMigratePersonalItems] :body 
    # @return [Array<(GatewayMigratePersonalItemsOutput, Integer, Hash)>] GatewayMigratePersonalItemsOutput data, response status code and response headers
    def gateway_migrate_personal_items_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_migrate_personal_items ...'
      end
      # resource path
      local_var_path = '/gateway-migrate-personal-items'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayMigratePersonalItemsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_migrate_personal_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_migrate_personal_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayRevokeTmpUsers] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def gateway_revoke_tmp_users(body, opts = {})
      gateway_revoke_tmp_users_with_http_info(body, opts)
      nil
    end

    # @param body [GatewayRevokeTmpUsers] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def gateway_revoke_tmp_users_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_revoke_tmp_users ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_revoke_tmp_users"
      end
      # resource path
      local_var_path = '/gateway-revoke-producer-tmp-creds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_revoke_tmp_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_revoke_tmp_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayStartProducer] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayStartProducerOutput]
    def gateway_start_producer(body, opts = {})
      data, _status_code, _headers = gateway_start_producer_with_http_info(body, opts)
      data
    end

    # @param body [GatewayStartProducer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayStartProducerOutput, Integer, Hash)>] GatewayStartProducerOutput data, response status code and response headers
    def gateway_start_producer_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_start_producer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_start_producer"
      end
      # resource path
      local_var_path = '/gateway-start-producer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayStartProducerOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_start_producer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_start_producer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayStatusMigration] 
    # @param [Hash] opts the optional parameters
    # @return [MigrationStatusReplyObj]
    def gateway_status_migration(body, opts = {})
      data, _status_code, _headers = gateway_status_migration_with_http_info(body, opts)
      data
    end

    # @param body [GatewayStatusMigration] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(MigrationStatusReplyObj, Integer, Hash)>] MigrationStatusReplyObj data, response status code and response headers
    def gateway_status_migration_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_status_migration ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_status_migration"
      end
      # resource path
      local_var_path = '/gateway-migration-status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'MigrationStatusReplyObj'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_status_migration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_status_migration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayStopProducer] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayStopProducerOutput]
    def gateway_stop_producer(body, opts = {})
      data, _status_code, _headers = gateway_stop_producer_with_http_info(body, opts)
      data
    end

    # @param body [GatewayStopProducer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayStopProducerOutput, Integer, Hash)>] GatewayStopProducerOutput data, response status code and response headers
    def gateway_stop_producer_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_stop_producer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_stop_producer"
      end
      # resource path
      local_var_path = '/gateway-stop-producer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayStopProducerOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_stop_producer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_stop_producer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewaySyncMigration] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayMigrationSyncOutput]
    def gateway_sync_migration(body, opts = {})
      data, _status_code, _headers = gateway_sync_migration_with_http_info(body, opts)
      data
    end

    # @param body [GatewaySyncMigration] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayMigrationSyncOutput, Integer, Hash)>] GatewayMigrationSyncOutput data, response status code and response headers
    def gateway_sync_migration_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_sync_migration ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_sync_migration"
      end
      # resource path
      local_var_path = '/gateway-sync-migration'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayMigrationSyncOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_sync_migration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_sync_migration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateAllowedAccess] 
    # @param [Hash] opts the optional parameters
    # @return [AllowedAccess]
    def gateway_update_allowed_access(body, opts = {})
      data, _status_code, _headers = gateway_update_allowed_access_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateAllowedAccess] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AllowedAccess, Integer, Hash)>] AllowedAccess data, response status code and response headers
    def gateway_update_allowed_access_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_allowed_access ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_allowed_access"
      end
      # resource path
      local_var_path = '/gateway-update-allowed-access'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AllowedAccess'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_allowed_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_allowed_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateCache] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateOutput]
    def gateway_update_cache(body, opts = {})
      data, _status_code, _headers = gateway_update_cache_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateCache] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateOutput, Integer, Hash)>] GatewayUpdateOutput data, response status code and response headers
    def gateway_update_cache_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_cache ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_cache"
      end
      # resource path
      local_var_path = '/gateway-update-cache'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_cache",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_cache\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateDefaults] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateOutput]
    def gateway_update_defaults(body, opts = {})
      data, _status_code, _headers = gateway_update_defaults_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateDefaults] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateOutput, Integer, Hash)>] GatewayUpdateOutput data, response status code and response headers
    def gateway_update_defaults_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_defaults ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_defaults"
      end
      # resource path
      local_var_path = '/gateway-update-defaults'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_defaults",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_defaults\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateItem] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateItemOutput]
    def gateway_update_item(body, opts = {})
      data, _status_code, _headers = gateway_update_item_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateItem] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateItemOutput, Integer, Hash)>] GatewayUpdateItemOutput data, response status code and response headers
    def gateway_update_item_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_item ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_item"
      end
      # resource path
      local_var_path = '/gateway-update-item'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateItemOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateK8SAuthConfig] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateK8SAuthConfigOutput]
    def gateway_update_k8_s_auth_config(body, opts = {})
      data, _status_code, _headers = gateway_update_k8_s_auth_config_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateK8SAuthConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateK8SAuthConfigOutput, Integer, Hash)>] GatewayUpdateK8SAuthConfigOutput data, response status code and response headers
    def gateway_update_k8_s_auth_config_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_k8_s_auth_config ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_k8_s_auth_config"
      end
      # resource path
      local_var_path = '/gateway-update-k8s-auth-config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateK8SAuthConfigOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_k8_s_auth_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_k8_s_auth_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateLdapAuthConfig] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateLdapAuthConfigOutput]
    def gateway_update_ldap_auth_config(body, opts = {})
      data, _status_code, _headers = gateway_update_ldap_auth_config_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateLdapAuthConfig] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateLdapAuthConfigOutput, Integer, Hash)>] GatewayUpdateLdapAuthConfigOutput data, response status code and response headers
    def gateway_update_ldap_auth_config_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_ldap_auth_config ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_ldap_auth_config"
      end
      # resource path
      local_var_path = '/gateway-update-ldap-auth-config'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateLdapAuthConfigOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_ldap_auth_config",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_ldap_auth_config\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateLogForwardingAwsS3] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateLogForwardingOutput]
    def gateway_update_log_forwarding_aws_s3(body, opts = {})
      data, _status_code, _headers = gateway_update_log_forwarding_aws_s3_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateLogForwardingAwsS3] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateLogForwardingOutput, Integer, Hash)>] GatewayUpdateLogForwardingOutput data, response status code and response headers
    def gateway_update_log_forwarding_aws_s3_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_log_forwarding_aws_s3 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_log_forwarding_aws_s3"
      end
      # resource path
      local_var_path = '/gateway-update-log-forwarding-aws-s3'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateLogForwardingOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_log_forwarding_aws_s3",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_log_forwarding_aws_s3\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateLogForwardingAzureAnalytics] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateLogForwardingOutput]
    def gateway_update_log_forwarding_azure_analytics(body, opts = {})
      data, _status_code, _headers = gateway_update_log_forwarding_azure_analytics_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateLogForwardingAzureAnalytics] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateLogForwardingOutput, Integer, Hash)>] GatewayUpdateLogForwardingOutput data, response status code and response headers
    def gateway_update_log_forwarding_azure_analytics_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_log_forwarding_azure_analytics ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_log_forwarding_azure_analytics"
      end
      # resource path
      local_var_path = '/gateway-update-log-forwarding-azure-analytics'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateLogForwardingOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_log_forwarding_azure_analytics",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_log_forwarding_azure_analytics\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateLogForwardingDatadog] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateLogForwardingOutput]
    def gateway_update_log_forwarding_datadog(body, opts = {})
      data, _status_code, _headers = gateway_update_log_forwarding_datadog_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateLogForwardingDatadog] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateLogForwardingOutput, Integer, Hash)>] GatewayUpdateLogForwardingOutput data, response status code and response headers
    def gateway_update_log_forwarding_datadog_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_log_forwarding_datadog ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_log_forwarding_datadog"
      end
      # resource path
      local_var_path = '/gateway-update-log-forwarding-datadog'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateLogForwardingOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_log_forwarding_datadog",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_log_forwarding_datadog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateLogForwardingElasticsearch] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateLogForwardingOutput]
    def gateway_update_log_forwarding_elasticsearch(body, opts = {})
      data, _status_code, _headers = gateway_update_log_forwarding_elasticsearch_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateLogForwardingElasticsearch] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateLogForwardingOutput, Integer, Hash)>] GatewayUpdateLogForwardingOutput data, response status code and response headers
    def gateway_update_log_forwarding_elasticsearch_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_log_forwarding_elasticsearch ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_log_forwarding_elasticsearch"
      end
      # resource path
      local_var_path = '/gateway-update-log-forwarding-elasticsearch'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateLogForwardingOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_log_forwarding_elasticsearch",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_log_forwarding_elasticsearch\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateLogForwardingGoogleChronicle] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateLogForwardingOutput]
    def gateway_update_log_forwarding_google_chronicle(body, opts = {})
      data, _status_code, _headers = gateway_update_log_forwarding_google_chronicle_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateLogForwardingGoogleChronicle] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateLogForwardingOutput, Integer, Hash)>] GatewayUpdateLogForwardingOutput data, response status code and response headers
    def gateway_update_log_forwarding_google_chronicle_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_log_forwarding_google_chronicle ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_log_forwarding_google_chronicle"
      end
      # resource path
      local_var_path = '/gateway-update-log-forwarding-google-chronicle'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateLogForwardingOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_log_forwarding_google_chronicle",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_log_forwarding_google_chronicle\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateLogForwardingLogstash] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateLogForwardingOutput]
    def gateway_update_log_forwarding_logstash(body, opts = {})
      data, _status_code, _headers = gateway_update_log_forwarding_logstash_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateLogForwardingLogstash] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateLogForwardingOutput, Integer, Hash)>] GatewayUpdateLogForwardingOutput data, response status code and response headers
    def gateway_update_log_forwarding_logstash_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_log_forwarding_logstash ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_log_forwarding_logstash"
      end
      # resource path
      local_var_path = '/gateway-update-log-forwarding-logstash'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateLogForwardingOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_log_forwarding_logstash",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_log_forwarding_logstash\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateLogForwardingLogzIo] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateLogForwardingOutput]
    def gateway_update_log_forwarding_logz_io(body, opts = {})
      data, _status_code, _headers = gateway_update_log_forwarding_logz_io_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateLogForwardingLogzIo] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateLogForwardingOutput, Integer, Hash)>] GatewayUpdateLogForwardingOutput data, response status code and response headers
    def gateway_update_log_forwarding_logz_io_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_log_forwarding_logz_io ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_log_forwarding_logz_io"
      end
      # resource path
      local_var_path = '/gateway-update-log-forwarding-logz-io'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateLogForwardingOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_log_forwarding_logz_io",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_log_forwarding_logz_io\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateLogForwardingSplunk] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateLogForwardingOutput]
    def gateway_update_log_forwarding_splunk(body, opts = {})
      data, _status_code, _headers = gateway_update_log_forwarding_splunk_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateLogForwardingSplunk] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateLogForwardingOutput, Integer, Hash)>] GatewayUpdateLogForwardingOutput data, response status code and response headers
    def gateway_update_log_forwarding_splunk_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_log_forwarding_splunk ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_log_forwarding_splunk"
      end
      # resource path
      local_var_path = '/gateway-update-log-forwarding-splunk'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateLogForwardingOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_log_forwarding_splunk",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_log_forwarding_splunk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateLogForwardingStdout] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateLogForwardingOutput]
    def gateway_update_log_forwarding_stdout(body, opts = {})
      data, _status_code, _headers = gateway_update_log_forwarding_stdout_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateLogForwardingStdout] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateLogForwardingOutput, Integer, Hash)>] GatewayUpdateLogForwardingOutput data, response status code and response headers
    def gateway_update_log_forwarding_stdout_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_log_forwarding_stdout ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_log_forwarding_stdout"
      end
      # resource path
      local_var_path = '/gateway-update-log-forwarding-stdout'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateLogForwardingOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_log_forwarding_stdout",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_log_forwarding_stdout\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateLogForwardingSumologic] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateLogForwardingOutput]
    def gateway_update_log_forwarding_sumologic(body, opts = {})
      data, _status_code, _headers = gateway_update_log_forwarding_sumologic_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateLogForwardingSumologic] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateLogForwardingOutput, Integer, Hash)>] GatewayUpdateLogForwardingOutput data, response status code and response headers
    def gateway_update_log_forwarding_sumologic_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_log_forwarding_sumologic ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_log_forwarding_sumologic"
      end
      # resource path
      local_var_path = '/gateway-update-log-forwarding-sumologic'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateLogForwardingOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_log_forwarding_sumologic",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_log_forwarding_sumologic\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateLogForwardingSyslog] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateLogForwardingOutput]
    def gateway_update_log_forwarding_syslog(body, opts = {})
      data, _status_code, _headers = gateway_update_log_forwarding_syslog_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateLogForwardingSyslog] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateLogForwardingOutput, Integer, Hash)>] GatewayUpdateLogForwardingOutput data, response status code and response headers
    def gateway_update_log_forwarding_syslog_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_log_forwarding_syslog ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_log_forwarding_syslog"
      end
      # resource path
      local_var_path = '/gateway-update-log-forwarding-syslog'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateLogForwardingOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_log_forwarding_syslog",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_log_forwarding_syslog\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateMigration] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayMigrationUpdateOutput]
    def gateway_update_migration(body, opts = {})
      data, _status_code, _headers = gateway_update_migration_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateMigration] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayMigrationUpdateOutput, Integer, Hash)>] GatewayMigrationUpdateOutput data, response status code and response headers
    def gateway_update_migration_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_migration ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_migration"
      end
      # resource path
      local_var_path = '/gateway-update-migration'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayMigrationUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_migration",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_migration\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerArtifactory] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerArtifactoryOutput]
    def gateway_update_producer_artifactory(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_artifactory_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerArtifactory] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerArtifactoryOutput, Integer, Hash)>] GatewayUpdateProducerArtifactoryOutput data, response status code and response headers
    def gateway_update_producer_artifactory_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_artifactory ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_artifactory"
      end
      # resource path
      local_var_path = '/gateway-update-producer-artifactory'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerArtifactoryOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_artifactory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_artifactory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerAws] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerAwsOutput]
    def gateway_update_producer_aws(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_aws_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerAws] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerAwsOutput, Integer, Hash)>] GatewayUpdateProducerAwsOutput data, response status code and response headers
    def gateway_update_producer_aws_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_aws ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_aws"
      end
      # resource path
      local_var_path = '/gateway-update-producer-aws'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerAwsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_aws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_aws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerAzure] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerAzureOutput]
    def gateway_update_producer_azure(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_azure_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerAzure] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerAzureOutput, Integer, Hash)>] GatewayUpdateProducerAzureOutput data, response status code and response headers
    def gateway_update_producer_azure_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_azure ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_azure"
      end
      # resource path
      local_var_path = '/gateway-update-producer-azure'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerAzureOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_azure",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_azure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerCassandra] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerCassandraOutput]
    def gateway_update_producer_cassandra(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_cassandra_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerCassandra] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerCassandraOutput, Integer, Hash)>] GatewayUpdateProducerCassandraOutput data, response status code and response headers
    def gateway_update_producer_cassandra_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_cassandra ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_cassandra"
      end
      # resource path
      local_var_path = '/gateway-update-producer-cassandra'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerCassandraOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_cassandra",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_cassandra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerChef] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerChefOutput]
    def gateway_update_producer_chef(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_chef_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerChef] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerChefOutput, Integer, Hash)>] GatewayUpdateProducerChefOutput data, response status code and response headers
    def gateway_update_producer_chef_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_chef ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_chef"
      end
      # resource path
      local_var_path = '/gateway-update-producer-chef'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerChefOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_chef",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_chef\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [GatewayUpdateProducerCustom] :body 
    # @return [GatewayUpdateProducerCustomOutput]
    def gateway_update_producer_custom(opts = {})
      data, _status_code, _headers = gateway_update_producer_custom_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [GatewayUpdateProducerCustom] :body 
    # @return [Array<(GatewayUpdateProducerCustomOutput, Integer, Hash)>] GatewayUpdateProducerCustomOutput data, response status code and response headers
    def gateway_update_producer_custom_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_custom ...'
      end
      # resource path
      local_var_path = '/gateway-update-producer-custom'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerCustomOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_custom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_custom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerDockerhubOutput]
    def gateway_update_producer_dockerhub(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_dockerhub_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerDockerhubOutput, Integer, Hash)>] GatewayUpdateProducerDockerhubOutput data, response status code and response headers
    def gateway_update_producer_dockerhub_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_dockerhub ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_dockerhub"
      end
      # resource path
      local_var_path = '/gateway-update-producer-dockerhub'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerDockerhubOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_dockerhub",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_dockerhub\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerEks] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerEksOutput]
    def gateway_update_producer_eks(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_eks_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerEks] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerEksOutput, Integer, Hash)>] GatewayUpdateProducerEksOutput data, response status code and response headers
    def gateway_update_producer_eks_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_eks ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_eks"
      end
      # resource path
      local_var_path = '/gateway-update-producer-eks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerEksOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_eks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_eks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerGcp] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerGcpOutput]
    def gateway_update_producer_gcp(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_gcp_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerGcp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerGcpOutput, Integer, Hash)>] GatewayUpdateProducerGcpOutput data, response status code and response headers
    def gateway_update_producer_gcp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_gcp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_gcp"
      end
      # resource path
      local_var_path = '/gateway-update-producer-gcp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerGcpOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_gcp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_gcp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerGithub] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerGithubOutput]
    def gateway_update_producer_github(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_github_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerGithub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerGithubOutput, Integer, Hash)>] GatewayUpdateProducerGithubOutput data, response status code and response headers
    def gateway_update_producer_github_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_github ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_github"
      end
      # resource path
      local_var_path = '/gateway-update-producer-github'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerGithubOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_github",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_github\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerGke] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerGkeOutput]
    def gateway_update_producer_gke(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_gke_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerGke] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerGkeOutput, Integer, Hash)>] GatewayUpdateProducerGkeOutput data, response status code and response headers
    def gateway_update_producer_gke_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_gke ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_gke"
      end
      # resource path
      local_var_path = '/gateway-update-producer-gke'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerGkeOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_gke",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_gke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerHanaDb] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerHanaDbOutput]
    def gateway_update_producer_hana_db(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_hana_db_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerHanaDb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerHanaDbOutput, Integer, Hash)>] GatewayUpdateProducerHanaDbOutput data, response status code and response headers
    def gateway_update_producer_hana_db_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_hana_db ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_hana_db"
      end
      # resource path
      local_var_path = '/gateway-update-producer-hana'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerHanaDbOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_hana_db",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_hana_db\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerLdap] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerLdapOutput]
    def gateway_update_producer_ldap(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_ldap_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerLdap] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerLdapOutput, Integer, Hash)>] GatewayUpdateProducerLdapOutput data, response status code and response headers
    def gateway_update_producer_ldap_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_ldap ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_ldap"
      end
      # resource path
      local_var_path = '/gateway-update-producer-ldap'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerLdapOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_ldap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_ldap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerMongo] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerMongoOutput]
    def gateway_update_producer_mongo(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_mongo_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerMongo] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerMongoOutput, Integer, Hash)>] GatewayUpdateProducerMongoOutput data, response status code and response headers
    def gateway_update_producer_mongo_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_mongo ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_mongo"
      end
      # resource path
      local_var_path = '/gateway-update-producer-mongo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerMongoOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_mongo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_mongo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerMSSQL] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerMSSQLOutput]
    def gateway_update_producer_mssql(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_mssql_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerMSSQL] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerMSSQLOutput, Integer, Hash)>] GatewayUpdateProducerMSSQLOutput data, response status code and response headers
    def gateway_update_producer_mssql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_mssql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_mssql"
      end
      # resource path
      local_var_path = '/gateway-update-producer-mssql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerMSSQLOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_mssql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_mssql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerMySQL] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerMySQLOutput]
    def gateway_update_producer_my_sql(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_my_sql_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerMySQL] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerMySQLOutput, Integer, Hash)>] GatewayUpdateProducerMySQLOutput data, response status code and response headers
    def gateway_update_producer_my_sql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_my_sql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_my_sql"
      end
      # resource path
      local_var_path = '/gateway-update-producer-mysql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerMySQLOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_my_sql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_my_sql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerNativeK8S] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerNativeK8SOutput]
    def gateway_update_producer_native_k8_s(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_native_k8_s_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerNativeK8S] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerNativeK8SOutput, Integer, Hash)>] GatewayUpdateProducerNativeK8SOutput data, response status code and response headers
    def gateway_update_producer_native_k8_s_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_native_k8_s ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_native_k8_s"
      end
      # resource path
      local_var_path = '/gateway-update-producer-k8s'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerNativeK8SOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_native_k8_s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_native_k8_s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerOracleDb] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerOracleDbOutput]
    def gateway_update_producer_oracle_db(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_oracle_db_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerOracleDb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerOracleDbOutput, Integer, Hash)>] GatewayUpdateProducerOracleDbOutput data, response status code and response headers
    def gateway_update_producer_oracle_db_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_oracle_db ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_oracle_db"
      end
      # resource path
      local_var_path = '/gateway-update-producer-oracle'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerOracleDbOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_oracle_db",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_oracle_db\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerPing] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerPingOutput]
    def gateway_update_producer_ping(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_ping_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerPing] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerPingOutput, Integer, Hash)>] GatewayUpdateProducerPingOutput data, response status code and response headers
    def gateway_update_producer_ping_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_ping ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_ping"
      end
      # resource path
      local_var_path = '/gateway-update-producer-ping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerPingOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_ping",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_ping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerPostgreSQL] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerPostgreSQLOutput]
    def gateway_update_producer_postgre_sql(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_postgre_sql_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerPostgreSQL] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerPostgreSQLOutput, Integer, Hash)>] GatewayUpdateProducerPostgreSQLOutput data, response status code and response headers
    def gateway_update_producer_postgre_sql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_postgre_sql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_postgre_sql"
      end
      # resource path
      local_var_path = '/gateway-update-producer-postgresql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerPostgreSQLOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_postgre_sql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_postgre_sql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerRabbitMQ] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerRabbitMQOutput]
    def gateway_update_producer_rabbit_mq(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_rabbit_mq_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerRabbitMQ] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerRabbitMQOutput, Integer, Hash)>] GatewayUpdateProducerRabbitMQOutput data, response status code and response headers
    def gateway_update_producer_rabbit_mq_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_rabbit_mq ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_rabbit_mq"
      end
      # resource path
      local_var_path = '/gateway-update-producer-rabbitmq'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerRabbitMQOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_rabbit_mq",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_rabbit_mq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerRdp] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerRdpOutput]
    def gateway_update_producer_rdp(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_rdp_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerRdp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerRdpOutput, Integer, Hash)>] GatewayUpdateProducerRdpOutput data, response status code and response headers
    def gateway_update_producer_rdp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_rdp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_rdp"
      end
      # resource path
      local_var_path = '/gateway-update-producer-rdp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerRdpOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_rdp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_rdp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerRedis] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerRedisOutput]
    def gateway_update_producer_redis(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_redis_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerRedis] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerRedisOutput, Integer, Hash)>] GatewayUpdateProducerRedisOutput data, response status code and response headers
    def gateway_update_producer_redis_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_redis ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_redis"
      end
      # resource path
      local_var_path = '/gateway-update-producer-redis'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerRedisOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_redis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_redis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerRedshift] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerRedshiftOutput]
    def gateway_update_producer_redshift(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_redshift_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerRedshift] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerRedshiftOutput, Integer, Hash)>] GatewayUpdateProducerRedshiftOutput data, response status code and response headers
    def gateway_update_producer_redshift_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_redshift ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_redshift"
      end
      # resource path
      local_var_path = '/gateway-update-producer-redshift'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerRedshiftOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_redshift",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_redshift\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerSnowflake] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerSnowflakeOutput]
    def gateway_update_producer_snowflake(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_snowflake_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerSnowflake] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerSnowflakeOutput, Integer, Hash)>] GatewayUpdateProducerSnowflakeOutput data, response status code and response headers
    def gateway_update_producer_snowflake_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_snowflake ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_snowflake"
      end
      # resource path
      local_var_path = '/gateway-update-producer-snowflake'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerSnowflakeOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_snowflake",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_snowflake\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateProducerVenafi] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateProducerVenafiOutput]
    def gateway_update_producer_venafi(body, opts = {})
      data, _status_code, _headers = gateway_update_producer_venafi_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateProducerVenafi] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateProducerVenafiOutput, Integer, Hash)>] GatewayUpdateProducerVenafiOutput data, response status code and response headers
    def gateway_update_producer_venafi_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_producer_venafi ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_producer_venafi"
      end
      # resource path
      local_var_path = '/gateway-update-producer-certificate-automation'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateProducerVenafiOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_producer_venafi",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_producer_venafi\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateTlsCert] 
    # @param [Hash] opts the optional parameters
    # @return [GatewayUpdateTlsCertOutput]
    def gateway_update_tls_cert(body, opts = {})
      data, _status_code, _headers = gateway_update_tls_cert_with_http_info(body, opts)
      data
    end

    # @param body [GatewayUpdateTlsCert] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewayUpdateTlsCertOutput, Integer, Hash)>] GatewayUpdateTlsCertOutput data, response status code and response headers
    def gateway_update_tls_cert_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_tls_cert ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_tls_cert"
      end
      # resource path
      local_var_path = '/gateway-update-tls-cert'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewayUpdateTlsCertOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_tls_cert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_tls_cert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GatewayUpdateTmpUsers] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def gateway_update_tmp_users(body, opts = {})
      gateway_update_tmp_users_with_http_info(body, opts)
      nil
    end

    # @param body [GatewayUpdateTmpUsers] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def gateway_update_tmp_users_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.gateway_update_tmp_users ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.gateway_update_tmp_users"
      end
      # resource path
      local_var_path = '/gateway-update-producer-tmp-creds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.gateway_update_tmp_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#gateway_update_tmp_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GenerateCsr] 
    # @param [Hash] opts the optional parameters
    # @return [GenerateCsrOutput]
    def generate_csr(body, opts = {})
      data, _status_code, _headers = generate_csr_with_http_info(body, opts)
      data
    end

    # @param body [GenerateCsr] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenerateCsrOutput, Integer, Hash)>] GenerateCsrOutput data, response status code and response headers
    def generate_csr_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.generate_csr ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.generate_csr"
      end
      # resource path
      local_var_path = '/generate-csr'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GenerateCsrOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.generate_csr",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#generate_csr\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [Hash<String, String>]
    def get_account_logo(opts = {})
      data, _status_code, _headers = get_account_logo_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, String>, Integer, Hash)>] Hash<String, String> data, response status code and response headers
    def get_account_logo_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_account_logo ...'
      end
      # resource path
      local_var_path = '/get-account-logo'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_account_logo",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_account_logo\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetAccountSettings] 
    # @param [Hash] opts the optional parameters
    # @return [GetAccountSettingsCommandOutput]
    def get_account_settings(body, opts = {})
      data, _status_code, _headers = get_account_settings_with_http_info(body, opts)
      data
    end

    # @param body [GetAccountSettings] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAccountSettingsCommandOutput, Integer, Hash)>] GetAccountSettingsCommandOutput data, response status code and response headers
    def get_account_settings_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_account_settings ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_account_settings"
      end
      # resource path
      local_var_path = '/get-account-settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetAccountSettingsCommandOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_account_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_account_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetAnalyticsData] 
    # @param [Hash] opts the optional parameters
    # @return [AllAnalyticsData]
    def get_analytics_data(body, opts = {})
      data, _status_code, _headers = get_analytics_data_with_http_info(body, opts)
      data
    end

    # @param body [GetAnalyticsData] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AllAnalyticsData, Integer, Hash)>] AllAnalyticsData data, response status code and response headers
    def get_analytics_data_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_analytics_data ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_analytics_data"
      end
      # resource path
      local_var_path = '/get-analytics-data'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AllAnalyticsData'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_analytics_data",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_analytics_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetAuthMethod] 
    # @param [Hash] opts the optional parameters
    # @return [AuthMethod]
    def get_auth_method(body, opts = {})
      data, _status_code, _headers = get_auth_method_with_http_info(body, opts)
      data
    end

    # @param body [GetAuthMethod] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(AuthMethod, Integer, Hash)>] AuthMethod data, response status code and response headers
    def get_auth_method_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_auth_method ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_auth_method"
      end
      # resource path
      local_var_path = '/get-auth-method'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'AuthMethod'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_auth_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_auth_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetCertificateValue] 
    # @param [Hash] opts the optional parameters
    # @return [GetCertificateValueOutput]
    def get_certificate_value(body, opts = {})
      data, _status_code, _headers = get_certificate_value_with_http_info(body, opts)
      data
    end

    # @param body [GetCertificateValue] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetCertificateValueOutput, Integer, Hash)>] GetCertificateValueOutput data, response status code and response headers
    def get_certificate_value_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_certificate_value ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_certificate_value"
      end
      # resource path
      local_var_path = '/get-certificate-value'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetCertificateValueOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_certificate_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_certificate_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetDynamicSecretValue] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_dynamic_secret_value(body, opts = {})
      data, _status_code, _headers = get_dynamic_secret_value_with_http_info(body, opts)
      data
    end

    # @param body [GetDynamicSecretValue] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_dynamic_secret_value_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_dynamic_secret_value ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_dynamic_secret_value"
      end
      # resource path
      local_var_path = '/get-dynamic-secret-value'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_dynamic_secret_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_dynamic_secret_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetEventForwarder] 
    # @param [Hash] opts the optional parameters
    # @return [GetEventForwarderOutput]
    def get_event_forwarder(body, opts = {})
      data, _status_code, _headers = get_event_forwarder_with_http_info(body, opts)
      data
    end

    # @param body [GetEventForwarder] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetEventForwarderOutput, Integer, Hash)>] GetEventForwarderOutput data, response status code and response headers
    def get_event_forwarder_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_event_forwarder ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_event_forwarder"
      end
      # resource path
      local_var_path = '/get-event-forwarder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetEventForwarderOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_event_forwarder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_event_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetGroup] 
    # @param [Hash] opts the optional parameters
    # @return [GetGroupOutput]
    def get_group(body, opts = {})
      data, _status_code, _headers = get_group_with_http_info(body, opts)
      data
    end

    # @param body [GetGroup] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetGroupOutput, Integer, Hash)>] GetGroupOutput data, response status code and response headers
    def get_group_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_group ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_group"
      end
      # resource path
      local_var_path = '/get-group'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetGroupOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetKubeExecCreds] 
    # @param [Hash] opts the optional parameters
    # @return [GetKubeExecCredsOutput]
    def get_kube_exec_creds(body, opts = {})
      data, _status_code, _headers = get_kube_exec_creds_with_http_info(body, opts)
      data
    end

    # @param body [GetKubeExecCreds] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetKubeExecCredsOutput, Integer, Hash)>] GetKubeExecCredsOutput data, response status code and response headers
    def get_kube_exec_creds_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_kube_exec_creds ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_kube_exec_creds"
      end
      # resource path
      local_var_path = '/get-kube-exec-creds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetKubeExecCredsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_kube_exec_creds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_kube_exec_creds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetLastUserEventStatus] 
    # @param [Hash] opts the optional parameters
    # @return [GetUserEventStatusOutput]
    def get_last_user_event_status(body, opts = {})
      data, _status_code, _headers = get_last_user_event_status_with_http_info(body, opts)
      data
    end

    # @param body [GetLastUserEventStatus] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetUserEventStatusOutput, Integer, Hash)>] GetUserEventStatusOutput data, response status code and response headers
    def get_last_user_event_status_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_last_user_event_status ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_last_user_event_status"
      end
      # resource path
      local_var_path = '/user-event-last-status'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetUserEventStatusOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_last_user_event_status",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_last_user_event_status\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetPKICertificate] 
    # @param [Hash] opts the optional parameters
    # @return [GetPKICertificateOutput]
    def get_pki_certificate(body, opts = {})
      data, _status_code, _headers = get_pki_certificate_with_http_info(body, opts)
      data
    end

    # @param body [GetPKICertificate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetPKICertificateOutput, Integer, Hash)>] GetPKICertificateOutput data, response status code and response headers
    def get_pki_certificate_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_pki_certificate ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_pki_certificate"
      end
      # resource path
      local_var_path = '/get-pki-certificate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetPKICertificateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_pki_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_pki_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetRole] 
    # @param [Hash] opts the optional parameters
    # @return [Role]
    def get_role(body, opts = {})
      data, _status_code, _headers = get_role_with_http_info(body, opts)
      data
    end

    # @param body [GetRole] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Role, Integer, Hash)>] Role data, response status code and response headers
    def get_role_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_role ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_role"
      end
      # resource path
      local_var_path = '/get-role'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Role'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetRotatedSecretValue] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_rotated_secret_value(body, opts = {})
      data, _status_code, _headers = get_rotated_secret_value_with_http_info(body, opts)
      data
    end

    # @param body [GetRotatedSecretValue] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_rotated_secret_value_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_rotated_secret_value ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_rotated_secret_value"
      end
      # resource path
      local_var_path = '/get-rotated-secret-value'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_rotated_secret_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_rotated_secret_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetRSAPublic] 
    # @param [Hash] opts the optional parameters
    # @return [GetRSAPublicOutput]
    def get_rsa_public(body, opts = {})
      data, _status_code, _headers = get_rsa_public_with_http_info(body, opts)
      data
    end

    # @param body [GetRSAPublic] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRSAPublicOutput, Integer, Hash)>] GetRSAPublicOutput data, response status code and response headers
    def get_rsa_public_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_rsa_public ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_rsa_public"
      end
      # resource path
      local_var_path = '/get-rsa-public'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetRSAPublicOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_rsa_public",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_rsa_public\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetSecretValue] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def get_secret_value(body, opts = {})
      data, _status_code, _headers = get_secret_value_with_http_info(body, opts)
      data
    end

    # @param body [GetSecretValue] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def get_secret_value_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_secret_value ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_secret_value"
      end
      # resource path
      local_var_path = '/get-secret-value'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_secret_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_secret_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetSSHCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [GetSSHCertificateOutput]
    def get_ssh_certificate(body, opts = {})
      data, _status_code, _headers = get_ssh_certificate_with_http_info(body, opts)
      data
    end

    # @param body [GetSSHCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetSSHCertificateOutput, Integer, Hash)>] GetSSHCertificateOutput data, response status code and response headers
    def get_ssh_certificate_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_ssh_certificate ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_ssh_certificate"
      end
      # resource path
      local_var_path = '/get-ssh-certificate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetSSHCertificateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_ssh_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_ssh_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetTags] 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_tags(body, opts = {})
      data, _status_code, _headers = get_tags_with_http_info(body, opts)
      data
    end

    # @param body [GetTags] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def get_tags_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_tags ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_tags"
      end
      # resource path
      local_var_path = '/get-tags'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<String>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_tags",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_tags\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Target]
    def get_target(body, opts = {})
      data, _status_code, _headers = get_target_with_http_info(body, opts)
      data
    end

    # @param body [GetTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Target, Integer, Hash)>] Target data, response status code and response headers
    def get_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_target"
      end
      # resource path
      local_var_path = '/get-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Target'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [GetTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [GetTargetDetailsOutput]
    def get_target_details(body, opts = {})
      data, _status_code, _headers = get_target_details_with_http_info(body, opts)
      data
    end

    # @param body [GetTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTargetDetailsOutput, Integer, Hash)>] GetTargetDetailsOutput data, response status code and response headers
    def get_target_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.get_target_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.get_target_details"
      end
      # resource path
      local_var_path = '/get-target-details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetTargetDetailsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.get_target_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#get_target_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [Hmac] 
    # @param [Hash] opts the optional parameters
    # @return [HmacOutput]
    def hmac(body, opts = {})
      data, _status_code, _headers = hmac_with_http_info(body, opts)
      data
    end

    # @param body [Hmac] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(HmacOutput, Integer, Hash)>] HmacOutput data, response status code and response headers
    def hmac_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.hmac ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.hmac"
      end
      # resource path
      local_var_path = '/hmac'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'HmacOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.hmac",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#hmac\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ImportPasswords] 
    # @param [Hash] opts the optional parameters
    # @return [ImportPasswordsOutput]
    def import_passwords(body, opts = {})
      data, _status_code, _headers = import_passwords_with_http_info(body, opts)
      data
    end

    # @param body [ImportPasswords] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ImportPasswordsOutput, Integer, Hash)>] ImportPasswordsOutput data, response status code and response headers
    def import_passwords_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.import_passwords ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.import_passwords"
      end
      # resource path
      local_var_path = '/import-passwords'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ImportPasswordsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.import_passwords",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#import_passwords\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipClientDeleteRule] :body 
    # @return [KMIPClientUpdateResponse]
    def kmip_client_delete_rule(opts = {})
      data, _status_code, _headers = kmip_client_delete_rule_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipClientDeleteRule] :body 
    # @return [Array<(KMIPClientUpdateResponse, Integer, Hash)>] KMIPClientUpdateResponse data, response status code and response headers
    def kmip_client_delete_rule_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.kmip_client_delete_rule ...'
      end
      # resource path
      local_var_path = '/kmip-client-delete-rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'KMIPClientUpdateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.kmip_client_delete_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#kmip_client_delete_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipClientSetRule] :body 
    # @return [KMIPClientUpdateResponse]
    def kmip_client_set_rule(opts = {})
      data, _status_code, _headers = kmip_client_set_rule_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipClientSetRule] :body 
    # @return [Array<(KMIPClientUpdateResponse, Integer, Hash)>] KMIPClientUpdateResponse data, response status code and response headers
    def kmip_client_set_rule_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.kmip_client_set_rule ...'
      end
      # resource path
      local_var_path = '/kmip-client-set-rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'KMIPClientUpdateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.kmip_client_set_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#kmip_client_set_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipCreateClient] :body 
    # @return [KmipCreateClientOutput]
    def kmip_create_client(opts = {})
      data, _status_code, _headers = kmip_create_client_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipCreateClient] :body 
    # @return [Array<(KmipCreateClientOutput, Integer, Hash)>] KmipCreateClientOutput data, response status code and response headers
    def kmip_create_client_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.kmip_create_client ...'
      end
      # resource path
      local_var_path = '/kmip-create-client'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'KmipCreateClientOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.kmip_create_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#kmip_create_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipDeleteClient] :body 
    # @return [Object]
    def kmip_delete_client(opts = {})
      data, _status_code, _headers = kmip_delete_client_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipDeleteClient] :body 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def kmip_delete_client_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.kmip_delete_client ...'
      end
      # resource path
      local_var_path = '/kmip-delete-client'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.kmip_delete_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#kmip_delete_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipDeleteServer] :body 
    # @return [Object]
    def kmip_delete_server(opts = {})
      data, _status_code, _headers = kmip_delete_server_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipDeleteServer] :body 
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def kmip_delete_server_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.kmip_delete_server ...'
      end
      # resource path
      local_var_path = '/kmip-delete-environment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.kmip_delete_server",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#kmip_delete_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipDescribeClient] :body 
    # @return [KMIPClientGetResponse]
    def kmip_describe_client(opts = {})
      data, _status_code, _headers = kmip_describe_client_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipDescribeClient] :body 
    # @return [Array<(KMIPClientGetResponse, Integer, Hash)>] KMIPClientGetResponse data, response status code and response headers
    def kmip_describe_client_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.kmip_describe_client ...'
      end
      # resource path
      local_var_path = '/kmip-get-client'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'KMIPClientGetResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.kmip_describe_client",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#kmip_describe_client\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipDescribeServer] :body 
    # @return [KmipDescribeServerOutput]
    def kmip_describe_server(opts = {})
      data, _status_code, _headers = kmip_describe_server_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipDescribeServer] :body 
    # @return [Array<(KmipDescribeServerOutput, Integer, Hash)>] KmipDescribeServerOutput data, response status code and response headers
    def kmip_describe_server_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.kmip_describe_server ...'
      end
      # resource path
      local_var_path = '/kmip-get-environment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'KmipDescribeServerOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.kmip_describe_server",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#kmip_describe_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipListClients] :body 
    # @return [KMIPClientListResponse]
    def kmip_list_clients(opts = {})
      data, _status_code, _headers = kmip_list_clients_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipListClients] :body 
    # @return [Array<(KMIPClientListResponse, Integer, Hash)>] KMIPClientListResponse data, response status code and response headers
    def kmip_list_clients_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.kmip_list_clients ...'
      end
      # resource path
      local_var_path = '/kmip-list-clients'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'KMIPClientListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.kmip_list_clients",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#kmip_list_clients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipMoveServer] :body 
    # @return [KmipMoveServerOutput]
    def kmip_move_server(opts = {})
      data, _status_code, _headers = kmip_move_server_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipMoveServer] :body 
    # @return [Array<(KmipMoveServerOutput, Integer, Hash)>] KmipMoveServerOutput data, response status code and response headers
    def kmip_move_server_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.kmip_move_server ...'
      end
      # resource path
      local_var_path = '/kmip-move-environment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'KmipMoveServerOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.kmip_move_server",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#kmip_move_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipRenewClientCertificate] :body 
    # @return [KmipRenewClientCertificateOutput]
    def kmip_renew_client_certificate(opts = {})
      data, _status_code, _headers = kmip_renew_client_certificate_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipRenewClientCertificate] :body 
    # @return [Array<(KmipRenewClientCertificateOutput, Integer, Hash)>] KmipRenewClientCertificateOutput data, response status code and response headers
    def kmip_renew_client_certificate_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.kmip_renew_client_certificate ...'
      end
      # resource path
      local_var_path = '/kmip-renew-client'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'KmipRenewClientCertificateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.kmip_renew_client_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#kmip_renew_client_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipRenewServerCertificate] :body 
    # @return [KmipRenewServerCertificateOutput]
    def kmip_renew_server_certificate(opts = {})
      data, _status_code, _headers = kmip_renew_server_certificate_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipRenewServerCertificate] :body 
    # @return [Array<(KmipRenewServerCertificateOutput, Integer, Hash)>] KmipRenewServerCertificateOutput data, response status code and response headers
    def kmip_renew_server_certificate_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.kmip_renew_server_certificate ...'
      end
      # resource path
      local_var_path = '/kmip-renew-environment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'KmipRenewServerCertificateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.kmip_renew_server_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#kmip_renew_server_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipServerSetup] :body 
    # @return [KMIPEnvironmentCreateResponse]
    def kmip_server_setup(opts = {})
      data, _status_code, _headers = kmip_server_setup_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipServerSetup] :body 
    # @return [Array<(KMIPEnvironmentCreateResponse, Integer, Hash)>] KMIPEnvironmentCreateResponse data, response status code and response headers
    def kmip_server_setup_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.kmip_server_setup ...'
      end
      # resource path
      local_var_path = '/kmip-create-environment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'KMIPEnvironmentCreateResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.kmip_server_setup",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#kmip_server_setup\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipSetServerState] :body 
    # @return [KmipSetServerStateOutput]
    def kmip_set_server_state(opts = {})
      data, _status_code, _headers = kmip_set_server_state_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [KmipSetServerState] :body 
    # @return [Array<(KmipSetServerStateOutput, Integer, Hash)>] KmipSetServerStateOutput data, response status code and response headers
    def kmip_set_server_state_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.kmip_set_server_state ...'
      end
      # resource path
      local_var_path = '/kmip-set-environment-state'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'KmipSetServerStateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.kmip_set_server_state",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#kmip_set_server_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ListAuthMethods] 
    # @param [Hash] opts the optional parameters
    # @return [ListAuthMethodsOutput]
    def list_auth_methods(body, opts = {})
      data, _status_code, _headers = list_auth_methods_with_http_info(body, opts)
      data
    end

    # @param body [ListAuthMethods] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListAuthMethodsOutput, Integer, Hash)>] ListAuthMethodsOutput data, response status code and response headers
    def list_auth_methods_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.list_auth_methods ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.list_auth_methods"
      end
      # resource path
      local_var_path = '/list-auth-methods'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ListAuthMethodsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.list_auth_methods",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#list_auth_methods\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ListGateways] 
    # @param [Hash] opts the optional parameters
    # @return [GatewaysListResponse]
    def list_gateways(body, opts = {})
      data, _status_code, _headers = list_gateways_with_http_info(body, opts)
      data
    end

    # @param body [ListGateways] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GatewaysListResponse, Integer, Hash)>] GatewaysListResponse data, response status code and response headers
    def list_gateways_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.list_gateways ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.list_gateways"
      end
      # resource path
      local_var_path = '/list-gateways'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GatewaysListResponse'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.list_gateways",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#list_gateways\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ListGroups] 
    # @param [Hash] opts the optional parameters
    # @return [ListGroupsOutput]
    def list_groups(body, opts = {})
      data, _status_code, _headers = list_groups_with_http_info(body, opts)
      data
    end

    # @param body [ListGroups] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListGroupsOutput, Integer, Hash)>] ListGroupsOutput data, response status code and response headers
    def list_groups_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.list_groups ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.list_groups"
      end
      # resource path
      local_var_path = '/list-group'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ListGroupsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.list_groups",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#list_groups\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ListItems] 
    # @param [Hash] opts the optional parameters
    # @return [ListItemsInPathOutput]
    def list_items(body, opts = {})
      data, _status_code, _headers = list_items_with_http_info(body, opts)
      data
    end

    # @param body [ListItems] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListItemsInPathOutput, Integer, Hash)>] ListItemsInPathOutput data, response status code and response headers
    def list_items_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.list_items ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.list_items"
      end
      # resource path
      local_var_path = '/list-items'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ListItemsInPathOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.list_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#list_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ListRoles] 
    # @param [Hash] opts the optional parameters
    # @return [ListRolesOutput]
    def list_roles(body, opts = {})
      data, _status_code, _headers = list_roles_with_http_info(body, opts)
      data
    end

    # @param body [ListRoles] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListRolesOutput, Integer, Hash)>] ListRolesOutput data, response status code and response headers
    def list_roles_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.list_roles ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.list_roles"
      end
      # resource path
      local_var_path = '/list-roles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ListRolesOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.list_roles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#list_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ListSharedItems] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def list_shared_items(body, opts = {})
      list_shared_items_with_http_info(body, opts)
      nil
    end

    # @param body [ListSharedItems] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def list_shared_items_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.list_shared_items ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.list_shared_items"
      end
      # resource path
      local_var_path = '/list-shared-items'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.list_shared_items",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#list_shared_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ListSRABastions] 
    # @param [Hash] opts the optional parameters
    # @return [BastionsList]
    def list_sra_bastions(body, opts = {})
      data, _status_code, _headers = list_sra_bastions_with_http_info(body, opts)
      data
    end

    # @param body [ListSRABastions] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(BastionsList, Integer, Hash)>] BastionsList data, response status code and response headers
    def list_sra_bastions_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.list_sra_bastions ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.list_sra_bastions"
      end
      # resource path
      local_var_path = '/list-sra-bastions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'BastionsList'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.list_sra_bastions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#list_sra_bastions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ListTargets] 
    # @param [Hash] opts the optional parameters
    # @return [ListTargetsOutput]
    def list_targets(body, opts = {})
      data, _status_code, _headers = list_targets_with_http_info(body, opts)
      data
    end

    # @param body [ListTargets] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListTargetsOutput, Integer, Hash)>] ListTargetsOutput data, response status code and response headers
    def list_targets_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.list_targets ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.list_targets"
      end
      # resource path
      local_var_path = '/list-targets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ListTargetsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.list_targets",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#list_targets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [MoveObjects] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def move_objects(body, opts = {})
      data, _status_code, _headers = move_objects_with_http_info(body, opts)
      data
    end

    # @param body [MoveObjects] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def move_objects_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.move_objects ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.move_objects"
      end
      # resource path
      local_var_path = '/move-objects'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.move_objects",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#move_objects\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ProvisionCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [ProvisionCertificateOutput]
    def provision_certificate(body, opts = {})
      data, _status_code, _headers = provision_certificate_with_http_info(body, opts)
      data
    end

    # @param body [ProvisionCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ProvisionCertificateOutput, Integer, Hash)>] ProvisionCertificateOutput data, response status code and response headers
    def provision_certificate_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.provision_certificate ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.provision_certificate"
      end
      # resource path
      local_var_path = '/provision-certificate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ProvisionCertificateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.provision_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#provision_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @option opts [RawCreds] :body 
    # @return [SystemAccessCredentialsReplyObj]
    def raw_creds(opts = {})
      data, _status_code, _headers = raw_creds_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @option opts [RawCreds] :body 
    # @return [Array<(SystemAccessCredentialsReplyObj, Integer, Hash)>] SystemAccessCredentialsReplyObj data, response status code and response headers
    def raw_creds_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.raw_creds ...'
      end
      # resource path
      local_var_path = '/raw-creds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'body'])

      # return_type
      return_type = opts[:debug_return_type] || 'SystemAccessCredentialsReplyObj'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.raw_creds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#raw_creds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RefreshKey] 
    # @param [Hash] opts the optional parameters
    # @return [RefreshKeyOutput]
    def refresh_key(body, opts = {})
      data, _status_code, _headers = refresh_key_with_http_info(body, opts)
      data
    end

    # @param body [RefreshKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RefreshKeyOutput, Integer, Hash)>] RefreshKeyOutput data, response status code and response headers
    def refresh_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.refresh_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.refresh_key"
      end
      # resource path
      local_var_path = '/refresh-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RefreshKeyOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.refresh_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#refresh_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RenewCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [RenewCertificateOutput]
    def renew_certificate(body, opts = {})
      data, _status_code, _headers = renew_certificate_with_http_info(body, opts)
      data
    end

    # @param body [RenewCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RenewCertificateOutput, Integer, Hash)>] RenewCertificateOutput data, response status code and response headers
    def renew_certificate_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.renew_certificate ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.renew_certificate"
      end
      # resource path
      local_var_path = '/renew-certificate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RenewCertificateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.renew_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#renew_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RequestAccess] 
    # @param [Hash] opts the optional parameters
    # @return [RequestAccessOutput]
    def request_access(body, opts = {})
      data, _status_code, _headers = request_access_with_http_info(body, opts)
      data
    end

    # @param body [RequestAccess] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RequestAccessOutput, Integer, Hash)>] RequestAccessOutput data, response status code and response headers
    def request_access_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.request_access ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.request_access"
      end
      # resource path
      local_var_path = '/request-access'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RequestAccessOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.request_access",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#request_access\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ReverseRBAC] 
    # @param [Hash] opts the optional parameters
    # @return [ReverseRBACOutput]
    def reverse_rbac(body, opts = {})
      data, _status_code, _headers = reverse_rbac_with_http_info(body, opts)
      data
    end

    # @param body [ReverseRBAC] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ReverseRBACOutput, Integer, Hash)>] ReverseRBACOutput data, response status code and response headers
    def reverse_rbac_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.reverse_rbac ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.reverse_rbac"
      end
      # resource path
      local_var_path = '/reverse-rbac'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ReverseRBACOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.reverse_rbac",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#reverse_rbac\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RevokeCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def revoke_certificate(body, opts = {})
      data, _status_code, _headers = revoke_certificate_with_http_info(body, opts)
      data
    end

    # @param body [RevokeCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def revoke_certificate_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.revoke_certificate ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.revoke_certificate"
      end
      # resource path
      local_var_path = '/revoke-certificate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.revoke_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#revoke_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [Object]
    def revoke_creds(opts = {})
      data, _status_code, _headers = revoke_creds_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def revoke_creds_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.revoke_creds ...'
      end
      # resource path
      local_var_path = '/revoke-creds'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.revoke_creds",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#revoke_creds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RollbackSecret] 
    # @param [Hash] opts the optional parameters
    # @return [RollbackSecretOutput]
    def rollback_secret(body, opts = {})
      data, _status_code, _headers = rollback_secret_with_http_info(body, opts)
      data
    end

    # @param body [RollbackSecret] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RollbackSecretOutput, Integer, Hash)>] RollbackSecretOutput data, response status code and response headers
    def rollback_secret_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rollback_secret ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rollback_secret"
      end
      # resource path
      local_var_path = '/rollback-secret'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RollbackSecretOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rollback_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rollback_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotateKey] 
    # @param [Hash] opts the optional parameters
    # @return [RotateKeyOutput]
    def rotate_key(body, opts = {})
      data, _status_code, _headers = rotate_key_with_http_info(body, opts)
      data
    end

    # @param body [RotateKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotateKeyOutput, Integer, Hash)>] RotateKeyOutput data, response status code and response headers
    def rotate_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotate_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotate_key"
      end
      # resource path
      local_var_path = '/rotate-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotateKeyOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotate_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotate_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotateOidcClientSecret] 
    # @param [Hash] opts the optional parameters
    # @return [RotateOidcClientOutput]
    def rotate_oidc_client_secret(body, opts = {})
      data, _status_code, _headers = rotate_oidc_client_secret_with_http_info(body, opts)
      data
    end

    # @param body [RotateOidcClientSecret] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotateOidcClientOutput, Integer, Hash)>] RotateOidcClientOutput data, response status code and response headers
    def rotate_oidc_client_secret_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotate_oidc_client_secret ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotate_oidc_client_secret"
      end
      # resource path
      local_var_path = '/rotate-oidc-client-secret'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotateOidcClientOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotate_oidc_client_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotate_oidc_client_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotateSecret] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretOutput]
    def rotate_secret(body, opts = {})
      data, _status_code, _headers = rotate_secret_with_http_info(body, opts)
      data
    end

    # @param body [RotateSecret] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretOutput, Integer, Hash)>] RotatedSecretOutput data, response status code and response headers
    def rotate_secret_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotate_secret ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotate_secret"
      end
      # resource path
      local_var_path = '/gateway-rotate-secret'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotate_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotate_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateAws] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_aws(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_aws_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateAws] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_aws_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_aws ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_aws"
      end
      # resource path
      local_var_path = '/rotated-secret-create-aws'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_aws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_aws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateAzure] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_azure(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_azure_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateAzure] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_azure_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_azure ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_azure"
      end
      # resource path
      local_var_path = '/rotated-secret-create-azure'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_azure",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_azure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateCassandra] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_cassandra(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_cassandra_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateCassandra] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_cassandra_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_cassandra ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_cassandra"
      end
      # resource path
      local_var_path = '/rotated-secret-create-cassandra'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_cassandra",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_cassandra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateCustom] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_custom(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_custom_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateCustom] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_custom_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_custom ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_custom"
      end
      # resource path
      local_var_path = '/rotated-secret-create-custom'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_custom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_custom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_dockerhub(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_dockerhub_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_dockerhub_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_dockerhub ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_dockerhub"
      end
      # resource path
      local_var_path = '/rotated-secret-create-dockerhub'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_dockerhub",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_dockerhub\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_gcp(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_gcp_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_gcp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_gcp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_gcp"
      end
      # resource path
      local_var_path = '/rotated-secret-create-gcp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_gcp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_gcp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateHanadb] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_hanadb(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_hanadb_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateHanadb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_hanadb_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_hanadb ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_hanadb"
      end
      # resource path
      local_var_path = '/rotated-secret-create-hanadb'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_hanadb",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_hanadb\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_ldap(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_ldap_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_ldap_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_ldap ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_ldap"
      end
      # resource path
      local_var_path = '/rotated-secret-create-ldap'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_ldap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_ldap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateMongodb] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_mongodb(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_mongodb_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateMongodb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_mongodb_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_mongodb ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_mongodb"
      end
      # resource path
      local_var_path = '/rotated-secret-create-mongodb'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_mongodb",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_mongodb\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateMssql] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_mssql(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_mssql_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateMssql] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_mssql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_mssql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_mssql"
      end
      # resource path
      local_var_path = '/rotated-secret-create-mssql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_mssql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_mssql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateMysql] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_mysql(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_mysql_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateMysql] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_mysql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_mysql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_mysql"
      end
      # resource path
      local_var_path = '/rotated-secret-create-mysql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_mysql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_mysql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateOracledb] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_oracledb(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_oracledb_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateOracledb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_oracledb_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_oracledb ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_oracledb"
      end
      # resource path
      local_var_path = '/rotated-secret-create-oracledb'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_oracledb",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_oracledb\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreatePostgresql] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_postgresql(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_postgresql_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreatePostgresql] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_postgresql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_postgresql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_postgresql"
      end
      # resource path
      local_var_path = '/rotated-secret-create-postgresql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_postgresql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_postgresql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateRedis] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_redis(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_redis_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateRedis] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_redis_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_redis ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_redis"
      end
      # resource path
      local_var_path = '/rotated-secret-create-redis'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_redis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_redis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateRedshift] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_redshift(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_redshift_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateRedshift] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_redshift_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_redshift ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_redshift"
      end
      # resource path
      local_var_path = '/rotated-secret-create-redshift'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_redshift",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_redshift\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateSnowflake] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_snowflake(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_snowflake_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateSnowflake] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_snowflake_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_snowflake ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_snowflake"
      end
      # resource path
      local_var_path = '/rotated-secret-create-snowflake'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_snowflake",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_snowflake\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateSsh] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_ssh(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_ssh_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateSsh] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_ssh_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_ssh ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_ssh"
      end
      # resource path
      local_var_path = '/rotated-secret-create-ssh'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_ssh",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_ssh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretCreateWindows] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretCreateOutput]
    def rotated_secret_create_windows(body, opts = {})
      data, _status_code, _headers = rotated_secret_create_windows_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretCreateWindows] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretCreateOutput, Integer, Hash)>] RotatedSecretCreateOutput data, response status code and response headers
    def rotated_secret_create_windows_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_create_windows ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_create_windows"
      end
      # resource path
      local_var_path = '/rotated-secret-create-windows'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_create_windows",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_create_windows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretGetValue] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Object>]
    def rotated_secret_get_value(body, opts = {})
      data, _status_code, _headers = rotated_secret_get_value_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretGetValue] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Object>, Integer, Hash)>] Hash<String, Object> data, response status code and response headers
    def rotated_secret_get_value_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_get_value ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_get_value"
      end
      # resource path
      local_var_path = '/rotated-secret-get-value'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Hash<String, Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_get_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_get_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretList] 
    # @param [Hash] opts the optional parameters
    # @return [GetProducersListReplyObj]
    def rotated_secret_list(body, opts = {})
      data, _status_code, _headers = rotated_secret_list_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretList] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetProducersListReplyObj, Integer, Hash)>] GetProducersListReplyObj data, response status code and response headers
    def rotated_secret_list_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_list ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_list"
      end
      # resource path
      local_var_path = '/rotated-secret-list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetProducersListReplyObj'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateAws] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_aws(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_aws_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateAws] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_aws_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_aws ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_aws"
      end
      # resource path
      local_var_path = '/rotated-secret-update-aws'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_aws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_aws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateAzure] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_azure(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_azure_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateAzure] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_azure_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_azure ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_azure"
      end
      # resource path
      local_var_path = '/rotated-secret-update-azure'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_azure",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_azure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateCassandra] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_cassandra(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_cassandra_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateCassandra] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_cassandra_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_cassandra ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_cassandra"
      end
      # resource path
      local_var_path = '/rotated-secret-update-cassandra'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_cassandra",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_cassandra\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateCustom] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_custom(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_custom_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateCustom] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_custom_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_custom ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_custom"
      end
      # resource path
      local_var_path = '/rotated-secret-update-custom'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_custom",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_custom\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_dockerhub(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_dockerhub_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_dockerhub_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_dockerhub ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_dockerhub"
      end
      # resource path
      local_var_path = '/rotated-secret-update-dockerhub'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_dockerhub",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_dockerhub\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_gcp(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_gcp_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_gcp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_gcp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_gcp"
      end
      # resource path
      local_var_path = '/rotated-secret-update-gcp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_gcp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_gcp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateHanadb] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_hanadb(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_hanadb_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateHanadb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_hanadb_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_hanadb ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_hanadb"
      end
      # resource path
      local_var_path = '/rotated-secret-update-hanadb'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_hanadb",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_hanadb\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_ldap(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_ldap_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_ldap_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_ldap ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_ldap"
      end
      # resource path
      local_var_path = '/rotated-secret-update-ldap'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_ldap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_ldap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateMongodb] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_mongodb(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_mongodb_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateMongodb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_mongodb_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_mongodb ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_mongodb"
      end
      # resource path
      local_var_path = '/rotated-secret-update-mongodb'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_mongodb",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_mongodb\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateMssql] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_mssql(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_mssql_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateMssql] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_mssql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_mssql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_mssql"
      end
      # resource path
      local_var_path = '/rotated-secret-update-mssql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_mssql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_mssql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateMysql] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_mysql(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_mysql_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateMysql] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_mysql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_mysql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_mysql"
      end
      # resource path
      local_var_path = '/rotated-secret-update-mysql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_mysql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_mysql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateOracledb] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_oracledb(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_oracledb_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateOracledb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_oracledb_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_oracledb ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_oracledb"
      end
      # resource path
      local_var_path = '/rotated-secret-update-oracledb'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_oracledb",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_oracledb\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdatePostgresql] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_postgresql(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_postgresql_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdatePostgresql] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_postgresql_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_postgresql ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_postgresql"
      end
      # resource path
      local_var_path = '/rotated-secret-update-postgresql'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_postgresql",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_postgresql\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateRedis] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_redis(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_redis_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateRedis] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_redis_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_redis ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_redis"
      end
      # resource path
      local_var_path = '/rotated-secret-update-redis'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_redis",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_redis\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateRedshift] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_redshift(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_redshift_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateRedshift] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_redshift_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_redshift ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_redshift"
      end
      # resource path
      local_var_path = '/rotated-secret-update-redshift'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_redshift",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_redshift\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateSnowflake] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_snowflake(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_snowflake_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateSnowflake] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_snowflake_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_snowflake ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_snowflake"
      end
      # resource path
      local_var_path = '/rotated-secret-update-snowflake'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_snowflake",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_snowflake\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateSsh] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_ssh(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_ssh_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateSsh] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_ssh_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_ssh ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_ssh"
      end
      # resource path
      local_var_path = '/rotated-secret-update-ssh'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_ssh",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_ssh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [RotatedSecretUpdateWindows] 
    # @param [Hash] opts the optional parameters
    # @return [RotatedSecretUpdateOutput]
    def rotated_secret_update_windows(body, opts = {})
      data, _status_code, _headers = rotated_secret_update_windows_with_http_info(body, opts)
      data
    end

    # @param body [RotatedSecretUpdateWindows] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotatedSecretUpdateOutput, Integer, Hash)>] RotatedSecretUpdateOutput data, response status code and response headers
    def rotated_secret_update_windows_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.rotated_secret_update_windows ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.rotated_secret_update_windows"
      end
      # resource path
      local_var_path = '/rotated-secret-update-windows'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotatedSecretUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.rotated_secret_update_windows",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#rotated_secret_update_windows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [SetItemState] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def set_item_state(body, opts = {})
      data, _status_code, _headers = set_item_state_with_http_info(body, opts)
      data
    end

    # @param body [SetItemState] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def set_item_state_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.set_item_state ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.set_item_state"
      end
      # resource path
      local_var_path = '/set-item-state'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.set_item_state",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#set_item_state\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [SetRoleRule] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def set_role_rule(body, opts = {})
      data, _status_code, _headers = set_role_rule_with_http_info(body, opts)
      data
    end

    # @param body [SetRoleRule] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def set_role_rule_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.set_role_rule ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.set_role_rule"
      end
      # resource path
      local_var_path = '/set-role-rule'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.set_role_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#set_role_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ShareItem] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def share_item(body, opts = {})
      share_item_with_http_info(body, opts)
      nil
    end

    # @param body [ShareItem] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def share_item_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.share_item ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.share_item"
      end
      # resource path
      local_var_path = '/share-item'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.share_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#share_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [SignDataWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [SignOutput]
    def sign_data_with_classic_key(body, opts = {})
      data, _status_code, _headers = sign_data_with_classic_key_with_http_info(body, opts)
      data
    end

    # @param body [SignDataWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignOutput, Integer, Hash)>] SignOutput data, response status code and response headers
    def sign_data_with_classic_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.sign_data_with_classic_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.sign_data_with_classic_key"
      end
      # resource path
      local_var_path = '/sign-data-with-classic-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SignOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.sign_data_with_classic_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#sign_data_with_classic_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [SignEcDsa] 
    # @param [Hash] opts the optional parameters
    # @return [SignEcDsaOutput]
    def sign_ec_dsa(body, opts = {})
      data, _status_code, _headers = sign_ec_dsa_with_http_info(body, opts)
      data
    end

    # @param body [SignEcDsa] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignEcDsaOutput, Integer, Hash)>] SignEcDsaOutput data, response status code and response headers
    def sign_ec_dsa_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.sign_ec_dsa ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.sign_ec_dsa"
      end
      # resource path
      local_var_path = '/sign-ecdsa'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SignEcDsaOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.sign_ec_dsa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#sign_ec_dsa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [SignGPG] 
    # @param [Hash] opts the optional parameters
    # @return [SignGPGOutput]
    def sign_gpg(body, opts = {})
      data, _status_code, _headers = sign_gpg_with_http_info(body, opts)
      data
    end

    # @param body [SignGPG] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignGPGOutput, Integer, Hash)>] SignGPGOutput data, response status code and response headers
    def sign_gpg_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.sign_gpg ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.sign_gpg"
      end
      # resource path
      local_var_path = '/sign-gpg'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SignGPGOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.sign_gpg",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#sign_gpg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [SignJWTWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [SignJWTOutput]
    def sign_jwt_with_classic_key(body, opts = {})
      data, _status_code, _headers = sign_jwt_with_classic_key_with_http_info(body, opts)
      data
    end

    # @param body [SignJWTWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignJWTOutput, Integer, Hash)>] SignJWTOutput data, response status code and response headers
    def sign_jwt_with_classic_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.sign_jwt_with_classic_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.sign_jwt_with_classic_key"
      end
      # resource path
      local_var_path = '/sign-jwt-with-classic-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SignJWTOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.sign_jwt_with_classic_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#sign_jwt_with_classic_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [SignPKCS1] 
    # @param [Hash] opts the optional parameters
    # @return [SignPKCS1Output]
    def sign_pkcs1(body, opts = {})
      data, _status_code, _headers = sign_pkcs1_with_http_info(body, opts)
      data
    end

    # @param body [SignPKCS1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignPKCS1Output, Integer, Hash)>] SignPKCS1Output data, response status code and response headers
    def sign_pkcs1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.sign_pkcs1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.sign_pkcs1"
      end
      # resource path
      local_var_path = '/sign-pkcs1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SignPKCS1Output'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.sign_pkcs1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#sign_pkcs1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [SignPKICertWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [SignPKICertOutput]
    def sign_pki_cert_with_classic_key(body, opts = {})
      data, _status_code, _headers = sign_pki_cert_with_classic_key_with_http_info(body, opts)
      data
    end

    # @param body [SignPKICertWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignPKICertOutput, Integer, Hash)>] SignPKICertOutput data, response status code and response headers
    def sign_pki_cert_with_classic_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.sign_pki_cert_with_classic_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.sign_pki_cert_with_classic_key"
      end
      # resource path
      local_var_path = '/sign-pki-cert-with-classic-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SignPKICertOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.sign_pki_cert_with_classic_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#sign_pki_cert_with_classic_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [SignRsaSsaPss] 
    # @param [Hash] opts the optional parameters
    # @return [SignRsaSsaPssOutput]
    def sign_rsa_ssa_pss(body, opts = {})
      data, _status_code, _headers = sign_rsa_ssa_pss_with_http_info(body, opts)
      data
    end

    # @param body [SignRsaSsaPss] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SignRsaSsaPssOutput, Integer, Hash)>] SignRsaSsaPssOutput data, response status code and response headers
    def sign_rsa_ssa_pss_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.sign_rsa_ssa_pss ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.sign_rsa_ssa_pss"
      end
      # resource path
      local_var_path = '/sign-rsassa-pss'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'SignRsaSsaPssOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.sign_rsa_ssa_pss",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#sign_rsa_ssa_pss\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [StaticCredsAuth] 
    # @param [Hash] opts the optional parameters
    # @return [StaticCredsAuthOutput]
    def static_creds_auth(body, opts = {})
      data, _status_code, _headers = static_creds_auth_with_http_info(body, opts)
      data
    end

    # @param body [StaticCredsAuth] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(StaticCredsAuthOutput, Integer, Hash)>] StaticCredsAuthOutput data, response status code and response headers
    def static_creds_auth_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.static_creds_auth ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.static_creds_auth"
      end
      # resource path
      local_var_path = '/static-creds-auth'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'StaticCredsAuthOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.static_creds_auth",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#static_creds_auth\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateArtifactory] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_artifactory(body, opts = {})
      data, _status_code, _headers = target_create_artifactory_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateArtifactory] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_artifactory_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_artifactory ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_artifactory"
      end
      # resource path
      local_var_path = '/target-create-artifactory'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_artifactory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_artifactory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateAws] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_aws(body, opts = {})
      data, _status_code, _headers = target_create_aws_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateAws] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_aws_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_aws ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_aws"
      end
      # resource path
      local_var_path = '/target-create-aws'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_aws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_aws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateAzure] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_azure(body, opts = {})
      data, _status_code, _headers = target_create_azure_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateAzure] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_azure_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_azure ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_azure"
      end
      # resource path
      local_var_path = '/target-create-azure'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_azure",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_azure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateDB] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_db(body, opts = {})
      data, _status_code, _headers = target_create_db_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateDB] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_db_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_db ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_db"
      end
      # resource path
      local_var_path = '/target-create-db'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_db",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_db\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_dockerhub(body, opts = {})
      data, _status_code, _headers = target_create_dockerhub_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_dockerhub_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_dockerhub ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_dockerhub"
      end
      # resource path
      local_var_path = '/target-create-dockerhub'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_dockerhub",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_dockerhub\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateEks] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_eks(body, opts = {})
      data, _status_code, _headers = target_create_eks_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateEks] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_eks_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_eks ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_eks"
      end
      # resource path
      local_var_path = '/target-create-eks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_eks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_eks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_gcp(body, opts = {})
      data, _status_code, _headers = target_create_gcp_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_gcp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_gcp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_gcp"
      end
      # resource path
      local_var_path = '/target-create-gcp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_gcp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_gcp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateGithub] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_github(body, opts = {})
      data, _status_code, _headers = target_create_github_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateGithub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_github_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_github ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_github"
      end
      # resource path
      local_var_path = '/target-create-github'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_github",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_github\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateGitlab] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_gitlab(body, opts = {})
      data, _status_code, _headers = target_create_gitlab_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateGitlab] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_gitlab_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_gitlab ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_gitlab"
      end
      # resource path
      local_var_path = '/target-create-gitlab'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_gitlab",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_gitlab\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateGke] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_gke(body, opts = {})
      data, _status_code, _headers = target_create_gke_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateGke] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_gke_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_gke ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_gke"
      end
      # resource path
      local_var_path = '/target-create-gke'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_gke",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_gke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateGlobalSign] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_global_sign(body, opts = {})
      data, _status_code, _headers = target_create_global_sign_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateGlobalSign] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_global_sign_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_global_sign ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_global_sign"
      end
      # resource path
      local_var_path = '/target-create-globalsign'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_global_sign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_global_sign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateGlobalSignAtlas] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_global_sign_atlas(body, opts = {})
      data, _status_code, _headers = target_create_global_sign_atlas_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateGlobalSignAtlas] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_global_sign_atlas_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_global_sign_atlas ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_global_sign_atlas"
      end
      # resource path
      local_var_path = '/target-create-globalsign-atlas'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_global_sign_atlas",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_global_sign_atlas\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateGodaddy] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_godaddy(body, opts = {})
      data, _status_code, _headers = target_create_godaddy_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateGodaddy] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_godaddy_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_godaddy ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_godaddy"
      end
      # resource path
      local_var_path = '/target-create-godaddy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_godaddy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_godaddy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateHashiVault] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_hashi_vault(body, opts = {})
      data, _status_code, _headers = target_create_hashi_vault_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateHashiVault] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_hashi_vault_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_hashi_vault ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_hashi_vault"
      end
      # resource path
      local_var_path = '/target-create-hashi-vault'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_hashi_vault",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_hashi_vault\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateK8s] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_k8s(body, opts = {})
      data, _status_code, _headers = target_create_k8s_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateK8s] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_k8s_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_k8s ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_k8s"
      end
      # resource path
      local_var_path = '/target-create-k8s'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_k8s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_k8s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_ldap(body, opts = {})
      data, _status_code, _headers = target_create_ldap_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_ldap_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_ldap ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_ldap"
      end
      # resource path
      local_var_path = '/target-create-ldap'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_ldap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_ldap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateLinked] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_linked(body, opts = {})
      data, _status_code, _headers = target_create_linked_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateLinked] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_linked_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_linked ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_linked"
      end
      # resource path
      local_var_path = '/target-create-linked'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_linked",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_linked\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreatePing] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_ping(body, opts = {})
      data, _status_code, _headers = target_create_ping_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreatePing] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_ping_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_ping ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_ping"
      end
      # resource path
      local_var_path = '/target-create-ping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_ping",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_ping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateRabbitMq] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_rabbit_mq(body, opts = {})
      data, _status_code, _headers = target_create_rabbit_mq_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateRabbitMq] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_rabbit_mq_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_rabbit_mq ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_rabbit_mq"
      end
      # resource path
      local_var_path = '/target-create-rabbitmq'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_rabbit_mq",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_rabbit_mq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateSalesforce] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_salesforce(body, opts = {})
      data, _status_code, _headers = target_create_salesforce_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateSalesforce] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_salesforce_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_salesforce ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_salesforce"
      end
      # resource path
      local_var_path = '/target-create-salesforce'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_salesforce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_salesforce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateSsh] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_ssh(body, opts = {})
      data, _status_code, _headers = target_create_ssh_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateSsh] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_ssh_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_ssh ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_ssh"
      end
      # resource path
      local_var_path = '/target-create-ssh'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_ssh",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_ssh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateWeb] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_web(body, opts = {})
      data, _status_code, _headers = target_create_web_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateWeb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_web_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_web ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_web"
      end
      # resource path
      local_var_path = '/target-create-web'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_web",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_web\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateWindows] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_windows(body, opts = {})
      data, _status_code, _headers = target_create_windows_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateWindows] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_windows_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_windows ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_windows"
      end
      # resource path
      local_var_path = '/target-create-windows'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_windows",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_windows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetCreateZeroSSL] 
    # @param [Hash] opts the optional parameters
    # @return [TargetCreateOutput]
    def target_create_zero_ssl(body, opts = {})
      data, _status_code, _headers = target_create_zero_ssl_with_http_info(body, opts)
      data
    end

    # @param body [TargetCreateZeroSSL] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetCreateOutput, Integer, Hash)>] TargetCreateOutput data, response status code and response headers
    def target_create_zero_ssl_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_create_zero_ssl ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_create_zero_ssl"
      end
      # resource path
      local_var_path = '/target-create-zerossl'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetCreateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_create_zero_ssl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_create_zero_ssl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetDelete] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def target_delete(body, opts = {})
      data, _status_code, _headers = target_delete_with_http_info(body, opts)
      data
    end

    # @param body [TargetDelete] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def target_delete_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_delete ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_delete"
      end
      # resource path
      local_var_path = '/target-delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetGet] 
    # @param [Hash] opts the optional parameters
    # @return [Target]
    def target_get(body, opts = {})
      data, _status_code, _headers = target_get_with_http_info(body, opts)
      data
    end

    # @param body [TargetGet] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Target, Integer, Hash)>] Target data, response status code and response headers
    def target_get_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_get ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_get"
      end
      # resource path
      local_var_path = '/target-get'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Target'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetGetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [GetTargetDetailsOutput]
    def target_get_details(body, opts = {})
      data, _status_code, _headers = target_get_details_with_http_info(body, opts)
      data
    end

    # @param body [TargetGetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetTargetDetailsOutput, Integer, Hash)>] GetTargetDetailsOutput data, response status code and response headers
    def target_get_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_get_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_get_details"
      end
      # resource path
      local_var_path = '/target-get-details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'GetTargetDetailsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_get_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_get_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetList] 
    # @param [Hash] opts the optional parameters
    # @return [ListTargetsOutput]
    def target_list(body, opts = {})
      data, _status_code, _headers = target_list_with_http_info(body, opts)
      data
    end

    # @param body [TargetList] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListTargetsOutput, Integer, Hash)>] ListTargetsOutput data, response status code and response headers
    def target_list_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_list ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_list"
      end
      # resource path
      local_var_path = '/target-list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ListTargetsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateArtifactory] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_artifactory(body, opts = {})
      data, _status_code, _headers = target_update_artifactory_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateArtifactory] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_artifactory_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_artifactory ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_artifactory"
      end
      # resource path
      local_var_path = '/target-update-artifactory'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_artifactory",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_artifactory\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateAws] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_aws(body, opts = {})
      data, _status_code, _headers = target_update_aws_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateAws] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_aws_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_aws ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_aws"
      end
      # resource path
      local_var_path = '/target-update-aws'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_aws",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_aws\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateAzure] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_azure(body, opts = {})
      data, _status_code, _headers = target_update_azure_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateAzure] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_azure_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_azure ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_azure"
      end
      # resource path
      local_var_path = '/target-update-azure'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_azure",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_azure\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateDB] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_db(body, opts = {})
      data, _status_code, _headers = target_update_db_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateDB] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_db_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_db ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_db"
      end
      # resource path
      local_var_path = '/target-update-db'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_db",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_db\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_dockerhub(body, opts = {})
      data, _status_code, _headers = target_update_dockerhub_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateDockerhub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_dockerhub_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_dockerhub ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_dockerhub"
      end
      # resource path
      local_var_path = '/target-update-dockerhub'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_dockerhub",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_dockerhub\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateEks] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_eks(body, opts = {})
      data, _status_code, _headers = target_update_eks_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateEks] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_eks_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_eks ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_eks"
      end
      # resource path
      local_var_path = '/target-update-eks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_eks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_eks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_gcp(body, opts = {})
      data, _status_code, _headers = target_update_gcp_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateGcp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_gcp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_gcp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_gcp"
      end
      # resource path
      local_var_path = '/target-update-gcp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_gcp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_gcp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateGithub] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_github(body, opts = {})
      data, _status_code, _headers = target_update_github_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateGithub] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_github_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_github ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_github"
      end
      # resource path
      local_var_path = '/target-update-github'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_github",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_github\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateGitlab] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_gitlab(body, opts = {})
      data, _status_code, _headers = target_update_gitlab_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateGitlab] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_gitlab_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_gitlab ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_gitlab"
      end
      # resource path
      local_var_path = '/target-update-gitlab'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_gitlab",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_gitlab\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateGke] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_gke(body, opts = {})
      data, _status_code, _headers = target_update_gke_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateGke] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_gke_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_gke ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_gke"
      end
      # resource path
      local_var_path = '/target-update-gke'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_gke",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_gke\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateGlobalSign] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_global_sign(body, opts = {})
      data, _status_code, _headers = target_update_global_sign_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateGlobalSign] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_global_sign_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_global_sign ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_global_sign"
      end
      # resource path
      local_var_path = '/target-update-globalsign'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_global_sign",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_global_sign\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateGlobalSignAtlas] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_global_sign_atlas(body, opts = {})
      data, _status_code, _headers = target_update_global_sign_atlas_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateGlobalSignAtlas] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_global_sign_atlas_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_global_sign_atlas ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_global_sign_atlas"
      end
      # resource path
      local_var_path = '/target-update-globalsign-atlas'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_global_sign_atlas",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_global_sign_atlas\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateGodaddy] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_godaddy(body, opts = {})
      data, _status_code, _headers = target_update_godaddy_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateGodaddy] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_godaddy_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_godaddy ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_godaddy"
      end
      # resource path
      local_var_path = '/target-update-godaddy'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_godaddy",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_godaddy\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateHashiVault] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_hashi_vault(body, opts = {})
      data, _status_code, _headers = target_update_hashi_vault_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateHashiVault] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_hashi_vault_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_hashi_vault ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_hashi_vault"
      end
      # resource path
      local_var_path = '/target-update-hashi-vault'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_hashi_vault",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_hashi_vault\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateK8s] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_k8s(body, opts = {})
      data, _status_code, _headers = target_update_k8s_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateK8s] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_k8s_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_k8s ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_k8s"
      end
      # resource path
      local_var_path = '/target-update-k8s'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_k8s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_k8s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_ldap(body, opts = {})
      data, _status_code, _headers = target_update_ldap_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateLdap] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_ldap_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_ldap ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_ldap"
      end
      # resource path
      local_var_path = '/target-update-ldap'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_ldap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_ldap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateLinked] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_linked(body, opts = {})
      data, _status_code, _headers = target_update_linked_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateLinked] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_linked_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_linked ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_linked"
      end
      # resource path
      local_var_path = '/target-update-linked'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_linked",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_linked\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdatePing] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_ping(body, opts = {})
      data, _status_code, _headers = target_update_ping_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdatePing] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_ping_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_ping ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_ping"
      end
      # resource path
      local_var_path = '/target-update-ping'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_ping",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_ping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateRabbitMq] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_rabbit_mq(body, opts = {})
      data, _status_code, _headers = target_update_rabbit_mq_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateRabbitMq] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_rabbit_mq_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_rabbit_mq ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_rabbit_mq"
      end
      # resource path
      local_var_path = '/target-update-rabbitmq'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_rabbit_mq",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_rabbit_mq\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateSalesforce] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_salesforce(body, opts = {})
      data, _status_code, _headers = target_update_salesforce_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateSalesforce] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_salesforce_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_salesforce ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_salesforce"
      end
      # resource path
      local_var_path = '/target-update-salesforce'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_salesforce",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_salesforce\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateSsh] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_ssh(body, opts = {})
      data, _status_code, _headers = target_update_ssh_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateSsh] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_ssh_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_ssh ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_ssh"
      end
      # resource path
      local_var_path = '/target-update-ssh'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_ssh",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_ssh\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateWeb] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_web(body, opts = {})
      data, _status_code, _headers = target_update_web_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateWeb] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_web_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_web ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_web"
      end
      # resource path
      local_var_path = '/target-update-web'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_web",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_web\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateWindows] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_windows(body, opts = {})
      data, _status_code, _headers = target_update_windows_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateWindows] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_windows_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_windows ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_windows"
      end
      # resource path
      local_var_path = '/target-update-windows'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_windows",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_windows\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [TargetUpdateZeroSSL] 
    # @param [Hash] opts the optional parameters
    # @return [TargetUpdateOutput]
    def target_update_zero_ssl(body, opts = {})
      data, _status_code, _headers = target_update_zero_ssl_with_http_info(body, opts)
      data
    end

    # @param body [TargetUpdateZeroSSL] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TargetUpdateOutput, Integer, Hash)>] TargetUpdateOutput data, response status code and response headers
    def target_update_zero_ssl_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.target_update_zero_ssl ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.target_update_zero_ssl"
      end
      # resource path
      local_var_path = '/target-update-zerossl'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TargetUpdateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.target_update_zero_ssl",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#target_update_zero_ssl\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [Tokenize] 
    # @param [Hash] opts the optional parameters
    # @return [TokenizeOutput]
    def tokenize(body, opts = {})
      data, _status_code, _headers = tokenize_with_http_info(body, opts)
      data
    end

    # @param body [Tokenize] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(TokenizeOutput, Integer, Hash)>] TokenizeOutput data, response status code and response headers
    def tokenize_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.tokenize ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.tokenize"
      end
      # resource path
      local_var_path = '/tokenize'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'TokenizeOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.tokenize",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#tokenize\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UidCreateChildToken] 
    # @param [Hash] opts the optional parameters
    # @return [UidCreateChildTokenOutput]
    def uid_create_child_token(body, opts = {})
      data, _status_code, _headers = uid_create_child_token_with_http_info(body, opts)
      data
    end

    # @param body [UidCreateChildToken] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UidCreateChildTokenOutput, Integer, Hash)>] UidCreateChildTokenOutput data, response status code and response headers
    def uid_create_child_token_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.uid_create_child_token ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.uid_create_child_token"
      end
      # resource path
      local_var_path = '/uid-create-child-token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UidCreateChildTokenOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.uid_create_child_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#uid_create_child_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UidGenerateToken] 
    # @param [Hash] opts the optional parameters
    # @return [UidGenerateTokenOutput]
    def uid_generate_token(body, opts = {})
      data, _status_code, _headers = uid_generate_token_with_http_info(body, opts)
      data
    end

    # @param body [UidGenerateToken] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UidGenerateTokenOutput, Integer, Hash)>] UidGenerateTokenOutput data, response status code and response headers
    def uid_generate_token_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.uid_generate_token ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.uid_generate_token"
      end
      # resource path
      local_var_path = '/uid-generate-token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UidGenerateTokenOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.uid_generate_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#uid_generate_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UidListChildren] 
    # @param [Hash] opts the optional parameters
    # @return [UniversalIdentityDetails]
    def uid_list_children(body, opts = {})
      data, _status_code, _headers = uid_list_children_with_http_info(body, opts)
      data
    end

    # @param body [UidListChildren] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UniversalIdentityDetails, Integer, Hash)>] UniversalIdentityDetails data, response status code and response headers
    def uid_list_children_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.uid_list_children ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.uid_list_children"
      end
      # resource path
      local_var_path = '/uid-list-children'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UniversalIdentityDetails'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.uid_list_children",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#uid_list_children\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UidRevokeToken] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def uid_revoke_token(body, opts = {})
      data, _status_code, _headers = uid_revoke_token_with_http_info(body, opts)
      data
    end

    # @param body [UidRevokeToken] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def uid_revoke_token_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.uid_revoke_token ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.uid_revoke_token"
      end
      # resource path
      local_var_path = '/uid-revoke-token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.uid_revoke_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#uid_revoke_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UidRotateToken] 
    # @param [Hash] opts the optional parameters
    # @return [UidRotateTokenOutput]
    def uid_rotate_token(body, opts = {})
      data, _status_code, _headers = uid_rotate_token_with_http_info(body, opts)
      data
    end

    # @param body [UidRotateToken] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UidRotateTokenOutput, Integer, Hash)>] UidRotateTokenOutput data, response status code and response headers
    def uid_rotate_token_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.uid_rotate_token ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.uid_rotate_token"
      end
      # resource path
      local_var_path = '/uid-rotate-token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UidRotateTokenOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.uid_rotate_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#uid_rotate_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAccountSettings] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateAccountSettingsOutput]
    def update_account_settings(body, opts = {})
      data, _status_code, _headers = update_account_settings_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAccountSettings] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateAccountSettingsOutput, Integer, Hash)>] UpdateAccountSettingsOutput data, response status code and response headers
    def update_account_settings_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_account_settings ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_account_settings"
      end
      # resource path
      local_var_path = '/update-account-settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateAccountSettingsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_account_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_account_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateArtifactoryTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateArtifactoryTargetOutput]
    def update_artifactory_target(body, opts = {})
      data, _status_code, _headers = update_artifactory_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateArtifactoryTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateArtifactoryTargetOutput, Integer, Hash)>] UpdateArtifactoryTargetOutput data, response status code and response headers
    def update_artifactory_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_artifactory_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_artifactory_target"
      end
      # resource path
      local_var_path = '/update-artifactory-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateArtifactoryTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_artifactory_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_artifactory_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAssoc] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_assoc(body, opts = {})
      data, _status_code, _headers = update_assoc_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAssoc] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_assoc_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_assoc ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_assoc"
      end
      # resource path
      local_var_path = '/update-assoc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_assoc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_assoc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAuthMethod] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateAuthMethodOutput]
    def update_auth_method(body, opts = {})
      data, _status_code, _headers = update_auth_method_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAuthMethod] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateAuthMethodOutput, Integer, Hash)>] UpdateAuthMethodOutput data, response status code and response headers
    def update_auth_method_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_auth_method ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_auth_method"
      end
      # resource path
      local_var_path = '/update-auth-method'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateAuthMethodOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_auth_method",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_auth_method\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAuthMethodAWSIAM] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_auth_method_awsiam(body, opts = {})
      data, _status_code, _headers = update_auth_method_awsiam_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAuthMethodAWSIAM] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_auth_method_awsiam_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_auth_method_awsiam ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_auth_method_awsiam"
      end
      # resource path
      local_var_path = '/update-auth-method-aws-iam'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_auth_method_awsiam",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_auth_method_awsiam\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAuthMethodAzureAD] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_auth_method_azure_ad(body, opts = {})
      data, _status_code, _headers = update_auth_method_azure_ad_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAuthMethodAzureAD] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_auth_method_azure_ad_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_auth_method_azure_ad ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_auth_method_azure_ad"
      end
      # resource path
      local_var_path = '/update-auth-method-azure-ad'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_auth_method_azure_ad",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_auth_method_azure_ad\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAuthMethodCert] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateAuthMethodCertOutput]
    def update_auth_method_cert(body, opts = {})
      data, _status_code, _headers = update_auth_method_cert_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAuthMethodCert] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateAuthMethodCertOutput, Integer, Hash)>] UpdateAuthMethodCertOutput data, response status code and response headers
    def update_auth_method_cert_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_auth_method_cert ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_auth_method_cert"
      end
      # resource path
      local_var_path = '/update-auth-method-cert'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateAuthMethodCertOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_auth_method_cert",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_auth_method_cert\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAuthMethodGCP] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_auth_method_gcp(body, opts = {})
      data, _status_code, _headers = update_auth_method_gcp_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAuthMethodGCP] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_auth_method_gcp_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_auth_method_gcp ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_auth_method_gcp"
      end
      # resource path
      local_var_path = '/update-auth-method-gcp'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_auth_method_gcp",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_auth_method_gcp\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAuthMethodK8S] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateAuthMethodK8SOutput]
    def update_auth_method_k8_s(body, opts = {})
      data, _status_code, _headers = update_auth_method_k8_s_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAuthMethodK8S] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateAuthMethodK8SOutput, Integer, Hash)>] UpdateAuthMethodK8SOutput data, response status code and response headers
    def update_auth_method_k8_s_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_auth_method_k8_s ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_auth_method_k8_s"
      end
      # resource path
      local_var_path = '/update-auth-method-k8s'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateAuthMethodK8SOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_auth_method_k8_s",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_auth_method_k8_s\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAuthMethodLDAP] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateAuthMethodLDAPOutput]
    def update_auth_method_ldap(body, opts = {})
      data, _status_code, _headers = update_auth_method_ldap_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAuthMethodLDAP] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateAuthMethodLDAPOutput, Integer, Hash)>] UpdateAuthMethodLDAPOutput data, response status code and response headers
    def update_auth_method_ldap_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_auth_method_ldap ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_auth_method_ldap"
      end
      # resource path
      local_var_path = '/update-auth-method-ldap'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateAuthMethodLDAPOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_auth_method_ldap",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_auth_method_ldap\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAuthMethodOAuth2] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_auth_method_o_auth2(body, opts = {})
      data, _status_code, _headers = update_auth_method_o_auth2_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAuthMethodOAuth2] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_auth_method_o_auth2_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_auth_method_o_auth2 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_auth_method_o_auth2"
      end
      # resource path
      local_var_path = '/update-auth-method-oauth2'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_auth_method_o_auth2",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_auth_method_o_auth2\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAuthMethodOCI] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateAuthMethodOCIOutput]
    def update_auth_method_oci(body, opts = {})
      data, _status_code, _headers = update_auth_method_oci_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAuthMethodOCI] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateAuthMethodOCIOutput, Integer, Hash)>] UpdateAuthMethodOCIOutput data, response status code and response headers
    def update_auth_method_oci_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_auth_method_oci ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_auth_method_oci"
      end
      # resource path
      local_var_path = '/update-auth-method-oci'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateAuthMethodOCIOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_auth_method_oci",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_auth_method_oci\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAuthMethodOIDC] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_auth_method_oidc(body, opts = {})
      data, _status_code, _headers = update_auth_method_oidc_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAuthMethodOIDC] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_auth_method_oidc_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_auth_method_oidc ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_auth_method_oidc"
      end
      # resource path
      local_var_path = '/update-auth-method-oidc'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_auth_method_oidc",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_auth_method_oidc\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAuthMethodSAML] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_auth_method_saml(body, opts = {})
      data, _status_code, _headers = update_auth_method_saml_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAuthMethodSAML] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_auth_method_saml_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_auth_method_saml ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_auth_method_saml"
      end
      # resource path
      local_var_path = '/update-auth-method-saml'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_auth_method_saml",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_auth_method_saml\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAuthMethodUniversalIdentity] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_auth_method_universal_identity(body, opts = {})
      data, _status_code, _headers = update_auth_method_universal_identity_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAuthMethodUniversalIdentity] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_auth_method_universal_identity_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_auth_method_universal_identity ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_auth_method_universal_identity"
      end
      # resource path
      local_var_path = '/update-auth-method-universal-identity'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_auth_method_universal_identity",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_auth_method_universal_identity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAWSTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_aws_target(body, opts = {})
      data, _status_code, _headers = update_aws_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAWSTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_aws_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_aws_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_aws_target"
      end
      # resource path
      local_var_path = '/update-aws-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_aws_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_aws_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAWSTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateTargetOutput]
    def update_aws_target_details(body, opts = {})
      data, _status_code, _headers = update_aws_target_details_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAWSTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateTargetOutput, Integer, Hash)>] UpdateTargetOutput data, response status code and response headers
    def update_aws_target_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_aws_target_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_aws_target_details"
      end
      # resource path
      local_var_path = '/update-aws-target-details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_aws_target_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_aws_target_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateAzureTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateAzureTargetOutput]
    def update_azure_target(body, opts = {})
      data, _status_code, _headers = update_azure_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateAzureTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateAzureTargetOutput, Integer, Hash)>] UpdateAzureTargetOutput data, response status code and response headers
    def update_azure_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_azure_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_azure_target"
      end
      # resource path
      local_var_path = '/update-azure-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateAzureTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_azure_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_azure_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateCertificateValue] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateCertificateOutput]
    def update_certificate_value(body, opts = {})
      data, _status_code, _headers = update_certificate_value_with_http_info(body, opts)
      data
    end

    # @param body [UpdateCertificateValue] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateCertificateOutput, Integer, Hash)>] UpdateCertificateOutput data, response status code and response headers
    def update_certificate_value_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_certificate_value ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_certificate_value"
      end
      # resource path
      local_var_path = '/update-certificate-value'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateCertificateOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_certificate_value",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_certificate_value\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateClassicKeyCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_classic_key_certificate(body, opts = {})
      data, _status_code, _headers = update_classic_key_certificate_with_http_info(body, opts)
      data
    end

    # @param body [UpdateClassicKeyCertificate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_classic_key_certificate_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_classic_key_certificate ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_classic_key_certificate"
      end
      # resource path
      local_var_path = '/update-classic-key-certificate'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_classic_key_certificate",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_classic_key_certificate\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateDBTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateDBTargetOutput]
    def update_db_target(body, opts = {})
      data, _status_code, _headers = update_db_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateDBTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateDBTargetOutput, Integer, Hash)>] UpdateDBTargetOutput data, response status code and response headers
    def update_db_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_db_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_db_target"
      end
      # resource path
      local_var_path = '/update-db-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateDBTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_db_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_db_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateDBTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateTargetOutput]
    def update_db_target_details(body, opts = {})
      data, _status_code, _headers = update_db_target_details_with_http_info(body, opts)
      data
    end

    # @param body [UpdateDBTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateTargetOutput, Integer, Hash)>] UpdateTargetOutput data, response status code and response headers
    def update_db_target_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_db_target_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_db_target_details"
      end
      # resource path
      local_var_path = '/update-db-target-details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_db_target_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_db_target_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateDockerhubTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateDockerhubTargetOutput]
    def update_dockerhub_target(body, opts = {})
      data, _status_code, _headers = update_dockerhub_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateDockerhubTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateDockerhubTargetOutput, Integer, Hash)>] UpdateDockerhubTargetOutput data, response status code and response headers
    def update_dockerhub_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_dockerhub_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_dockerhub_target"
      end
      # resource path
      local_var_path = '/update-dockerhub-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateDockerhubTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_dockerhub_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_dockerhub_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateEKSTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateEKSTargetOutput]
    def update_eks_target(body, opts = {})
      data, _status_code, _headers = update_eks_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateEKSTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateEKSTargetOutput, Integer, Hash)>] UpdateEKSTargetOutput data, response status code and response headers
    def update_eks_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_eks_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_eks_target"
      end
      # resource path
      local_var_path = '/update-eks-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateEKSTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_eks_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_eks_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateEventForwarder] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_event_forwarder(body, opts = {})
      data, _status_code, _headers = update_event_forwarder_with_http_info(body, opts)
      data
    end

    # @param body [UpdateEventForwarder] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_event_forwarder_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_event_forwarder ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_event_forwarder"
      end
      # resource path
      local_var_path = '/update-event-forwarder'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_event_forwarder",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_event_forwarder\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateGcpTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateGcpTargetOutput]
    def update_gcp_target(body, opts = {})
      data, _status_code, _headers = update_gcp_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateGcpTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateGcpTargetOutput, Integer, Hash)>] UpdateGcpTargetOutput data, response status code and response headers
    def update_gcp_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_gcp_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_gcp_target"
      end
      # resource path
      local_var_path = '/update-gcp-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateGcpTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_gcp_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_gcp_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateGithubTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateGithubTargetOutput]
    def update_github_target(body, opts = {})
      data, _status_code, _headers = update_github_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateGithubTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateGithubTargetOutput, Integer, Hash)>] UpdateGithubTargetOutput data, response status code and response headers
    def update_github_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_github_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_github_target"
      end
      # resource path
      local_var_path = '/update-github-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateGithubTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_github_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_github_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateGitlabTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateGitlabTargetOutput]
    def update_gitlab_target(body, opts = {})
      data, _status_code, _headers = update_gitlab_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateGitlabTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateGitlabTargetOutput, Integer, Hash)>] UpdateGitlabTargetOutput data, response status code and response headers
    def update_gitlab_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_gitlab_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_gitlab_target"
      end
      # resource path
      local_var_path = '/update-gitlab-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateGitlabTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_gitlab_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_gitlab_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateGKETarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateGKETargetOutput]
    def update_gke_target(body, opts = {})
      data, _status_code, _headers = update_gke_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateGKETarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateGKETargetOutput, Integer, Hash)>] UpdateGKETargetOutput data, response status code and response headers
    def update_gke_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_gke_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_gke_target"
      end
      # resource path
      local_var_path = '/update-gke-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateGKETargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_gke_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_gke_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateGlobalSignAtlasTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateGlobalSignAtlasTargetOutput]
    def update_global_sign_atlas_target(body, opts = {})
      data, _status_code, _headers = update_global_sign_atlas_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateGlobalSignAtlasTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateGlobalSignAtlasTargetOutput, Integer, Hash)>] UpdateGlobalSignAtlasTargetOutput data, response status code and response headers
    def update_global_sign_atlas_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_global_sign_atlas_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_global_sign_atlas_target"
      end
      # resource path
      local_var_path = '/update-globalsign-atlas-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateGlobalSignAtlasTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_global_sign_atlas_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_global_sign_atlas_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateGlobalSignTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateGlobalSignTargetOutput]
    def update_global_sign_target(body, opts = {})
      data, _status_code, _headers = update_global_sign_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateGlobalSignTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateGlobalSignTargetOutput, Integer, Hash)>] UpdateGlobalSignTargetOutput data, response status code and response headers
    def update_global_sign_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_global_sign_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_global_sign_target"
      end
      # resource path
      local_var_path = '/update-globalsign-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateGlobalSignTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_global_sign_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_global_sign_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateGodaddyTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateGodaddyTargetOutput]
    def update_godaddy_target(body, opts = {})
      data, _status_code, _headers = update_godaddy_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateGodaddyTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateGodaddyTargetOutput, Integer, Hash)>] UpdateGodaddyTargetOutput data, response status code and response headers
    def update_godaddy_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_godaddy_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_godaddy_target"
      end
      # resource path
      local_var_path = '/update-godaddy-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateGodaddyTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_godaddy_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_godaddy_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateGroup] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateGroupOutput]
    def update_group(body, opts = {})
      data, _status_code, _headers = update_group_with_http_info(body, opts)
      data
    end

    # @param body [UpdateGroup] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateGroupOutput, Integer, Hash)>] UpdateGroupOutput data, response status code and response headers
    def update_group_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_group ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_group"
      end
      # resource path
      local_var_path = '/update-group'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateGroupOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_group",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_group\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateHashiVaultTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateHashiVaultTargetOutput]
    def update_hashi_vault_target(body, opts = {})
      data, _status_code, _headers = update_hashi_vault_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateHashiVaultTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateHashiVaultTargetOutput, Integer, Hash)>] UpdateHashiVaultTargetOutput data, response status code and response headers
    def update_hashi_vault_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_hashi_vault_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_hashi_vault_target"
      end
      # resource path
      local_var_path = '/update-hashi-vault-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateHashiVaultTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_hashi_vault_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_hashi_vault_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateItem] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateItemOutput]
    def update_item(body, opts = {})
      data, _status_code, _headers = update_item_with_http_info(body, opts)
      data
    end

    # @param body [UpdateItem] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateItemOutput, Integer, Hash)>] UpdateItemOutput data, response status code and response headers
    def update_item_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_item ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_item"
      end
      # resource path
      local_var_path = '/update-item'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateItemOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_item",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateLdapTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateLdapTargetOutput]
    def update_ldap_target(body, opts = {})
      data, _status_code, _headers = update_ldap_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateLdapTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateLdapTargetOutput, Integer, Hash)>] UpdateLdapTargetOutput data, response status code and response headers
    def update_ldap_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_ldap_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_ldap_target"
      end
      # resource path
      local_var_path = '/update-ldap-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateLdapTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_ldap_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_ldap_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateLdapTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateTargetOutput]
    def update_ldap_target_details(body, opts = {})
      data, _status_code, _headers = update_ldap_target_details_with_http_info(body, opts)
      data
    end

    # @param body [UpdateLdapTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateTargetOutput, Integer, Hash)>] UpdateTargetOutput data, response status code and response headers
    def update_ldap_target_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_ldap_target_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_ldap_target_details"
      end
      # resource path
      local_var_path = '/update-ldap-target-details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_ldap_target_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_ldap_target_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateLinkedTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_linked_target(body, opts = {})
      data, _status_code, _headers = update_linked_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateLinkedTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_linked_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_linked_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_linked_target"
      end
      # resource path
      local_var_path = '/update-linked-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_linked_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_linked_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateNativeK8STarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateNativeK8STargetOutput]
    def update_native_k8_s_target(body, opts = {})
      data, _status_code, _headers = update_native_k8_s_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateNativeK8STarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateNativeK8STargetOutput, Integer, Hash)>] UpdateNativeK8STargetOutput data, response status code and response headers
    def update_native_k8_s_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_native_k8_s_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_native_k8_s_target"
      end
      # resource path
      local_var_path = '/update-k8s-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateNativeK8STargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_native_k8_s_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_native_k8_s_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateOidcApp] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_oidc_app(body, opts = {})
      data, _status_code, _headers = update_oidc_app_with_http_info(body, opts)
      data
    end

    # @param body [UpdateOidcApp] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_oidc_app_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_oidc_app ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_oidc_app"
      end
      # resource path
      local_var_path = '/update-oidc-app'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_oidc_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_oidc_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdatePingTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_ping_target(body, opts = {})
      data, _status_code, _headers = update_ping_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdatePingTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_ping_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_ping_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_ping_target"
      end
      # resource path
      local_var_path = '/update-ping-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_ping_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_ping_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdatePKICertIssuer] 
    # @param [Hash] opts the optional parameters
    # @return [UpdatePKICertIssuerOutput]
    def update_pki_cert_issuer(body, opts = {})
      data, _status_code, _headers = update_pki_cert_issuer_with_http_info(body, opts)
      data
    end

    # @param body [UpdatePKICertIssuer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdatePKICertIssuerOutput, Integer, Hash)>] UpdatePKICertIssuerOutput data, response status code and response headers
    def update_pki_cert_issuer_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_pki_cert_issuer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_pki_cert_issuer"
      end
      # resource path
      local_var_path = '/update-pki-cert-issuer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdatePKICertIssuerOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_pki_cert_issuer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_pki_cert_issuer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateRabbitMQTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateRabbitMQTargetOutput]
    def update_rabbit_mq_target(body, opts = {})
      data, _status_code, _headers = update_rabbit_mq_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateRabbitMQTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateRabbitMQTargetOutput, Integer, Hash)>] UpdateRabbitMQTargetOutput data, response status code and response headers
    def update_rabbit_mq_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_rabbit_mq_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_rabbit_mq_target"
      end
      # resource path
      local_var_path = '/update-rabbitmq-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateRabbitMQTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_rabbit_mq_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_rabbit_mq_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateRabbitMQTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateTargetOutput]
    def update_rabbit_mq_target_details(body, opts = {})
      data, _status_code, _headers = update_rabbit_mq_target_details_with_http_info(body, opts)
      data
    end

    # @param body [UpdateRabbitMQTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateTargetOutput, Integer, Hash)>] UpdateTargetOutput data, response status code and response headers
    def update_rabbit_mq_target_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_rabbit_mq_target_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_rabbit_mq_target_details"
      end
      # resource path
      local_var_path = '/update-rabbitmq-target-details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_rabbit_mq_target_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_rabbit_mq_target_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateRDPTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateTargetOutput]
    def update_rdp_target_details(body, opts = {})
      data, _status_code, _headers = update_rdp_target_details_with_http_info(body, opts)
      data
    end

    # @param body [UpdateRDPTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateTargetOutput, Integer, Hash)>] UpdateTargetOutput data, response status code and response headers
    def update_rdp_target_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_rdp_target_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_rdp_target_details"
      end
      # resource path
      local_var_path = '/update-rdp-target-details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_rdp_target_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_rdp_target_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateRole] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateRoleOutput]
    def update_role(body, opts = {})
      data, _status_code, _headers = update_role_with_http_info(body, opts)
      data
    end

    # @param body [UpdateRole] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateRoleOutput, Integer, Hash)>] UpdateRoleOutput data, response status code and response headers
    def update_role_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_role ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_role"
      end
      # resource path
      local_var_path = '/update-role'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateRoleOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateRotatedSecret] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateRotatedSecretOutput]
    def update_rotated_secret(body, opts = {})
      data, _status_code, _headers = update_rotated_secret_with_http_info(body, opts)
      data
    end

    # @param body [UpdateRotatedSecret] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateRotatedSecretOutput, Integer, Hash)>] UpdateRotatedSecretOutput data, response status code and response headers
    def update_rotated_secret_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_rotated_secret ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_rotated_secret"
      end
      # resource path
      local_var_path = '/update-rotated-secret'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateRotatedSecretOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_rotated_secret",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_rotated_secret\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateRotationSettings] 
    # @param [Hash] opts the optional parameters
    # @return [RotateKeyOutput]
    def update_rotation_settings(body, opts = {})
      data, _status_code, _headers = update_rotation_settings_with_http_info(body, opts)
      data
    end

    # @param body [UpdateRotationSettings] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RotateKeyOutput, Integer, Hash)>] RotateKeyOutput data, response status code and response headers
    def update_rotation_settings_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_rotation_settings ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_rotation_settings"
      end
      # resource path
      local_var_path = '/update-rotation-settings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'RotateKeyOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_rotation_settings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_rotation_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateSalesforceTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateSalesforceTargetOutput]
    def update_salesforce_target(body, opts = {})
      data, _status_code, _headers = update_salesforce_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateSalesforceTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateSalesforceTargetOutput, Integer, Hash)>] UpdateSalesforceTargetOutput data, response status code and response headers
    def update_salesforce_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_salesforce_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_salesforce_target"
      end
      # resource path
      local_var_path = '/update-salesforce-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateSalesforceTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_salesforce_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_salesforce_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateSecretVal] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateSecretValOutput]
    def update_secret_val(body, opts = {})
      data, _status_code, _headers = update_secret_val_with_http_info(body, opts)
      data
    end

    # @param body [UpdateSecretVal] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateSecretValOutput, Integer, Hash)>] UpdateSecretValOutput data, response status code and response headers
    def update_secret_val_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_secret_val ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_secret_val"
      end
      # resource path
      local_var_path = '/update-secret-val'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateSecretValOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_secret_val",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_secret_val\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateSSHCertIssuer] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateSSHCertIssuerOutput]
    def update_ssh_cert_issuer(body, opts = {})
      data, _status_code, _headers = update_ssh_cert_issuer_with_http_info(body, opts)
      data
    end

    # @param body [UpdateSSHCertIssuer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateSSHCertIssuerOutput, Integer, Hash)>] UpdateSSHCertIssuerOutput data, response status code and response headers
    def update_ssh_cert_issuer_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_ssh_cert_issuer ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_ssh_cert_issuer"
      end
      # resource path
      local_var_path = '/update-ssh-cert-issuer'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateSSHCertIssuerOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_ssh_cert_issuer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_ssh_cert_issuer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateSSHTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateSSHTargetOutput]
    def update_ssh_target(body, opts = {})
      data, _status_code, _headers = update_ssh_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateSSHTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateSSHTargetOutput, Integer, Hash)>] UpdateSSHTargetOutput data, response status code and response headers
    def update_ssh_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_ssh_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_ssh_target"
      end
      # resource path
      local_var_path = '/update-ssh-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateSSHTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_ssh_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_ssh_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateSSHTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateTargetOutput]
    def update_ssh_target_details(body, opts = {})
      data, _status_code, _headers = update_ssh_target_details_with_http_info(body, opts)
      data
    end

    # @param body [UpdateSSHTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateTargetOutput, Integer, Hash)>] UpdateTargetOutput data, response status code and response headers
    def update_ssh_target_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_ssh_target_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_ssh_target_details"
      end
      # resource path
      local_var_path = '/update-ssh-target-details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_ssh_target_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_ssh_target_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateTargetOutput]
    def update_target(body, opts = {})
      data, _status_code, _headers = update_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateTargetOutput, Integer, Hash)>] UpdateTargetOutput data, response status code and response headers
    def update_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_target"
      end
      # resource path
      local_var_path = '/update-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateTargetOutput]
    def update_target_details(body, opts = {})
      data, _status_code, _headers = update_target_details_with_http_info(body, opts)
      data
    end

    # @param body [UpdateTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateTargetOutput, Integer, Hash)>] UpdateTargetOutput data, response status code and response headers
    def update_target_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_target_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_target_details"
      end
      # resource path
      local_var_path = '/update-target-details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_target_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_target_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateWebTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateWebTargetOutput]
    def update_web_target(body, opts = {})
      data, _status_code, _headers = update_web_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateWebTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateWebTargetOutput, Integer, Hash)>] UpdateWebTargetOutput data, response status code and response headers
    def update_web_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_web_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_web_target"
      end
      # resource path
      local_var_path = '/update-web-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateWebTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_web_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_web_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateWebTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateTargetOutput]
    def update_web_target_details(body, opts = {})
      data, _status_code, _headers = update_web_target_details_with_http_info(body, opts)
      data
    end

    # @param body [UpdateWebTargetDetails] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateTargetOutput, Integer, Hash)>] UpdateTargetOutput data, response status code and response headers
    def update_web_target_details_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_web_target_details ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_web_target_details"
      end
      # resource path
      local_var_path = '/update-web-target-details'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_web_target_details",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_web_target_details\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateWindowsTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def update_windows_target(body, opts = {})
      data, _status_code, _headers = update_windows_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateWindowsTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def update_windows_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_windows_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_windows_target"
      end
      # resource path
      local_var_path = '/update-windows-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_windows_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_windows_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UpdateZeroSSLTarget] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateZeroSSLTargetOutput]
    def update_zero_ssl_target(body, opts = {})
      data, _status_code, _headers = update_zero_ssl_target_with_http_info(body, opts)
      data
    end

    # @param body [UpdateZeroSSLTarget] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateZeroSSLTargetOutput, Integer, Hash)>] UpdateZeroSSLTargetOutput data, response status code and response headers
    def update_zero_ssl_target_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.update_zero_ssl_target ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.update_zero_ssl_target"
      end
      # resource path
      local_var_path = '/update-zerossl-target'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateZeroSSLTargetOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.update_zero_ssl_target",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#update_zero_ssl_target\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UploadRSA] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def upload_rsa(body, opts = {})
      data, _status_code, _headers = upload_rsa_with_http_info(body, opts)
      data
    end

    # @param body [UploadRSA] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def upload_rsa_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.upload_rsa ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.upload_rsa"
      end
      # resource path
      local_var_path = '/upload-rsa'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.upload_rsa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#upload_rsa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UscUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [UscCreateSecretOutput]
    def usc_create(body, opts = {})
      data, _status_code, _headers = usc_create_with_http_info(body, opts)
      data
    end

    # @param body [UscUpdate] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UscCreateSecretOutput, Integer, Hash)>] UscCreateSecretOutput data, response status code and response headers
    def usc_create_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.usc_create ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.usc_create"
      end
      # resource path
      local_var_path = '/usc-create'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UscCreateSecretOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.usc_create",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#usc_create\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UscDelete] 
    # @param [Hash] opts the optional parameters
    # @return [UscDeleteSecretOutput]
    def usc_delete(body, opts = {})
      data, _status_code, _headers = usc_delete_with_http_info(body, opts)
      data
    end

    # @param body [UscDelete] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UscDeleteSecretOutput, Integer, Hash)>] UscDeleteSecretOutput data, response status code and response headers
    def usc_delete_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.usc_delete ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.usc_delete"
      end
      # resource path
      local_var_path = '/usc-delete'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UscDeleteSecretOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.usc_delete",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#usc_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UscGet] 
    # @param [Hash] opts the optional parameters
    # @return [UscGetSecretOutput]
    def usc_get(body, opts = {})
      data, _status_code, _headers = usc_get_with_http_info(body, opts)
      data
    end

    # @param body [UscGet] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UscGetSecretOutput, Integer, Hash)>] UscGetSecretOutput data, response status code and response headers
    def usc_get_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.usc_get ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.usc_get"
      end
      # resource path
      local_var_path = '/usc-get'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UscGetSecretOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.usc_get",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#usc_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [UscList] 
    # @param [Hash] opts the optional parameters
    # @return [UscListSecretsOutput]
    def usc_list(body, opts = {})
      data, _status_code, _headers = usc_list_with_http_info(body, opts)
      data
    end

    # @param body [UscList] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UscListSecretsOutput, Integer, Hash)>] UscListSecretsOutput data, response status code and response headers
    def usc_list_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.usc_list ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.usc_list"
      end
      # resource path
      local_var_path = '/usc-list'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'UscListSecretsOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.usc_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#usc_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param [Hash] opts the optional parameters
    # @return [UscUpdateSecretOutput]
    def usc_update(opts = {})
      data, _status_code, _headers = usc_update_with_http_info(opts)
      data
    end

    # @param [Hash] opts the optional parameters
    # @return [Array<(UscUpdateSecretOutput, Integer, Hash)>] UscUpdateSecretOutput data, response status code and response headers
    def usc_update_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.usc_update ...'
      end
      # resource path
      local_var_path = '/usc-update'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'UscUpdateSecretOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.usc_update",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#usc_update\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [ValidateToken] 
    # @param [Hash] opts the optional parameters
    # @return [ValidateTokenOutput]
    def validate_token(body, opts = {})
      data, _status_code, _headers = validate_token_with_http_info(body, opts)
      data
    end

    # @param body [ValidateToken] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ValidateTokenOutput, Integer, Hash)>] ValidateTokenOutput data, response status code and response headers
    def validate_token_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.validate_token ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.validate_token"
      end
      # resource path
      local_var_path = '/validate-token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'ValidateTokenOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.validate_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#validate_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [VerifyDataWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [VerifyPKICertOutput]
    def verify_data_with_classic_key(body, opts = {})
      data, _status_code, _headers = verify_data_with_classic_key_with_http_info(body, opts)
      data
    end

    # @param body [VerifyDataWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VerifyPKICertOutput, Integer, Hash)>] VerifyPKICertOutput data, response status code and response headers
    def verify_data_with_classic_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.verify_data_with_classic_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.verify_data_with_classic_key"
      end
      # resource path
      local_var_path = '/verify-data-with-classic-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VerifyPKICertOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.verify_data_with_classic_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#verify_data_with_classic_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [VerifyEcDsa] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def verify_ec_dsa(body, opts = {})
      data, _status_code, _headers = verify_ec_dsa_with_http_info(body, opts)
      data
    end

    # @param body [VerifyEcDsa] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def verify_ec_dsa_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.verify_ec_dsa ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.verify_ec_dsa"
      end
      # resource path
      local_var_path = '/verify-ecdsa'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.verify_ec_dsa",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#verify_ec_dsa\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [VerifyGPG] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def verify_gpg(body, opts = {})
      data, _status_code, _headers = verify_gpg_with_http_info(body, opts)
      data
    end

    # @param body [VerifyGPG] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def verify_gpg_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.verify_gpg ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.verify_gpg"
      end
      # resource path
      local_var_path = '/verify-gpg'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.verify_gpg",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#verify_gpg\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [VerifyJWTWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [VerifyJWTOutput]
    def verify_jwt_with_classic_key(body, opts = {})
      data, _status_code, _headers = verify_jwt_with_classic_key_with_http_info(body, opts)
      data
    end

    # @param body [VerifyJWTWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VerifyJWTOutput, Integer, Hash)>] VerifyJWTOutput data, response status code and response headers
    def verify_jwt_with_classic_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.verify_jwt_with_classic_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.verify_jwt_with_classic_key"
      end
      # resource path
      local_var_path = '/verify-jwt-with-classic-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VerifyJWTOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.verify_jwt_with_classic_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#verify_jwt_with_classic_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [VerifyPKCS1] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def verify_pkcs1(body, opts = {})
      data, _status_code, _headers = verify_pkcs1_with_http_info(body, opts)
      data
    end

    # @param body [VerifyPKCS1] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def verify_pkcs1_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.verify_pkcs1 ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.verify_pkcs1"
      end
      # resource path
      local_var_path = '/verify-pkcs1'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.verify_pkcs1",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#verify_pkcs1\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [VerifyPKICertWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [VerifyPKICertOutput]
    def verify_pki_cert_with_classic_key(body, opts = {})
      data, _status_code, _headers = verify_pki_cert_with_classic_key_with_http_info(body, opts)
      data
    end

    # @param body [VerifyPKICertWithClassicKey] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VerifyPKICertOutput, Integer, Hash)>] VerifyPKICertOutput data, response status code and response headers
    def verify_pki_cert_with_classic_key_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.verify_pki_cert_with_classic_key ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.verify_pki_cert_with_classic_key"
      end
      # resource path
      local_var_path = '/verify-pki-cert-with-classic-key'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'VerifyPKICertOutput'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.verify_pki_cert_with_classic_key",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#verify_pki_cert_with_classic_key\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param body [VerifyRsaSsaPss] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def verify_rsa_ssa_pss(body, opts = {})
      data, _status_code, _headers = verify_rsa_ssa_pss_with_http_info(body, opts)
      data
    end

    # @param body [VerifyRsaSsaPss] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def verify_rsa_ssa_pss_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: V2Api.verify_rsa_ssa_pss ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling V2Api.verify_rsa_ssa_pss"
      end
      # resource path
      local_var_path = '/verify-rsassa-pss'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json']) unless header_params['Accept']
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(body)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"V2Api.verify_rsa_ssa_pss",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: V2Api#verify_rsa_ssa_pss\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
